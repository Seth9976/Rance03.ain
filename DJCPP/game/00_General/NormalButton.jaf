NormalButton::NormalButton()
{
	this.gameObjectId_ = g_gameObjectManager.addFocusObject(this.update, this.isHover);
	this.state_ = 3;
	this.origin_ = 7;
	this.isEnable_ = true;
	this.x_ = this.y_ = this.w_ = this.h_ = 0;
	this.z_ = 6000;
}

void NormalButton::update()
{
	if (this.w_ == 0)
	{
		return;
	}
	this.updateHover();
	this.updateClick();
	switch (this.state_)
	{
	case 1:
		if (this.isHover_ && g_mouse.onDown(0))
		{
			this.runClickEffectMotion();
			if (this.sound_ != "")
			{
				g_sysSound.play(5, this.sound_);
			}
			else
			{
				playClick();
			}
		}
		if (!this.lastHover_ && this.isHover_)
		{
			playCursor();
		}
		if (this.isClick_)
		{
			this.clickCallback_(this.id_);
		}
		break;
	case 3:
		break;
	}
	this.updateChildPartsShowState();
	this.parent_.setShow(this.isShow());
}

void NormalButton::init(string cgBase, string text, string sound, bool isVertical)
{
	this.sound_ = sound;
	this.cgBase_ = cgBase;
	this.text_ = text;
	this.isVertical_ = isVertical;
	this.initParts();
	this.parts_[1].setOrigin(5);
	this.parts_[1].setPos(this.w_ / 2, this.h_ / 2);
	this.setPartsShowState();
	this.updateChildPartsShowState();
}

void NormalButton::initParts()
{
	this.parts_[0].init(this.cgBase_, 0);
	this.w_ = this.parts_[0].getWidth();
	this.h_ = this.parts_[0].getHeight();
	if (this.isVertical_)
	{
		this.h_ = this.h_ / 4;
	}
	else
	{
		this.w_ = this.w_ / 4;
	}
	this.parts_[1].initAsText(this.text_, 26, false, 256, 0, 0, 0);
	if (this.parts_[1].getWidth() > this.w_ * 0.85)
	{
		this.parts_[1].setXScaling((100.0 * (this.w_ * 0.85)) / this.parts_[1].getWidth());
	}
	this.parts_[2].initAsCgPlaneImage(this.cgBase_, 255, 255, 255);
	this.parts_[2].setCgRange(0, 0, this.w_, this.h_);
	this.parts_[2].setAlpha(0.0);
	createPartsGroup(this.parent_, this.parts_, this.z_);
}

void NormalButton::setTextLeftAlign(int left)
{
	this.parts_[1].setOrigin(4);
	this.parts_[1].setPos(left, this.h_ / 2);
	this.parts_[1].setXScaling(100.0);
}

void NormalButton::fadeIn(bool val)
{
	array@PartsMotion m[1];
	m[0] = getStandardMotion(val ? 0 : 1);
	this.fadeInCustomized(val, m);
}

void NormalButton::fadeInCustomized(bool val, ref array@PartsMotion motions)
{
	if (val && (this.state_ == 0 || this.state_ == 1))
	{
		return;
	}
	if (!val && (this.state_ == 2 || this.state_ == 3))
	{
		return;
	}
	this.state_ = val ? 0 : 2;
	if (val)
	{
		this.parent_.runMotionArray(motions, this.onFinishFadeIn);
	}
	else
	{
		this.parent_.runMotionArray(motions, this.onFinishFadeOut);
	}
}

void NormalButton::onFinishFadeIn()
{
	this.state_ = 1;
}

void NormalButton::onFinishFadeOut()
{
	this.state_ = 3;
	this.onFinishFadeOutCallback_();
}

bool NormalButton::isHover()
{
	this.updateHover();
	return this.isHover_;
}

bool NormalButton::isShow()
{
	return this.state_ != 3;
}

bool NormalButton::isClick()
{
	return this.isClick_;
}

void NormalButton::setPos(int x, int y)
{
	this.x_ = x;
	this.y_ = y;
	this.parent_.setPos(this.x_, this.y_);
}

void NormalButton::setParent(int parentPartsNumber)
{
	this.z_ = 1;
	this.parent_.setPos(this.x_, this.y_);
	this.parent_.setZ(this.z_);
	this.parent_.setParent(parentPartsNumber);
}

void NormalButton::setPartsShowState()
{
	int i;
	for (i = 0; i < this.parts_.Numof(); ++i)
	{
		this.parts_[i].setShow(true);
	}
}

void NormalButton::setShow(bool val)
{
	this.state_ = val ? 1 : 3;
}

void NormalButton::setEnable(bool val)
{
	this.isEnable_ = val;
}

void NormalButton::setBaseZ(int baseZ)
{
	this.parent_.setZBasePos(baseZ);
}

void NormalButton::runClickEffectMotion()
{
	float per = 1.4;
	float moveX = (-(per - 1.0) * this.w_) / 2.0;
	float moveY = (-(per - 1.0) * this.h_) / 2.0;
	PartsMotion m;
	m.setScaling(100, per * 100.0, 1);
	m.setMove(0, 0, moveX, moveY, 1);
	m.setAlpha(180, 0, 0);
	m.setTime(150);
	this.parts_[2].setShow(true);
	this.parts_[2].runMotion(m, NULL);
}

void NormalButton::updateHover()
{
	this.lastHover_ = this.isHover_;
	this.isHover_ = this.state_ == 1 && this.isEnable_ && this.isCollide();
}

void NormalButton::updateClick()
{
	this.isClick_ = g_mouse.isClickWithFocus(this.gameObjectId_);
}

void NormalButton::updateChildPartsShowState()
{
	int n;
	if (this.isHover_ && !g_mouse.isDown(0))
	{
		n = 1;
	}
	else if (this.isHover_ && g_mouse.isDown(0))
	{
		n = 2;
	}
	else if (!this.isEnable_)
	{
		n = 3;
	}
	if (this.isVertical_)
	{
		this.parts_[0].setCgRange(0, this.h_ * n, this.w_, this.h_);
	}
	else
	{
		this.parts_[0].setCgRange(this.w_ * n, 0, this.w_, this.h_);
	}
}

bool NormalButton::isEnable()
{
	return this.isEnable_;
}

bool NormalButton::isCollide()
{
	return AFL_Parts_IsPointIn(this.parts_[0].getPartsNumber(), g_mouse.getX(), g_mouse.getY(), 1);
}

bool NormalButton::isMotion()
{
	return this.state_ == 1 || this.state_ == 3;
}

void NormalButton::setClickCallback(DG_ButtonClickCallback cb, int id)
{
	this.clickCallback_ = cb;
	this.id_ = id;
}

void NormalButton::setOnFinishFadeOutCallback(DG_GeneralCallback onFinishFadeOutCallback)
{
	this.onFinishFadeOutCallback_ = onFinishFadeOutCallback;
}

void NormalButton::setZ(int z)
{
	this.z_ = z;
	this.parent_.setZ(this.z_);
}

void NormalButton::runMotion(ref PartsMotion m)
{
	if (this.state_ == 1)
	{
		this.parent_.runMotion(m, NULL);
	}
}

