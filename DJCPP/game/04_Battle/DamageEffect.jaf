DamageEffect::DamageEffect()
{
	this.gameObjectId_ = g_gameObjectManager.addObject(this.update);
}

void DamageEffect::init(string effectName)
{
	this.effectName_ = effectName;
	this.initParts();
}

void DamageEffect::setPos(int x, int y)
{
	this.x_ = x;
	this.y_ = y;
}

void DamageEffect::update()
{
}

void DamageEffect::initParts()
{
	if (this.effectName_ != "")
	{
		this.partsEffectFlat_.initAsFlat(this.effectName_);
		this.partsEffectFlat_.setZ(30000.0);
	}
	int i;
	for (i = 0; i < this.line_.Numof(); ++i)
	{
		this.line_[i].init(1);
	}
	this.circleEffect_.init("システム／エフェクト／円／仮");
}

void DamageEffect::setPartsPos()
{
	int i;
	for (i = 0; i < this.line_.Numof(); ++i)
	{
		this.line_[i].setCenter(this.x_, this.y_);
	}
	this.circleEffect_.setPos(this.x_, this.y_);
	this.partsEffectFlat_.setPos(this.x_, this.y_);
}

void DamageEffect::run(int type)
{
	this.setPartsPos();
	int i;
	if (type == 0 || type == 1)
	{
		int count = type == 1 ? 30 : 10;
		for (i = 0; i < count; ++i)
		{
			this.line_[i].setCenter(this.x_, this.y_);
			this.line_[i].run();
		}
	}
	if (type != 3)
	{
		this.circleEffect_.setMaxScaling(type == 1 ? 300 : 125);
		this.circleEffect_.run(0);
	}
	if (type == 0)
	{
		g_sysSound.play(3, "戦闘エフェクト／通常アタック音");
	}
	else if (type == 1)
	{
		g_sysSound.play(3, "戦闘エフェクト／クリティカルアタック音");
	}
	this.partsEffectFlat_.setShow(true);
	this.partsEffectFlat_.startFlat(false, 1.0);
	this.playSound();
}

void DamageEffect::playSound()
{
	string name = this.effectName_.GetPart(8, this.effectName_.Length() - 8);
	pass("name:%s" % name);
	g_sysSound.play(2, name);
}

void DamageEffect::setZ(int z)
{
	this.circleEffect_.setZ(z);
	this.partsEffectFlat_.setZ(z + 1);
	int i;
	for (i = 0; i < this.line_.Numof(); ++i)
	{
		this.line_[i].setZ(z);
	}
}

