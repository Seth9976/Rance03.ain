void SceneMirrorPieceView::init()
{
	this.isFinish_ = false;
	this.pageCount_ = g_mirrorPiece.Numof();
	int i;
	for (i = 0; i < g_mirrorPiece.Numof(); ++i)
	{
		g_mirrorPiece[i].setShownAtViewer(true);
	}
	this.parts_.Alloc(this.pageCount_);
	this.scrollBase_.init(this.pageCount_, "システム／鏡の破片／下地", true);
	this.initMirrorPiece();
	this.initButton();
}

void SceneMirrorPieceView::initMirrorPiece()
{
	int i;
	for (i = 0; i < this.parts_.Numof(); ++i)
	{
		this.parts_[i].initAsUserStructure();
		int pn = this.parts_[i].getPartsNumber();
		Ｐ＿構築手順＿ＣＧ設定(pn, g_mirrorPiece[i].getBgCgName(), 1);
		int j;
		for (j = 0; j < 10; ++j)
		{
			if (g_mirrorPiece[i].isPieceOpen(j))
			{
				Ｐ＿構築手順＿ＣＧ部分アルファブレンド(pn, g_mirrorPiece[i].getCgName(j), 0, 0, 0, 0, 1024, 768, 1);
			}
		}
		Ｐ＿構築ビルド(pn, 1);
		this.parts_[i].setShow(true);
		this.parts_[i].setZ(6000.0);
		this.parts_[i].setPos(1024 * i, 0.0);
		this.parts_[i].setParent(this.scrollBase_.getPartsNumber());
	}
}

void SceneMirrorPieceView::initButton()
{
	this.btnExit_.init("システム／ボタン／幅１７０", "閉じる", "", true);
	this.btnExit_.setPos(839, 691);
	this.btnExit_.setClickCallback(this.onClickButtonExit, 0);
}

void SceneMirrorPieceView::onClickButtonExit(int index)
{
	this.fadeIn(false);
}

void SceneMirrorPieceView::run()
{
	this.fadeIn(true);
}

void SceneMirrorPieceView::fadeIn(bool val)
{
	this.btnExit_.fadeIn(val);
	this.scrollBase_.fadeIn(val, NULL);
	int i;
	for (i = 0; i < this.parts_.Numof(); ++i)
	{
		this.parts_[i].runMotion(getStandardMotion(val ? 0 : 1), NULL);
	}
	if (!val)
	{
		this.timerCb_.setTimer(300, this.onFinish);
	}
}

void SceneMirrorPieceView::onFinish()
{
	this.isFinish_ = true;
}

bool SceneMirrorPieceView::update()
{
	if (g_mouse.isClick(1))
	{
		playCancel();
		this.fadeIn(false);
	}
	return !this.isFinish_;
}

void SceneMirrorPieceView::onClickThumbnailButton(int index)
{
	array@string n;
	g_cgList[index].getShownCgList(n);
	openCgSwipeView(n);
}

