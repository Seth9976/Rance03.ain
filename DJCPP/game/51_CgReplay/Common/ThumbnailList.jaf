ThumbnailList::ThumbnailList()
{
	this.gameObjectId_ = g_gameObjectManager.addObject(this.update);
}

void ThumbnailList::init(bool isCg)
{
	this.isCg_ = isCg;
	this.count_ = this.getThumbnailCount();
	this.pageCount_ = (this.count_ + 11) / 12;
	this.base_.init(this.pageCount_, this.isCg_ ? "システム／ＣＧ鑑賞／下地" : "システム／シーン回想／下地", false);
	this.initThumbnail();
}

void ThumbnailList::initThumbnail()
{
	this.thumbnail_.Alloc(this.count_);
	int i;
	for (i = 0; i < this.thumbnail_.Numof(); ++i)
	{
		if (this.isCg_)
		{
			this.thumbnail_[i].init(g_cgList[i].getThumbnailCg(), g_cgList[i].isAvailable(), this.base_.getPartsNumber());
		}
		else
		{
			this.thumbnail_[i].init(g_replay[i].getThumbnailCg(), g_replay[i].isAvailable(), this.base_.getPartsNumber());
		}
	}
	this.setThumbnailPosition();
}

void ThumbnailList::setThumbnailPosition()
{
	int i;
	for (i = 0; i < this.thumbnail_.Numof(); ++i)
	{
		int page = i / 12;
		int x = i % 12 % 4;
		int y = (i % 12) / 4;
		this.thumbnail_[i].setPos(68 + page * 1024 + x * 224, 123 + y * 184);
		this.thumbnail_[i].setOnClickCallback(this.onClickThumbnail, i);
	}
}

int ThumbnailList::getThumbnailCount()
{
	return this.isCg_ ? g_cgList.Numof() : g_replay.Numof();
}

void ThumbnailList::update()
{
}

void ThumbnailList::fadeIn(bool val, unknown_delegate onFinish)
{
	int i;
	for (i = 0; i < this.thumbnail_.Numof(); ++i)
	{
		this.thumbnail_[i].fadeIn(val);
	}
	this.base_.fadeIn(val, NULL);
}

void ThumbnailList::onClickThumbnail(int index)
{
	this.cb_(index);
}

void ThumbnailList::setOnClickCallback(DG_ThumbnailButtonClickCallback cb)
{
	this.cb_ = cb;
}

