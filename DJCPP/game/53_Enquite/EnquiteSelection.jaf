void EnquiteSelection::setCheckBoxName(string n)
{
	this.checkBoxName_ = n;
}

string EnquiteSelection::getCheckBoxName()
{
	return this.checkBoxName_;
}

void EnquiteSelection::setChecked(bool val)
{
	this.isChecked_ = val;
}

bool EnquiteSelection::isChecked()
{
	return this.isChecked_;
}

void EnquiteSelection::setEnableCheckCgName(string n)
{
	this.enableCheckCgName_ = n;
}

string EnquiteSelection::getEnableCheckCgName()
{
	return this.enableCheckCgName_;
}

void EnquiteSelection::setAnswerId(int id)
{
	this.id_ = id;
}

int EnquiteSelection::getAnswerId()
{
	return this.id_;
}

void loadEnquiteSelection()
{
	if (!g_enquiteSelection.Empty())
	{
		return;
	}
	string key = "アンケートアクティビティ情報";
	int count = EX_Height(key);
	int i;
	for (i = 0; i < count; ++i)
	{
		EnquiteSelection s;
		s.setCheckBoxName(EX_RA2String(key, i, "checkboxName", ""));
		s.setEnableCheckCgName(EX_RA2String(key, i, "enableCheckCgName", ""));
		s.setChecked(false);
		s.setAnswerId(EX_RA2Int(key, i, "qId", 0));
		g_enquiteSelection.PushBack(s);
	}
}

bool isEnquiteAnswered(int answerId)
{
	if (answerId == 6)
	{
		return true;
	}
	if (answerId == 16)
	{
		return true;
	}
	if (answerId == 17)
	{
		return true;
	}
	if (answerId == 18)
	{
		return true;
	}
	int i;
	for (i = 0; i < g_enquiteSelection.Numof(); ++i)
	{
		if (g_enquiteSelection[i].getAnswerId() == answerId && g_enquiteSelection[i].isChecked())
		{
			return true;
		}
	}
	return false;
}

int getEnquiteAnswerIndex(int answerId)
{
	int index;
	int i;
	for (i = 0; i < g_enquiteSelection.Numof(); ++i)
	{
		if (g_enquiteSelection[i].getAnswerId() == answerId)
		{
			if (g_enquiteSelection[i].isChecked())
			{
				return index;
			}
			++index;
		}
	}
	return -1;
}

