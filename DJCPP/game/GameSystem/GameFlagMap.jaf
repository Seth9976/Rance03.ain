GameFlagMap::GameFlagMap()
{
	this.isGlobalMode_ = false;
}

void GameFlagMap::setInt(string key, int value)
{
	bool isChanged = false;
	int r = this.find(key);
	if (r == -1)
	{
		pass("■フラグ追加[%s][%d]" % key % value);
		KeyValuePair p;
		p.key = key;
		p.type = 0;
		p.valueInt = value;
		this.pair_.PushBack(p);
		this.pair_.SortBy(&KeyValuePair::key);
		isChanged = true;
	}
	else if (this.pair_[r].type == 0)
	{
		if (this.pair_[r].valueInt != value)
		{
			isChanged = true;
			pass("■フラグ変更[%s][%d]->[%d]" % key % this.pair_[r].valueInt % value);
			this.pair_[r].valueInt = value;
		}
	}
	else
	{
		pass("■フラグ無効[%s]String値に対してInt値を設定しました" % key);
	}
	if (isChanged && this.isGlobalMode_)
	{
		共有セーブ();
	}
}

void GameFlagMap::setString(string key, string value)
{
	int r = this.find(key);
	if (r == -1)
	{
		pass("■フラグ追加[%s][%s]" % key % value);
		KeyValuePair p;
		p.key = key;
		p.type = 1;
		p.valueString = value;
		this.pair_.PushBack(p);
		this.pair_.SortBy(&KeyValuePair::key);
	}
	else if (this.pair_[r].type == 1)
	{
		this.pair_[r].valueString = value;
	}
	else
	{
		pass("■フラグ無効[%s]Int値に対してString値を設定しました" % key);
	}
	if (this.isGlobalMode_)
	{
		共有セーブ();
	}
}

int GameFlagMap::getInt(string key)
{
	int r = this.find(key);
	if (r == -1)
	{
		return 0;
	}
	if (this.pair_[r].type == 1)
	{
		return this.pair_[r].valueString.Int();
	}
	return this.pair_[r].valueInt;
}

string GameFlagMap::getString(string key)
{
	int r = this.find(key);
	if (r == -1)
	{
		return "";
	}
	if (this.pair_[r].type == 0)
	{
		return "%d" % this.pair_[r].valueInt;
	}
	return this.pair_[r].valueString;
}

int GameFlagMap::find(string key)
{
	if (this.pair_.Empty())
	{
		return -1;
	}
	int h = this.pair_.Numof() - 1;
	int l;
	int c;
	while (l <= h)
	{
		c = (l + h) / 2;
		if (this.pair_[c].key == key)
		{
			return c;
		}
		else if (this.pair_[c].key < key)
		{
			l = c + 1;
		}
		else
		{
			h = c - 1;
		}
	}
	return -1;
}

void GameFlagMap::setGlobalMode(bool val)
{
	this.isGlobalMode_ = val;
}

void GameFlagMap::addValue(string key, int value)
{
	int n = this.getInt(key);
	this.setInt(key, n + value);
}

void GameFlagMap::getKeyList(ref array@string keys)
{
	keys.Free();
	int i;
	for (i = 0; i < this.pair_.Numof(); ++i)
	{
		keys.PushBack(this.pair_[i].key);
	}
}

