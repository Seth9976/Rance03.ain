void 制御／宝箱／セーブライオン()
{
	制御／アイテム設定("セーブライオン");
}

void 制御／宝箱／ラレラレ石Ａ()
{
	制御／アイテム設定("ラレラレ石1");
}

void 制御／宝箱／ラレラレ石Ｂ()
{
	制御／アイテム設定("ラレラレ石2");
}

void 制御／宝箱／カキン枠()
{
	制御／アイテム設定("カキン枠");
}

void 制御／宝箱／世色癌１()
{
	if (制御／アイテム確認("セーブライオン") != 0)
	{
		switch (RAND(6))
		{
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
			制御／アイテム設定("世色癌1");
			break;
		case 6:
			制御／アイテム設定("バラバラ時計");
			break;
		}
	}
	else
	{
		制御／アイテム設定("セーブライオン");
	}
}

void 制御／宝箱／世色癌２()
{
	制御／アイテム設定("世色癌2");
}

void 制御／宝箱／世色癌３()
{
	制御／アイテム設定("世色癌3");
}

void 制御／宝箱／世色癌４()
{
	制御／アイテム設定("世色癌4");
}

void 制御／宝箱／アサクヒロク１()
{
	制御／アイテム設定("アサクヒロク1");
}

void 制御／宝箱／アサクヒロク２()
{
	制御／アイテム設定("アサクヒロク2");
}

void 制御／宝箱／アサクヒロク３()
{
	制御／アイテム設定("アサクヒロク3");
}

void 制御／宝箱／マヨネーズ()
{
	制御／アイテム設定("マヨネーズ");
}

void 制御／宝箱／欠けスター()
{
	制御／アイテム設定("欠けスター");
}

void 制御／宝箱／バラバラ時計()
{
	制御／アイテム設定("バラバラ時計");
}

void 制御／宝箱／専属看護婦さん()
{
	制御／アイテム設定("専属看護婦さん");
}

void 制御／宝箱／ひいきの種・体()
{
	制御／アイテム設定("ひいきの種・体");
}

void 制御／宝箱／ひいきの種・筋()
{
	制御／アイテム設定("ひいきの種・筋");
}

void 制御／宝箱／ひいきの種・魔()
{
	制御／アイテム設定("ひいきの種・魔");
}

void 制御／宝箱／ひいきの種・技()
{
	制御／アイテム設定("ひいきの種・技");
}

void 制御／宝箱／ひいきの種()
{
	switch (RAND(4))
	{
	case 1:
		制御／宝箱／ひいきの種・体();
		break;
	case 2:
		制御／宝箱／ひいきの種・筋();
		break;
	case 3:
		制御／宝箱／ひいきの種・魔();
		break;
	case 4:
		制御／宝箱／ひいきの種・技();
		break;
	}
}

void 制御／宝箱／珍味１()
{
	制御／アイテム設定("珍味1");
}

void 制御／宝箱／珍味２()
{
	制御／アイテム設定("珍味2");
}

void 制御／宝箱／珍味３()
{
	制御／アイテム設定("珍味3");
}

void 制御／宝箱／珍味４()
{
	制御／アイテム設定("珍味4");
}

void 制御／宝箱／珍味５()
{
	制御／アイテム設定("珍味5");
}

void 制御／宝箱／珍味６()
{
	制御／アイテム設定("珍味6");
}

void 制御／宝箱／換金１()
{
	制御／アイテム設定("換金1");
}

void 制御／宝箱／換金２()
{
	制御／アイテム設定("換金2");
}

void 制御／宝箱／換金３()
{
	制御／アイテム設定("換金3");
}

void 制御／宝箱／換金４()
{
	制御／アイテム設定("換金4");
}

void 制御／宝箱／換金５()
{
	制御／アイテム設定("換金5");
}

void 制御／宝箱／換金６()
{
	制御／アイテム設定("換金6");
}

void 制御／宝箱／徳用魔池()
{
	制御／アイテム設定("徳用魔池");
}

void 制御／宝箱／女の子の秘蜜()
{
	制御／アイテム設定("女の子の秘蜜");
}

void 制御／宝箱／スカウトキー()
{
	制御／アイテム設定("スカウトキー");
}

void 制御／宝箱／カッパーマトック()
{
	制御／アイテム設定("カッパーマトック");
}

void 制御／宝箱／シルバーマトック()
{
	制御／アイテム設定("シルバーマトック");
}

void 制御／宝箱／ピッキングドリル()
{
	制御／アイテム設定("ピッキングドリル");
}

void 制御／宝箱／下水道管理者証()
{
	制御／アイテム設定("下水道管理者証");
}

void 制御／宝箱／食品衛生管理者証()
{
	制御／アイテム設定("食品衛生管理者証");
}

void 制御／宝箱／夏への鍵()
{
	制御／アイテム設定("夏への鍵");
}

void 制御／宝箱／最後だけの鍵()
{
	制御／アイテム設定("最後だけの鍵");
}

void 制御／宝箱／求人票()
{
	制御／アイテム設定("求人票");
}

void 制御／宝箱／倍油()
{
	制御／アイテム設定("倍油");
}

void 制御／宝箱／ボリュームつまみ()
{
	制御／アイテム設定("ボリュームつまみ");
}

void 制御／宝箱／ステンレス芯()
{
	制御／アイテム設定("ステンレス芯");
}

void 制御／宝箱／ヒララ鉱石()
{
	制御／アイテム設定("ヒララ鉱石");
}

void 制御／宝箱／プロローグ()
{
	制御／アイテム設定("世色癌1");
}

void 制御／宝箱／ハニービル()
{
	if (!EV("ＥＶ／ホッホ峡／ランス／入口／初回／成功", -2147483648))
	{
		制御／アイテム設定("ヒララ鉱石");
	}
	else
	{
		制御／アイテム設定("専属看護婦さん");
	}
}

void 制御／宝箱／ＴＯＷＥＲ／一層Ａ()
{
	switch (RAND(6))
	{
	case 1:
		制御／宝箱／マヨネーズ();
		break;
	case 2:
	case 3:
		制御／宝箱／ストラップ();
		break;
	default:
		制御／宝箱／換金１();
		break;
	}
}

void 制御／宝箱／ＴＯＷＥＲ／二層Ａ()
{
	switch (RAND(6))
	{
	case 1:
		制御／宝箱／バラバラ時計();
		break;
	case 2:
	case 3:
		制御／宝箱／ストラップ();
		break;
	default:
		制御／宝箱／換金２();
		break;
	}
}

void 制御／宝箱／ＴＯＷＥＲ／三層Ａ()
{
	switch (RAND(10))
	{
	case 1:
		制御／宝箱／マヨネーズ();
		break;
	case 2:
	case 3:
		制御／宝箱／ストラップ();
		break;
	default:
		制御／宝箱／換金３();
		break;
	}
}

void 制御／宝箱／ＴＯＷＥＲ／四層Ａ()
{
	switch (RAND(10))
	{
	case 1:
		制御／宝箱／バラバラ時計();
		break;
	case 2:
	case 3:
		制御／宝箱／ストラップ();
		break;
	default:
		制御／宝箱／換金４();
		break;
	}
}

void 制御／宝箱／ＴＯＷＥＲ／五層Ａ()
{
	switch (RAND(10))
	{
	case 1:
		制御／宝箱／マヨネーズ();
		break;
	case 2:
	case 3:
		制御／宝箱／ストラップ();
		break;
	default:
		制御／宝箱／換金５();
		break;
	}
}

void 制御／宝箱／ＴＯＷＥＲ／一層Ｂ()
{
	switch (RAND(10))
	{
	case 1:
		制御／宝箱／カッパーマトック();
		break;
	case 2:
	case 3:
		制御／宝箱／アサクヒロク１();
		break;
	case 4:
	case 5:
	case 6:
		制御／宝箱／ストラップ();
		break;
	default:
		制御／宝箱／世色癌１();
		break;
	}
}

void 制御／宝箱／ＴＯＷＥＲ／二層Ｂ()
{
	switch (RAND(10))
	{
	case 1:
		制御／宝箱／スカウトキー();
		break;
	case 2:
	case 3:
		制御／宝箱／アサクヒロク１();
		break;
	case 4:
	case 5:
	case 6:
		制御／宝箱／バトルスキル２();
		break;
	default:
		制御／宝箱／世色癌２();
		break;
	}
}

void 制御／宝箱／ＴＯＷＥＲ／三層Ｂ()
{
	switch (RAND(10))
	{
	case 1:
		制御／宝箱／ピッキングドリル();
		break;
	case 2:
	case 3:
		制御／宝箱／アサクヒロク２();
		break;
	case 4:
	case 5:
	case 6:
		制御／宝箱／バトルスキル３();
		break;
	default:
		制御／宝箱／世色癌１();
		break;
	}
}

void 制御／宝箱／ＴＯＷＥＲ／四層Ｂ()
{
	switch (RAND(10))
	{
	case 1:
		制御／宝箱／ピッキングドリル();
		break;
	case 2:
	case 3:
		制御／宝箱／アサクヒロク２();
		break;
	case 4:
	case 5:
	case 6:
		制御／宝箱／バトルスキル４();
		break;
	default:
		制御／宝箱／世色癌２();
		break;
	}
}

void 制御／宝箱／ＴＯＷＥＲ／五層Ｂ()
{
	switch (RAND(10))
	{
	case 1:
		制御／宝箱／シルバーマトック();
		break;
	case 2:
	case 3:
		制御／宝箱／アサクヒロク２();
		break;
	case 4:
	case 5:
	case 6:
		制御／宝箱／バトルスキル５();
		break;
	default:
		制御／宝箱／世色癌３();
		break;
	}
}

void 制御／宝箱／ＴＯＷＥＲ／一層Ｃ()
{
	if (制御／数値フラグ確認("TOWER一層宝箱") != 1)
	{
		制御／宝箱／バトルスキル６();
		制御／数値フラグ設定("TOWER一層宝箱", 1);
	}
	else
	{
		switch (制御／数値フラグ確認("TOWER一層乱数"))
		{
		case 1:
			制御／宝箱／バトルスキル６();
			break;
		case 2:
		case 3:
			制御／宝箱／ひいきの種();
			break;
		case 4:
		case 5:
		case 6:
			制御／宝箱／欠けスター();
			break;
		case 7:
		case 8:
		case 9:
		case 10:
			制御／宝箱／珍味６();
			break;
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			制御／宝箱／換金６();
			break;
		case 16:
		case 17:
		case 18:
		case 19:
		case 20:
		case 21:
			制御／宝箱／世色癌４();
			break;
		default:
			制御／宝箱／ストラップ();
			break;
		}
	}
}

void 制御／宝箱／ＴＯＷＥＲ／二層Ｃ()
{
	if (制御／数値フラグ確認("TOWER二層宝箱") != 1)
	{
		制御／宝箱／バトルスキル６();
		制御／数値フラグ設定("TOWER二層宝箱", 1);
	}
	else
	{
		switch (制御／数値フラグ確認("TOWER二層乱数"))
		{
		case 1:
			制御／宝箱／ストラップ();
			break;
		case 2:
		case 3:
			制御／宝箱／バトルスキル６();
			break;
		case 4:
		case 5:
		case 6:
			制御／宝箱／ひいきの種();
			break;
		case 7:
		case 8:
		case 9:
		case 10:
			制御／宝箱／欠けスター();
			break;
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			制御／宝箱／珍味６();
			break;
		case 16:
		case 17:
		case 18:
		case 19:
		case 20:
		case 21:
			制御／宝箱／換金６();
			break;
		default:
			制御／宝箱／世色癌４();
			break;
		}
	}
}

void 制御／宝箱／ＴＯＷＥＲ／三層Ｃ()
{
	if (制御／数値フラグ確認("TOWER三層宝箱") != 1)
	{
		制御／宝箱／バトルスキル６();
		制御／数値フラグ設定("TOWER三層宝箱", 1);
	}
	else
	{
		switch (制御／数値フラグ確認("TOWER三層乱数"))
		{
		case 1:
			制御／宝箱／ストラップ();
			break;
		case 2:
		case 3:
			制御／宝箱／世色癌４();
			break;
		case 4:
		case 5:
		case 6:
			制御／宝箱／バトルスキル６();
			break;
		case 7:
		case 8:
		case 9:
		case 10:
			制御／宝箱／ひいきの種();
			break;
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			制御／宝箱／欠けスター();
			break;
		case 16:
		case 17:
		case 18:
		case 19:
		case 20:
		case 21:
			制御／宝箱／珍味６();
			break;
		default:
			制御／宝箱／換金６();
			break;
		}
	}
}

void 制御／宝箱／ＴＯＷＥＲ／四層Ｃ()
{
	if (制御／数値フラグ確認("TOWER四層宝箱") != 1)
	{
		制御／宝箱／バトルスキル６();
		制御／数値フラグ設定("TOWER四層宝箱", 1);
	}
	else
	{
		switch (制御／数値フラグ確認("TOWER四層乱数"))
		{
		case 1:
			制御／宝箱／ストラップ();
			break;
		case 2:
		case 3:
			制御／宝箱／世色癌４();
			break;
		case 4:
		case 5:
		case 6:
			制御／宝箱／換金６();
			break;
		case 7:
		case 8:
		case 9:
		case 10:
			制御／宝箱／バトルスキル６();
			break;
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			制御／宝箱／ひいきの種();
			break;
		case 16:
		case 17:
		case 18:
		case 19:
		case 20:
		case 21:
			制御／宝箱／欠けスター();
			break;
		default:
			制御／宝箱／珍味６();
			break;
		}
	}
}

void 制御／宝箱／ＴＯＷＥＲ／五層Ｃ()
{
	if (制御／数値フラグ確認("TOWER一層宝箱") != 1)
	{
		制御／宝箱／バトルスキル６();
		制御／数値フラグ設定("TOWER一層宝箱", 1);
	}
	else
	{
		switch (制御／数値フラグ確認("TOWER五層乱数"))
		{
		case 1:
			制御／宝箱／ストラップ();
			break;
		case 2:
		case 3:
			制御／宝箱／世色癌４();
			break;
		case 4:
		case 5:
		case 6:
			制御／宝箱／換金６();
			break;
		case 7:
		case 8:
		case 9:
		case 10:
			制御／宝箱／珍味６();
			break;
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			制御／宝箱／バトルスキル６();
			break;
		case 16:
		case 17:
		case 18:
		case 19:
		case 20:
		case 21:
			制御／宝箱／ひいきの種();
			break;
		default:
			制御／宝箱／欠けスター();
			break;
		}
	}
}

void 制御／宝箱／ストラップ()
{
	switch (RAND(3))
	{
	case 1:
		制御／アイテム設定("守り神様ストラップ");
		break;
	case 2:
		制御／アイテム設定("丹下犬ストラップ");
		break;
	case 3:
		制御／アイテム設定("毎度ありストラップ");
		break;
	}
}

void 制御／宝箱／金０１()
{
	if (制御／アイテム確認("セーブライオン") != 0)
	{
		switch (RAND(6))
		{
		case 1:
		case 2:
		case 3:
			制御／宝箱／金(15, "");
			break;
		case 4:
		case 5:
			制御／アイテム設定("世色癌1");
			break;
		case 6:
			if (制御／レベル確認("ランス") < 12)
			{
				制御／宝箱／金(15, "");
			}
			else if (制御／アイテム確認("バラバラ時計") != 0)
			{
				switch (RAND(6))
				{
				case 1:
				case 2:
				case 3:
					制御／アイテム設定("バラバラ時計");
					break;
				case 4:
				case 5:
					制御／アイテム設定("セーブライオン");
					break;
				case 6:
					制御／アイテム設定("守り神様ストラップ");
					break;
				}
			}
			else
			{
				制御／アイテム設定("バラバラ時計");
			}
			break;
		}
	}
	else
	{
		制御／アイテム設定("セーブライオン");
	}
}

void 制御／宝箱／金０２()
{
	if (制御／アイテム確認("セーブライオン") != 0)
	{
		switch (RAND(6))
		{
		case 1:
		case 2:
		case 3:
			制御／宝箱／金(45, "換金1");
			break;
		case 4:
		case 5:
			制御／アイテム設定("セーブライオン");
			break;
		case 6:
			if (制御／レベル確認("ランス") < 12)
			{
				制御／宝箱／金(45, "換金1");
			}
			else if (制御／アイテム確認("バラバラ時計") != 0)
			{
				switch (RAND(6))
				{
				case 1:
				case 2:
				case 3:
					制御／アイテム設定("バラバラ時計");
					break;
				case 4:
				case 5:
					制御／アイテム設定("セーブライオン");
					break;
				case 6:
					制御／アイテム設定("丹下犬ストラップ");
					break;
				}
			}
			else
			{
				制御／アイテム設定("バラバラ時計");
			}
			break;
		}
	}
	else
	{
		制御／アイテム設定("セーブライオン");
	}
}

void 制御／宝箱／金０３()
{
	if (RAND(6) != 1)
	{
		制御／宝箱／金(135, "");
	}
	else
	{
		制御／アイテム設定("毎度ありストラップ");
	}
}

void 制御／宝箱／金０４()
{
	制御／宝箱／金(405, "");
}

void 制御／宝箱／金０５()
{
	if (RAND(6) != 1)
	{
		制御／宝箱／金(1215, "換金4");
	}
	else
	{
		制御／アイテム設定("毎度ありストラップ");
	}
}

void 制御／宝箱／金０６()
{
	制御／宝箱／金(3645, "");
}

void 制御／宝箱／金０７()
{
	制御／宝箱／金(10935, "換金5");
}

void 制御／宝箱／金０８()
{
	制御／宝箱／金(32805, "");
}

void 制御／宝箱／金０９()
{
	制御／宝箱／金(98415, "換金6");
}

void 制御／宝箱／金１０()
{
	制御／宝箱／金(295245, "");
}

void 制御／宝箱／金１１()
{
	制御／宝箱／金(295245, "");
}

void 制御／宝箱／金(int gold, string id)
{
	switch (RAND(10))
	{
	case 1:
	case 2:
	case 3:
		制御／所持金増減(gold);
		break;
	case 4:
		制御／所持金増減(gold * 0.6);
		break;
	case 5:
	case 6:
		制御／所持金増減(gold * 0.8);
		break;
	case 7:
	case 8:
		制御／所持金増減(gold * 1.2);
		break;
	case 9:
		制御／所持金増減(gold * 1.4);
		break;
	case 10:
		if (id != "")
		{
			制御／アイテム設定(id);
		}
		else
		{
			switch (RAND(2))
			{
			case 1:
				制御／所持金増減(gold * 0.2);
				break;
			case 2:
				制御／所持金増減(gold * 1.8);
				break;
			}
		}
		break;
	}
}

void 制御／宝箱／バトルスキル２()
{
	制御／宝箱／バトルスキル(1);
}

void 制御／宝箱／バトルスキル３()
{
	制御／宝箱／バトルスキル(2);
}

void 制御／宝箱／バトルスキル４()
{
	制御／宝箱／バトルスキル(3);
}

void 制御／宝箱／バトルスキル５()
{
	制御／宝箱／バトルスキル(4);
}

void 制御／宝箱／バトルスキル６()
{
	制御／宝箱／バトルスキル(5);
}

void 制御／宝箱／バトルスキル(int rank)
{
	string r = getSkillIdNextRankFromJoinedPlayer(rank);
	if (r != "")
	{
		if (r != "剣攻撃6" && getPlayerSkillFromId(r).getGroupId() != "砲撃")
		{
			string pId = getPlayerSkillFromId(r).getPlayerId();
			string old = getPlayerFromId(pId).upgradeSkill(r);
			int star = ++rank;
			string img = "システム／ダイアログ／写真／" + getPlayerFromId(pId).getShortName();
			DialogInfomation info;
			info.setCaption("★%d装備を発見！" % star);
			info.setMessage("%sのバトルスキル、|%sは、|%sにパワーアップ！" % getPlayerFromId(pId).getShortName() % getPlayerSkillFromId(old).getName() % getPlayerSkillFromId(r).getName());
			info.setPictureImageName(img);
			openDialog(info);
			getPlayerFromId(pId).upgradeSkill(r);
			return;
		}
	}
	switch (rank)
	{
	case 1:
		制御／宝箱／換金４();
		break;
	case 2:
		制御／宝箱／徳用魔池();
		break;
	case 3:
		制御／宝箱／換金５();
		break;
	case 4:
		制御／宝箱／換金６();
		break;
	case 5:
		制御／宝箱／専属看護婦さん();
		break;
	}
}

void 制御／宝箱／地図／リスの洞窟１Ｆ()
{
	制御／宝箱／地図("リスの洞窟1F");
}

void 制御／宝箱／地図／リスの洞窟Ｂ１Ｆ()
{
	制御／宝箱／地図("リスの洞窟B1F");
}

void 制御／宝箱／地図／リスの洞窟Ｂ２Ｆ()
{
	制御／宝箱／地図("リスの洞窟B2F");
}

void 制御／宝箱／地図／悪魔回廊西部()
{
	制御／宝箱／地図("悪魔回廊西部");
}

void 制御／宝箱／地図／悪魔回廊中部()
{
	制御／宝箱／地図("悪魔回廊中部");
}

void 制御／宝箱／地図／悪魔回廊東部()
{
	制御／宝箱／地図("悪魔回廊東部");
}

void 制御／宝箱／地図／地上灯台最下層()
{
	制御／宝箱／地図("地上灯台最下層");
}

void 制御／宝箱／地図／地上灯台大螺旋()
{
	制御／宝箱／地図("地上灯台大螺旋");
}

void 制御／宝箱／地図／烈火鉱山Ａ層()
{
	制御／宝箱／地図("烈火鉱山A層");
}

void 制御／宝箱／地図／烈火鉱山Ｂ層()
{
	制御／宝箱／地図("烈火鉱山B層");
}

void 制御／宝箱／地図／烈火鉱山Ｃ層()
{
	制御／宝箱／地図("烈火鉱山C層");
}

void 制御／宝箱／地図／烈火鉱山Ｄ層()
{
	制御／宝箱／地図("烈火鉱山D層");
}

void 制御／宝箱／地図／レッド()
{
	制御／宝箱／地図("レッド");
}

void 制御／宝箱／地図／ハイパービル１Ｆ()
{
	制御／宝箱／地図("ハイパービル1F");
}

void 制御／宝箱／地図／ハイパービル２Ｆ()
{
	制御／宝箱／地図("ハイパービル2F");
}

void 制御／宝箱／地図／ハイパービル３Ｆ()
{
	制御／宝箱／地図("ハイパービル3F");
}

void 制御／宝箱／地図／ハイパービル４Ｆ()
{
	制御／宝箱／地図("ハイパービル4F");
}

void 制御／宝箱／地図／ハイパービル５Ｆ()
{
	制御／宝箱／地図("ハイパービル5F");
}

void 制御／宝箱／地図／ハイパービル１９８Ｆ()
{
	制御／宝箱／地図("ハイパービル198F");
}

void 制御／宝箱／地図／ハイパービル１９９Ｆ()
{
	制御／宝箱／地図("ハイパービル199F");
}

void 制御／宝箱／地図／ジオ()
{
	制御／宝箱／地図("ジオ");
}

void 制御／宝箱／地図／ホッホ峡()
{
	制御／宝箱／地図("ホッホ峡");
}

void 制御／宝箱／地図／パッキャマラード・デン()
{
	制御／宝箱／地図("パッキャマラード・デン");
}

void 制御／宝箱／地図／ハニービル１Ｆ()
{
	制御／宝箱／地図("ハニービル1F");
}

void 制御／宝箱／地図／ハニービル２Ｆ()
{
	制御／宝箱／地図("ハニービル2F");
}

void 制御／宝箱／地図／ハニービル５Ｆ()
{
	制御／宝箱／地図("ハニービル5F");
}

void 制御／宝箱／地図／下水道()
{
	制御／宝箱／地図("下水道");
}

void 制御／宝箱／地図／牢獄()
{
	制御／宝箱／地図("牢獄");
}

void 制御／宝箱／地図／居館Ｂ１Ｆ()
{
	制御／宝箱／地図("居館B1F");
}

void 制御／宝箱／地図／東の塔１Ｆ()
{
	制御／宝箱／地図("東の塔1F");
}

void 制御／宝箱／地図／東の塔２Ｆ()
{
	制御／宝箱／地図("東の塔2F");
}

void 制御／宝箱／地図／東の塔３Ｆ()
{
	制御／宝箱／地図("東の塔3F");
}

void 制御／宝箱／地図／西の塔１Ｆ()
{
	制御／宝箱／地図("西の塔1F");
}

void 制御／宝箱／地図／西の塔２Ｆ()
{
	制御／宝箱／地図("西の塔2F");
}

void 制御／宝箱／地図／西の塔３Ｆ()
{
	制御／宝箱／地図("西の塔3F");
}

void 制御／宝箱／地図／中庭Ａ区画()
{
	制御／宝箱／地図("中庭A区画");
}

void 制御／宝箱／地図／中庭Ｂ区画()
{
	制御／宝箱／地図("中庭B区画");
}

void 制御／宝箱／地図／中庭Ｃ区画()
{
	制御／宝箱／地図("中庭C区画");
}

void 制御／宝箱／地図／居館２Ｆ()
{
	制御／宝箱／地図("居館2F");
}

void 制御／宝箱／地図／コー()
{
	制御／宝箱／地図("コー");
}

void 制御／宝箱／地図(string id)
{
	getDungeonFromId(id).setShowMinimap(true);
	DialogInfomation info;
	info.setCaption("周囲の地図を発見！");
	info.setMessage("行く手が把握しやすくなった！");
	info.setPictureImageName("システム／ダイアログ／写真／地図");
	openDialog(info);
}

void 制御／宝箱／ハッスル()
{
	DialogInfomation info;
	info.setCaption("ハッスルを発見！");
	info.setMessage("誰かが戦闘不能になると、|控えの誰かが戦闘参加する源、|最大ハッスルが1増えた！");
	info.setPictureImageName("システム／ダイアログ／写真／回復");
	openDialog(info);
	int beforeHelper;
	int afterHelper;
	beforeHelper = g_playerCommonParam.getMaxHelperCount();
	afterHelper = g_playerCommonParam.getMaxHelperCount() + 1;
	g_playerCommonParam.setMaxHelperCount(afterHelper);
}

void 制御／宝箱／鏡の破片()
{
	if (isCompleteMirrorPiece())
	{
		制御／アイテム設定("欠けスター");
	}
	else
	{
		DialogInfomation info;
		info.setCaption("鏡の破片を発見！");
		info.setMessage("美しいイメージが封じられている|全ての破片を集めると、|完璧なものを閲覧できる");
		info.setItemId("鏡の破片");
		openDialog(info);
		openMirrorPiece();
	}
}

