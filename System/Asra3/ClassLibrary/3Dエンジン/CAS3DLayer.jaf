CAS3DLayer::CAS3DLayer()
{
}

CAS3DLayer::~CAS3DLayer()
{
	this.Release();
}

bool CAS3DLayer::Create()
{
	this.Release();
	this.m_3DLayerParts.Create();
	if (!this.m_3DLayerParts.Create3DLayerPluginID(1))
	{
		system.Error("プラグインの作成に失敗しました");
		return false;
	}
	PARTS_SetWantSaveBackScene(this.m_3DLayerParts.GetPartsNumber(), false);
	CAS3DSetting Setting;
	Setting.Load();
	this.SetRenderMode(Setting.GetRenderMode());
	this.SetDrawOption(1, Setting.GetLightingMode());
	this.SetOptionAntiAliasing(Setting.GetAntiAliasingMode());
	this.SetShadowMode(Setting.GetShadowMode());
	this.SetShadowMapResolutionLevel(Setting.GetShadowMapResolutionLevel());
	this.SetBloomMode(Setting.GetBloomMode());
	this.SetGlareMode(Setting.GetGlareMode());
	this.SetFogMode(Setting.GetFogMode());
	this.SetSpecularMode(Setting.GetSpecularMode());
	this.SetLightMapMode(Setting.GetLightMapMode());
	this.SetSoftFogEdgeMode(Setting.GetSoftFogEdgeMode());
	this.SetSSAOMode(Setting.GetSSAOMode());
	this.SetBumpMode(Setting.GetBumpMode());
	this.SetTextureResolutionLevel(Setting.GetTextureResolutionLevel());
	this.SetTextureFilterMode(Setting.GetTextureFilterMode());
	this.SetDrawOption(0, Setting.GetEdge());
	this.SetDrawOption(2, Setting.GetDOFMode());
	this.SetShadowMapType(0);
	this.SetShadowMapLightDir(0.0, -1.0, 0.0);
	this.SetShadowBias(0, 0.01);
	this.SetUseLightScattering(true);
	return true;
}

void CAS3DLayer::Release()
{
	this.m_3DLayerParts.Release();
}

int CAS3DLayer::GetPluginNumber()
{
	return this.m_3DLayerParts.Get3DLayerPluginID(1);
}

bool CAS3DLayer::SetZ(int Z)
{
	this.m_3DLayerParts.SetZ(Z);
	return true;
}

int CAS3DLayer::CreateInstance()
{
	int nInstance = SealEngine.CreateInstance(this.m_3DLayerParts.Get3DLayerPluginID(1));
	if (nInstance == -1)
	{
		system.Error("インスタンスの作成に失敗しました");
	}
	return nInstance;
}

bool CAS3DLayer::ReleaseInstance(int nInstance)
{
	if (!SealEngine.ReleaseInstance(this.m_3DLayerParts.Get3DLayerPluginID(1), nInstance))
	{
		system.Error("インスタンスの解放に失敗しました");
		return false;
	}
	return true;
}

void CAS3DLayer::SetCameraPos(float fX, float fY, float fZ)
{
	if (!SealEngine.SetCameraPos(this.m_3DLayerParts.Get3DLayerPluginID(1), fX, fY, fZ))
	{
		system.Error("カメラ位置の設定に失敗しました");
	}
}

void CAS3DLayer::SetCameraAngle(float fAngle)
{
	if (!SealEngine.SetCameraAngle(this.m_3DLayerParts.Get3DLayerPluginID(1), fAngle))
	{
		system.Error("カメラ角度の設定に失敗しました");
	}
}

void CAS3DLayer::SetCameraAngleP(float fAngleP)
{
	if (!SealEngine.SetCameraAngleP(this.m_3DLayerParts.Get3DLayerPluginID(1), fAngleP))
	{
		system.Error("カメラ角度の設定に失敗しました");
	}
}

void CAS3DLayer::SetCameraAngleB(float fAngleB)
{
	if (!SealEngine.SetCameraAngleB(this.m_3DLayerParts.Get3DLayerPluginID(1), fAngleB))
	{
		system.Error("カメラ角度の設定に失敗しました");
	}
}

bool CAS3DLayer::GetCameraPos(ref float X, ref float Y, ref float Z)
{
	return SealEngine.GetCameraPos(this.m_3DLayerParts.Get3DLayerPluginID(1), X, Y, Z);
}

bool CAS3DLayer::GetCameraAngle(ref float Angle)
{
	return SealEngine.GetCameraAngle(this.m_3DLayerParts.Get3DLayerPluginID(1), Angle);
}

bool CAS3DLayer::GetCameraAngleP(ref float AngleP)
{
	return SealEngine.GetCameraAngleP(this.m_3DLayerParts.Get3DLayerPluginID(1), AngleP);
}

bool CAS3DLayer::GetCameraAngleB(ref float AngleB)
{
	return SealEngine.GetCameraAngleB(this.m_3DLayerParts.Get3DLayerPluginID(1), AngleB);
}

bool CAS3DLayer::GetCameraXVector(ref float X, ref float Y, ref float Z)
{
	return SealEngine.GetCameraXVector(this.m_3DLayerParts.Get3DLayerPluginID(1), X, Y, Z);
}

bool CAS3DLayer::GetCameraYVector(ref float X, ref float Y, ref float Z)
{
	return SealEngine.GetCameraYVector(this.m_3DLayerParts.Get3DLayerPluginID(1), X, Y, Z);
}

bool CAS3DLayer::GetCameraZVector(ref float X, ref float Y, ref float Z)
{
	return SealEngine.GetCameraZVector(this.m_3DLayerParts.Get3DLayerPluginID(1), X, Y, Z);
}

bool CAS3DLayer::SetDrawDOF(bool DrawDOF)
{
	return SealEngine.SetDrawDOF(this.m_3DLayerParts.Get3DLayerPluginID(1), DrawDOF);
}

bool CAS3DLayer::SetDOF_L(float DOF_L)
{
	return SealEngine.SetDOF_L(this.m_3DLayerParts.Get3DLayerPluginID(1), DOF_L);
}

bool CAS3DLayer::SetDOF_F(float DOF_F)
{
	return SealEngine.SetDOF_F(this.m_3DLayerParts.Get3DLayerPluginID(1), DOF_F);
}

bool CAS3DLayer::SetDOF_f(float DOF_f)
{
	return SealEngine.SetDOF_f(this.m_3DLayerParts.Get3DLayerPluginID(1), DOF_f);
}

bool CAS3DLayer::IsDrawDOF()
{
	bool DrawDOF = false;
	if (!SealEngine.GetDrawDOF(this.m_3DLayerParts.Get3DLayerPluginID(1), DrawDOF))
	{
		return false;
	}
	return DrawDOF;
}

float CAS3DLayer::GetDOF_L()
{
	float DOF_L;
	if (!SealEngine.GetDOF_L(this.m_3DLayerParts.Get3DLayerPluginID(1), DOF_L))
	{
		return 0.0;
	}
	return DOF_L;
}

float CAS3DLayer::GetDOF_F()
{
	float DOF_F;
	if (!SealEngine.GetDOF_F(this.m_3DLayerParts.Get3DLayerPluginID(1), DOF_F))
	{
		return 0.0;
	}
	return DOF_F;
}

float CAS3DLayer::GetDOF_f()
{
	float DOF_f;
	if (!SealEngine.GetDOF_f(this.m_3DLayerParts.Get3DLayerPluginID(1), DOF_f))
	{
		return 0.0;
	}
	return DOF_f;
}

bool CAS3DLayer::SetShadowLightVector(float X, float Y, float Z)
{
	return SealEngine.SetShadowLightVector(this.m_3DLayerParts.Get3DLayerPluginID(1), X, Y, Z);
}

float CAS3DLayer::GetShadowLightVectorX()
{
	float X;
	float Y;
	float Z;
	if (!SealEngine.GetShadowLightVector(this.m_3DLayerParts.Get3DLayerPluginID(1), X, Y, Z))
	{
		return 0.0;
	}
	return X;
}

float CAS3DLayer::GetShadowLightVectorY()
{
	float X;
	float Y;
	float Z;
	if (!SealEngine.GetShadowLightVector(this.m_3DLayerParts.Get3DLayerPluginID(1), X, Y, Z))
	{
		return 0.0;
	}
	return Y;
}

float CAS3DLayer::GetShadowLightVectorZ()
{
	float X;
	float Y;
	float Z;
	if (!SealEngine.GetShadowLightVector(this.m_3DLayerParts.Get3DLayerPluginID(1), X, Y, Z))
	{
		return 0.0;
	}
	return Z;
}

bool CAS3DLayer::SetShadowRate(float Rate)
{
	return SealEngine.SetShadowRate(this.m_3DLayerParts.Get3DLayerPluginID(1), Rate);
}

float CAS3DLayer::GetShadowRate()
{
	return SealEngine.GetShadowRate(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

float CAS3DLayer::GetShadowBias(int nNum)
{
	return SealEngine.GetShadowBias(this.m_3DLayerParts.Get3DLayerPluginID(1), nNum);
}

float CAS3DLayer::GetShadowTargetDistance(int nNum)
{
	return SealEngine.GetShadowTargetDistance(this.m_3DLayerParts.Get3DLayerPluginID(1), nNum);
}

bool CAS3DLayer::SetShadowMapType(int nType)
{
	if (!SealEngine.SetShadowMapType(this.m_3DLayerParts.Get3DLayerPluginID(1), nType))
	{
		return false;
	}
	return true;
}

bool CAS3DLayer::SetShadowMapLightLookPos(float fX, float fY, float fZ)
{
	if (!SealEngine.SetShadowMapLightLookPos(this.m_3DLayerParts.Get3DLayerPluginID(1), fX, fY, fZ))
	{
		system.Error("シャドウマップライト位置の設定に失敗しました");
		return false;
	}
	return true;
}

bool CAS3DLayer::SetShadowMapLightDir(float fX, float fY, float fZ)
{
	if (!SealEngine.SetShadowMapLightDir(this.m_3DLayerParts.Get3DLayerPluginID(1), fX, fY, fZ))
	{
		system.Error("シャドウマップライト方向の設定に失敗しました");
		return false;
	}
	return true;
}

bool CAS3DLayer::SetShadowBox(float fX, float fY, float fZ, float fSizeX, float fSizeY, float fSizeZ)
{
	if (!SealEngine.SetShadowBox(this.m_3DLayerParts.Get3DLayerPluginID(1), fX, fY, fZ, fSizeX, fSizeY, fSizeZ))
	{
		return false;
	}
	return true;
}

bool CAS3DLayer::SetShadowBias(int nNum, float fShadowBias)
{
	if (!SealEngine.SetShadowBias(this.m_3DLayerParts.Get3DLayerPluginID(1), nNum, fShadowBias))
	{
		system.Error("シャドウマップのバイアスの設定に失敗しました");
		return false;
	}
	return true;
}

bool CAS3DLayer::SetShadowSlopeBias(float fShadowSlopeBias)
{
	if (!SealEngine.SetShadowSlopeBias(this.m_3DLayerParts.Get3DLayerPluginID(1), fShadowSlopeBias))
	{
		system.Error("シャドウマップのスロープバイアスの設定に失敗しました");
		return false;
	}
	return true;
}

bool CAS3DLayer::SetShadowFilterMag(float fShadowFilterMag)
{
	if (!SealEngine.SetShadowFilterMag(this.m_3DLayerParts.Get3DLayerPluginID(1), fShadowFilterMag))
	{
		system.Error("シャドウマップのフィルター倍率の設定に失敗しました");
		return false;
	}
	return true;
}

bool CAS3DLayer::SetShadowTargetDistance(int nNum, float fDistance)
{
	if (!SealEngine.SetShadowTargetDistance(this.m_3DLayerParts.Get3DLayerPluginID(1), nNum, fDistance))
	{
		return false;
	}
	return true;
}

bool CAS3DLayer::SetShadowMapResolutionLevel(int nLevel)
{
	if (!SealEngine.SetShadowMapResolutionLevel(this.m_3DLayerParts.Get3DLayerPluginID(1), nLevel))
	{
		return false;
	}
	return true;
}

int CAS3DLayer::GetShadowMapResolutionLevel()
{
	return SealEngine.GetShadowMapResolutionLevel(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

float CAS3DLayer::GetShadowSplitDepth(int nNum)
{
	return SealEngine.GetShadowSplitDepth(this.m_3DLayerParts.Get3DLayerPluginID(1), nNum);
}

bool CAS3DLayer::SetShadowSplitDepth(int nNum, float fDepth)
{
	return SealEngine.SetShadowSplitDepth(this.m_3DLayerParts.Get3DLayerPluginID(1), nNum, fDepth);
}

bool CAS3DLayer::SetFogNear(float fNear)
{
	if (!SealEngine.SetFogNear(this.m_3DLayerParts.Get3DLayerPluginID(1), fNear))
	{
		return false;
	}
	return true;
}

bool CAS3DLayer::SetFogFar(float fFar)
{
	if (!SealEngine.SetFogFar(this.m_3DLayerParts.Get3DLayerPluginID(1), fFar))
	{
		return false;
	}
	return true;
}

bool CAS3DLayer::SetFogColor(float fR, float fG, float fB)
{
	if (!SealEngine.SetFogColor(this.m_3DLayerParts.Get3DLayerPluginID(1), fR, fG, fB))
	{
		return false;
	}
	return true;
}

int CAS3DLayer::GetFogType()
{
	return SealEngine.GetFogType(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

float CAS3DLayer::GetFogNear()
{
	return SealEngine.GetFogNear(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

float CAS3DLayer::GetFogFar()
{
	return SealEngine.GetFogFar(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

void CAS3DLayer::GetFogColor(ref float pfR, ref float pfG, ref float pfB)
{
	SealEngine.GetFogColor(this.m_3DLayerParts.Get3DLayerPluginID(1), pfR, pfG, pfB);
}

bool CAS3DLayer::SetSoftFogEdgeLength(float SoftFogEdgeLength)
{
	return SealEngine.SetSoftFogEdgeLength(this.m_3DLayerParts.Get3DLayerPluginID(1), SoftFogEdgeLength);
}

float CAS3DLayer::GetSoftFogEdgeLength()
{
	return SealEngine.GetSoftFogEdgeLength(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

bool CAS3DLayer::SetEdgeLength(float EdgeLength)
{
	return SealEngine.SetEdgeLength(this.m_3DLayerParts.Get3DLayerPluginID(1), EdgeLength);
}

float CAS3DLayer::GetEdgeLength()
{
	return SealEngine.GetEdgeLength(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

bool CAS3DLayer::SetEdgeReductionRate(float EdgeReductionRate)
{
	return SealEngine.SetEdgeReductionRate(this.m_3DLayerParts.Get3DLayerPluginID(1), EdgeReductionRate);
}

float CAS3DLayer::GetEdgeReductionRate()
{
	return SealEngine.GetEdgeReductionRate(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

bool CAS3DLayer::SetEdgeColor(float ColorR, float ColorG, float ColorB)
{
	return SealEngine.SetEdgeColor(this.m_3DLayerParts.Get3DLayerPluginID(1), ColorR, ColorG, ColorB);
}

bool CAS3DLayer::GetEdgeColor(ref float ColorR, ref float ColorG, ref float ColorB)
{
	return SealEngine.GetEdgeColor(this.m_3DLayerParts.Get3DLayerPluginID(1), ColorR, ColorG, ColorB);
}

bool CAS3DLayer::SetDrawTextureFog(bool bDraw)
{
	if (!SealEngine.SetDrawTextureFog(this.m_3DLayerParts.Get3DLayerPluginID(1), bDraw))
	{
		return false;
	}
	return true;
}

bool CAS3DLayer::GetDrawTextureFog()
{
	return SealEngine.GetDrawTextureFog(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

bool CAS3DLayer::SetOptionAntiAliasing(int nFlag)
{
	if (!SystemService.SetAntiAliasingMode(nFlag))
	{
		system.Error("アンチエイリアシング設定に失敗しました");
		return false;
	}
	return true;
}

bool CAS3DLayer::SetViewport(int nX, int nY, int nWidth, int nHeight)
{
	if (!SealEngine.SetViewport(this.m_3DLayerParts.Get3DLayerPluginID(1), nX, nY, nWidth, nHeight))
	{
		system.Error("ビューポートの設定に失敗しました");
		return false;
	}
	return true;
}

bool CAS3DLayer::SetProjection(float fWidth, float fHeight, float fNear, float fFar, float fDeg)
{
	if (!SealEngine.SetProjection(this.m_3DLayerParts.Get3DLayerPluginID(1), fWidth, fHeight, fNear, fFar, fDeg))
	{
		system.Error("プロジェクションの設定に失敗しました");
		return false;
	}
	return true;
}

bool CAS3DLayer::SetParallelProjection(float Width, float Height, float Near, float Far, float Mag)
{
	float Degree = -Mag;
	if (!SealEngine.SetProjection(this.m_3DLayerParts.Get3DLayerPluginID(1), Width, Height, Near, Far, Degree))
	{
		return false;
	}
	return true;
}

float CAS3DLayer::GetBrightness()
{
	return SealEngine.GetBrightness(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

void CAS3DLayer::SetBrightness(float fBrightness)
{
	if (!SealEngine.SetBrightness(this.m_3DLayerParts.Get3DLayerPluginID(1), fBrightness))
	{
		system.Error("輝度設定に失敗しました");
	}
}

int CAS3DLayer::GetShaderDebugMode()
{
	return SealEngine.GetShaderDebugMode(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

bool CAS3DLayer::SetDebugMode(int DebugModeType, int Mode)
{
	return SealEngine.SetDebugMode(this.m_3DLayerParts.Get3DLayerPluginID(1), DebugModeType, Mode);
}

int CAS3DLayer::GetDebugMode(int DebugModeType)
{
	return SealEngine.GetDebugMode(this.m_3DLayerParts.Get3DLayerPluginID(1), DebugModeType);
}

int CAS3DLayer::GetTextureFilterMode()
{
	return SealEngine.GetTextureFilterMode(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

bool CAS3DLayer::SetRenderMode(int nMode)
{
	if (!SealEngine.SetRenderMode(this.m_3DLayerParts.Get3DLayerPluginID(1), nMode))
	{
		system.Error("レンダーモードの設定に失敗しました");
	}
	return true;
}

bool CAS3DLayer::SetDrawOption(int DrawOption, int Param)
{
	return SealEngine.SetDrawOption(this.m_3DLayerParts.Get3DLayerPluginID(1), DrawOption, Param);
}

int CAS3DLayer::GetDrawOption(int DrawOption)
{
	return SealEngine.GetDrawOption(this.m_3DLayerParts.Get3DLayerPluginID(1), DrawOption);
}

bool CAS3DLayer::SetShadowMode(int nMode)
{
	if (!SealEngine.SetShadowMode(this.m_3DLayerParts.Get3DLayerPluginID(1), nMode))
	{
		system.Error("シャドウモードの設定に失敗しました");
	}
	return true;
}

bool CAS3DLayer::SetBumpMode(int nMode)
{
	if (!SealEngine.SetBumpMode(this.m_3DLayerParts.Get3DLayerPluginID(1), nMode))
	{
		system.Error("バンプマッピングモードの設定に失敗しました");
	}
	return true;
}

bool CAS3DLayer::SetFogMode(int nMode)
{
	return SealEngine.SetFogMode(this.m_3DLayerParts.Get3DLayerPluginID(1), nMode);
}

bool CAS3DLayer::SetSpecularMode(int nMode)
{
	return SealEngine.SetSpecularMode(this.m_3DLayerParts.Get3DLayerPluginID(1), nMode);
}

bool CAS3DLayer::SetLightMapMode(int nMode)
{
	return SealEngine.SetLightMapMode(this.m_3DLayerParts.Get3DLayerPluginID(1), nMode);
}

bool CAS3DLayer::SetSoftFogEdgeMode(int nMode)
{
	return SealEngine.SetSoftFogEdgeMode(this.m_3DLayerParts.Get3DLayerPluginID(1), nMode);
}

bool CAS3DLayer::SetSSAOMode(int nMode)
{
	return SealEngine.SetSSAOMode(this.m_3DLayerParts.Get3DLayerPluginID(1), nMode);
}

bool CAS3DLayer::SetShaderDebugMode(int nMode)
{
	return SealEngine.SetShaderDebugMode(this.m_3DLayerParts.Get3DLayerPluginID(1), nMode);
}

int CAS3DLayer::GetTextureResolutionLevel()
{
	return SealEngine.GetTextureResolutionLevel(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

bool CAS3DLayer::SetTextureResolutionLevel(int nLevel)
{
	if (!SealEngine.SetTextureResolutionLevel(this.m_3DLayerParts.Get3DLayerPluginID(1), nLevel))
	{
		return false;
	}
	return true;
}

bool CAS3DLayer::SetTextureFilterMode(int nMode)
{
	if (!SealEngine.SetTextureFilterMode(this.m_3DLayerParts.Get3DLayerPluginID(1), nMode))
	{
		system.Error("テクスチャフィルタモードの設定に失敗しました");
	}
	return true;
}

int CAS3DLayer::GetRenderMode()
{
	return SealEngine.GetRenderMode(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

int CAS3DLayer::GetShadowMode()
{
	return SealEngine.GetShadowMode(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

int CAS3DLayer::GetBumpMode()
{
	return SealEngine.GetBumpMode(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

int CAS3DLayer::GetFogMode()
{
	return SealEngine.GetFogMode(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

int CAS3DLayer::GetSpecularMode()
{
	return SealEngine.GetSpecularMode(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

int CAS3DLayer::GetLightMapMode()
{
	return SealEngine.GetLightMapMode(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

int CAS3DLayer::GetSoftFogEdgeMode()
{
	return SealEngine.GetSoftFogEdgeMode(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

int CAS3DLayer::GetSSAOMode()
{
	return SealEngine.GetSSAOMode(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

bool CAS3DLayer::GetUsePower2Texture()
{
	return SealEngine.GetUsePower2Texture(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

bool CAS3DLayer::SetUsePower2Texture(bool bUse)
{
	return SealEngine.SetUsePower2Texture(this.m_3DLayerParts.Get3DLayerPluginID(1), bUse);
}

bool CAS3DLayer::GetGlobalAmbient(ref float fR, ref float fG, ref float fB)
{
	if (!SealEngine.GetGlobalAmbient(this.m_3DLayerParts.Get3DLayerPluginID(1), fR, fG, fB))
	{
		return false;
	}
	return true;
}

bool CAS3DLayer::SetGlobalAmbient(float fR, float fG, float fB)
{
	if (!SealEngine.SetGlobalAmbient(this.m_3DLayerParts.Get3DLayerPluginID(1), fR, fG, fB))
	{
		return false;
	}
	return true;
}

int CAS3DLayer::GetBloomMode()
{
	return SealEngine.GetBloomMode(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

bool CAS3DLayer::SetBloomMode(int nMode)
{
	return SealEngine.SetBloomMode(this.m_3DLayerParts.Get3DLayerPluginID(1), nMode);
}

int CAS3DLayer::GetGlareMode()
{
	return SealEngine.GetGlareMode(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

bool CAS3DLayer::SetGlareMode(int nMode)
{
	return SealEngine.SetGlareMode(this.m_3DLayerParts.Get3DLayerPluginID(1), nMode);
}

float CAS3DLayer::GetPostEffectFilterY()
{
	return SealEngine.GetPostEffectFilterY(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

float CAS3DLayer::GetPostEffectFilterCb()
{
	return SealEngine.GetPostEffectFilterCb(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

float CAS3DLayer::GetPostEffectFilterCr()
{
	return SealEngine.GetPostEffectFilterCr(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

bool CAS3DLayer::SetPostEffectFilterY(float fY)
{
	return SealEngine.SetPostEffectFilterY(this.m_3DLayerParts.Get3DLayerPluginID(1), fY);
}

bool CAS3DLayer::SetPostEffectFilterCb(float fCb)
{
	return SealEngine.SetPostEffectFilterCb(this.m_3DLayerParts.Get3DLayerPluginID(1), fCb);
}

bool CAS3DLayer::SetPostEffectFilterCr(float fCr)
{
	return SealEngine.SetPostEffectFilterCr(this.m_3DLayerParts.Get3DLayerPluginID(1), fCr);
}

bool CAS3DLayer::GetBackCGName(int nNum, ref string pICGName)
{
	return SealEngine.GetBackCGName(this.m_3DLayerParts.Get3DLayerPluginID(1), nNum, pICGName);
}

int CAS3DLayer::GetBackCGNum(int nNum)
{
	return SealEngine.GetBackCGNum(this.m_3DLayerParts.Get3DLayerPluginID(1), nNum);
}

float CAS3DLayer::GetBackCGBlendRate(int nNum)
{
	return SealEngine.GetBackCGBlendRate(this.m_3DLayerParts.Get3DLayerPluginID(1), nNum);
}

float CAS3DLayer::GetBackCGDestPosX(int nNum)
{
	return SealEngine.GetBackCGDestPosX(this.m_3DLayerParts.Get3DLayerPluginID(1), nNum);
}

float CAS3DLayer::GetBackCGDestPosY(int nNum)
{
	return SealEngine.GetBackCGDestPosY(this.m_3DLayerParts.Get3DLayerPluginID(1), nNum);
}

float CAS3DLayer::GetBackCGMag(int nNum)
{
	return SealEngine.GetBackCGMag(this.m_3DLayerParts.Get3DLayerPluginID(1), nNum);
}

float CAS3DLayer::GetBackCGQuakeMag(int nNum)
{
	return SealEngine.GetBackCGQuakeMag(this.m_3DLayerParts.Get3DLayerPluginID(1), nNum);
}

bool CAS3DLayer::GetBackCGShow(int nNum)
{
	return SealEngine.GetBackCGShow(this.m_3DLayerParts.Get3DLayerPluginID(1), nNum);
}

bool CAS3DLayer::SetBackCGName(int nNum, string pICGName)
{
	return SealEngine.SetBackCGName(this.m_3DLayerParts.Get3DLayerPluginID(1), nNum, pICGName);
}

bool CAS3DLayer::SetBackCGNum(int nNum, int nCGNum)
{
	return SealEngine.SetBackCGNum(this.m_3DLayerParts.Get3DLayerPluginID(1), nNum, nCGNum);
}

bool CAS3DLayer::SetBackCGBlendRate(int nNum, float fBlendRate)
{
	return SealEngine.SetBackCGBlendRate(this.m_3DLayerParts.Get3DLayerPluginID(1), nNum, fBlendRate);
}

bool CAS3DLayer::SetBackCGDestPos(int nNum, float fX, float fY)
{
	return SealEngine.SetBackCGDestPos(this.m_3DLayerParts.Get3DLayerPluginID(1), nNum, fX, fY);
}

bool CAS3DLayer::SetBackCGMag(int nNum, float fMag)
{
	return SealEngine.SetBackCGMag(this.m_3DLayerParts.Get3DLayerPluginID(1), nNum, fMag);
}

bool CAS3DLayer::SetBackCGQuakeMag(int nNum, float fQuakeMag)
{
	return SealEngine.SetBackCGQuakeMag(this.m_3DLayerParts.Get3DLayerPluginID(1), nNum, fQuakeMag);
}

bool CAS3DLayer::SetBackCGShow(int nNum, bool bShow)
{
	return SealEngine.SetBackCGShow(this.m_3DLayerParts.Get3DLayerPluginID(1), nNum, bShow);
}

float CAS3DLayer::GetGlareBrightnessParam(int nIndex)
{
	return SealEngine.GetGlareBrightnessParam(this.m_3DLayerParts.Get3DLayerPluginID(1), nIndex);
}

bool CAS3DLayer::SetGlareBrightnessParam(int nIndex, float fParam)
{
	return SealEngine.SetGlareBrightnessParam(this.m_3DLayerParts.Get3DLayerPluginID(1), nIndex, fParam);
}

bool CAS3DLayer::ResetLightParam()
{
	return SealEngine.ResetLightParam(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

bool CAS3DLayer::SetLightParam(int Type, float Value)
{
	return SealEngine.SetLightParam(this.m_3DLayerParts.Get3DLayerPluginID(1), Type, Value);
}

float CAS3DLayer::GetLightParam(int Type)
{
	return SealEngine.GetLightParam(this.m_3DLayerParts.Get3DLayerPluginID(1), Type);
}

void CAS3DLayer::SetHemisphereLightVector(float X, float Y, float Z)
{
	this.SetLightParam(8, X);
	this.SetLightParam(9, Y);
	this.SetLightParam(10, Z);
}

void CAS3DLayer::SetHemisphereLightSkyColor(float ColorR, float ColorG, float ColorB)
{
	this.SetLightParam(11, ColorR);
	this.SetLightParam(12, ColorG);
	this.SetLightParam(13, ColorB);
}

void CAS3DLayer::SetHemisphereLightMiddleColor(float ColorR, float ColorG, float ColorB)
{
	this.SetLightParam(14, ColorR);
	this.SetLightParam(15, ColorG);
	this.SetLightParam(16, ColorB);
}

void CAS3DLayer::SetHemisphereLightGroundColor(float ColorR, float ColorG, float ColorB)
{
	this.SetLightParam(17, ColorR);
	this.SetLightParam(18, ColorG);
	this.SetLightParam(19, ColorB);
}

float CAS3DLayer::GetHemisphereLightVectorX()
{
	return this.GetLightParam(8);
}

float CAS3DLayer::GetHemisphereLightVectorY()
{
	return this.GetLightParam(9);
}

float CAS3DLayer::GetHemisphereLightVectorZ()
{
	return this.GetLightParam(10);
}

float CAS3DLayer::GetHemisphereLightSkyColorR()
{
	return this.GetLightParam(11);
}

float CAS3DLayer::GetHemisphereLightSkyColorG()
{
	return this.GetLightParam(12);
}

float CAS3DLayer::GetHemisphereLightSkyColorB()
{
	return this.GetLightParam(13);
}

float CAS3DLayer::GetHemisphereLightMiddleColorR()
{
	return this.GetLightParam(14);
}

float CAS3DLayer::GetHemisphereLightMiddleColorG()
{
	return this.GetLightParam(15);
}

float CAS3DLayer::GetHemisphereLightMiddleColorB()
{
	return this.GetLightParam(16);
}

float CAS3DLayer::GetHemisphereLightGroundColorR()
{
	return this.GetLightParam(17);
}

float CAS3DLayer::GetHemisphereLightGroundColorG()
{
	return this.GetLightParam(18);
}

float CAS3DLayer::GetHemisphereLightGroundColorB()
{
	return this.GetLightParam(19);
}

bool CAS3DLayer::SetUseLightScattering(bool Use)
{
	int Type = Use ? 1 : 0;
	if (!SealEngine.SetFogType(this.m_3DLayerParts.Get3DLayerPluginID(1), Type))
	{
		return false;
	}
	return true;
}

bool CAS3DLayer::GetUseLightScattering()
{
	return SealEngine.GetFogType(this.m_3DLayerParts.Get3DLayerPluginID(1)) != 0;
}

void CAS3DLayer::SetLightScatteringLightVector(float X, float Y, float Z)
{
	this.SetLightParam(24, X);
	this.SetLightParam(25, Y);
	this.SetLightParam(26, Z);
}

void CAS3DLayer::SetLightScatteringLightColor(float ColorR, float ColorG, float ColorB)
{
	this.SetLightParam(27, ColorR);
	this.SetLightParam(28, ColorG);
	this.SetLightParam(29, ColorB);
}

void CAS3DLayer::SetLightScatteringSunColor(float ColorR, float ColorG, float ColorB)
{
	this.SetLightParam(30, ColorR);
	this.SetLightParam(31, ColorG);
	this.SetLightParam(32, ColorB);
}

void CAS3DLayer::SetLightScatteringBetaR(float BetaR)
{
	this.SetLightParam(20, BetaR);
}

void CAS3DLayer::SetLightScatteringBetaM(float BetaM)
{
	this.SetLightParam(21, BetaM);
}

void CAS3DLayer::SetLightScatteringG(float G)
{
	this.SetLightParam(22, G);
}

void CAS3DLayer::SetLightScatteringDistance(float Distance)
{
	this.SetLightParam(23, Distance);
}

float CAS3DLayer::GetLightScatteringLightVectorX()
{
	return this.GetLightParam(24);
}

float CAS3DLayer::GetLightScatteringLightVectorY()
{
	return this.GetLightParam(25);
}

float CAS3DLayer::GetLightScatteringLightVectorZ()
{
	return this.GetLightParam(26);
}

float CAS3DLayer::GetLightScatteringLightColorR()
{
	return this.GetLightParam(27);
}

float CAS3DLayer::GetLightScatteringLightColorG()
{
	return this.GetLightParam(28);
}

float CAS3DLayer::GetLightScatteringLightColorB()
{
	return this.GetLightParam(29);
}

float CAS3DLayer::GetLightScatteringSunColorR()
{
	return this.GetLightParam(30);
}

float CAS3DLayer::GetLightScatteringSunColorG()
{
	return this.GetLightParam(31);
}

float CAS3DLayer::GetLightScatteringSunColorB()
{
	return this.GetLightParam(32);
}

float CAS3DLayer::GetLightScatteringBetaR()
{
	return this.GetLightParam(20);
}

float CAS3DLayer::GetLightScatteringBetaM()
{
	return this.GetLightParam(21);
}

float CAS3DLayer::GetLightScatteringG()
{
	return this.GetLightParam(22);
}

float CAS3DLayer::GetLightScatteringDistance()
{
	return this.GetLightParam(23);
}

void CAS3DLayer::SetToneMappingExposureBias(float ExposureBias)
{
	this.SetLightParam(0, ExposureBias);
}

void CAS3DLayer::SetToneMappingWhitePoint(float WhitePoint)
{
	this.SetLightParam(1, WhitePoint);
}

void CAS3DLayer::SetToneMappingShoulderStrength(float ShoulderStrength)
{
	this.SetLightParam(2, ShoulderStrength);
}

void CAS3DLayer::SetToneMappingLinearStrength(float LinearStrength)
{
	this.SetLightParam(3, LinearStrength);
}

void CAS3DLayer::SetToneMappingLinearAngle(float LinearAngle)
{
	this.SetLightParam(4, LinearAngle);
}

void CAS3DLayer::SetToneMappingToeStrength(float ToeStrength)
{
	this.SetLightParam(5, ToeStrength);
}

void CAS3DLayer::SetToneMappingToeNumerator(float ToeNumerator)
{
	this.SetLightParam(6, ToeNumerator);
}

void CAS3DLayer::SetToneMappingToeDenominator(float ToeDenominator)
{
	this.SetLightParam(7, ToeDenominator);
}

float CAS3DLayer::GetToneMappingExposureBias()
{
	return this.GetLightParam(0);
}

float CAS3DLayer::GetToneMappingWhitePoint()
{
	return this.GetLightParam(1);
}

float CAS3DLayer::GetToneMappingShoulderStrength()
{
	return this.GetLightParam(2);
}

float CAS3DLayer::GetToneMappingLinearStrength()
{
	return this.GetLightParam(3);
}

float CAS3DLayer::GetToneMappingLinearAngle()
{
	return this.GetLightParam(4);
}

float CAS3DLayer::GetToneMappingToeStrength()
{
	return this.GetLightParam(5);
}

float CAS3DLayer::GetToneMappingToeNumerator()
{
	return this.GetLightParam(6);
}

float CAS3DLayer::GetToneMappingToeDenominator()
{
	return this.GetLightParam(7);
}

float CAS3DLayer::GetSSAOParam(int nType)
{
	return SealEngine.GetSSAOParam(this.m_3DLayerParts.Get3DLayerPluginID(1), nType);
}

bool CAS3DLayer::SetSSAOParam(int nType, float fParam)
{
	return SealEngine.SetSSAOParam(this.m_3DLayerParts.Get3DLayerPluginID(1), nType, fParam);
}

void CAS3DLayer::SetSSAONumofRound(float NumofRound)
{
	this.SetSSAOParam(4, NumofRound);
}

void CAS3DLayer::SetSSAOMinLength(float MinLength)
{
	this.SetSSAOParam(5, MinLength);
}

void CAS3DLayer::SetSSAOMaxLength(float MaxLength)
{
	this.SetSSAOParam(6, MaxLength);
}

void CAS3DLayer::SetSSAOMinDistance(float MinDistance)
{
	this.SetSSAOParam(7, MinDistance);
}

void CAS3DLayer::SetSSAOMaxDistance(float MaxDistance)
{
	this.SetSSAOParam(8, MaxDistance);
}

void CAS3DLayer::SetSSAOColor(float ColorR, float ColorG, float ColorB)
{
	this.SetSSAOParam(0, ColorR);
	this.SetSSAOParam(1, ColorG);
	this.SetSSAOParam(2, ColorB);
}

void CAS3DLayer::SetSSAOAlpha(float Alpha)
{
	this.SetSSAOParam(3, Alpha);
}

float CAS3DLayer::GetSSAONumofRound()
{
	return this.GetSSAOParam(4);
}

float CAS3DLayer::GetSSAOMinLength()
{
	return this.GetSSAOParam(5);
}

float CAS3DLayer::GetSSAOMaxLength()
{
	return this.GetSSAOParam(6);
}

float CAS3DLayer::GetSSAOMinDistance()
{
	return this.GetSSAOParam(7);
}

float CAS3DLayer::GetSSAOMaxDistance()
{
	return this.GetSSAOParam(8);
}

float CAS3DLayer::GetSSAOColorR()
{
	return this.GetSSAOParam(0);
}

float CAS3DLayer::GetSSAOColorG()
{
	return this.GetSSAOParam(1);
}

float CAS3DLayer::GetSSAOColorB()
{
	return this.GetSSAOParam(2);
}

float CAS3DLayer::GetSSAOAlpha()
{
	return this.GetSSAOParam(3);
}

bool CAS3DLayer::IsLoading()
{
	return SealEngine.IsLoading(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

void CAS3DLayer::SetThreadLoadingMode(bool Mode)
{
	SealEngine.SetThreadLoadingMode(this.m_3DLayerParts.Get3DLayerPluginID(1), Mode);
}

bool CAS3DLayer::IsThreadLoadingMode()
{
	return SealEngine.IsThreadLoadingMode(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

bool CAS3DLayer::Calc2DDetectionHeight(float X, float Z, ref float Height)
{
	return SealEngine.Calc2DDetectionHeight(this.m_3DLayerParts.Get3DLayerPluginID(1), X, Z, Height);
}

bool CAS3DLayer::Calc2DDetection(float X0, float Y0, float Z0, float X1, float Y1, float Z1, float Radius, ref float X2, ref float Y2, ref float Z2)
{
	return SealEngine.Calc2DDetection(this.m_3DLayerParts.Get3DLayerPluginID(1), X0, Y0, Z0, X1, Y1, Z1, Radius, X2, Y2, Z2);
}

bool CAS3DLayer::Calc2DDetectionIntersectEyeVector(int ViewX, int ViewY, ref float X, ref float Y, ref float Z)
{
	return SealEngine.Calc2DDetectionIntersectEyeVector(this.m_3DLayerParts.Get3DLayerPluginID(1), ViewX, ViewY, X, Y, Z);
}

bool CAS3DLayer::FindPath(float StartX, float StartY, float StartZ, float GoalX, float GoalY, float GoalZ)
{
	return SealEngine.FindPath(this.m_3DLayerParts.Get3DLayerPluginID(1), StartX, StartY, StartZ, GoalX, GoalY, GoalZ);
}

bool CAS3DLayer::GetPathLine(ref array@float pIXArray, ref array@float pIYArray, ref array@float pIZArray)
{
	return SealEngine.GetPathLine(this.m_3DLayerParts.Get3DLayerPluginID(1), pIXArray, pIYArray, pIZArray);
}

bool CAS3DLayer::GetOptimizedPathLine(ref array@float pIXArray, ref array@float pIYArray, ref array@float pIZArray)
{
	return SealEngine.GetOptimizedPathLine(this.m_3DLayerParts.Get3DLayerPluginID(1), pIXArray, pIYArray, pIZArray);
}

bool CAS3DLayer::TransformPosToViewPos(float X, float Y, float Z, ref int ViewX, ref int ViewY)
{
	return SealEngine.TransformPosToViewPos(this.m_3DLayerParts.Get3DLayerPluginID(1), X, Y, Z, ViewX, ViewY);
}

bool CAS3DLayer::ClearCache()
{
	return SealEngine.ClearCache(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

bool CAS3DLayer::Suspend()
{
	return SealEngine.Suspend(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

bool CAS3DLayer::IsSuspend()
{
	return SealEngine.IsSuspend(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

bool CAS3DLayer::Resume()
{
	if (!SealEngine.Resume(this.m_3DLayerParts.Get3DLayerPluginID(1)))
	{
		return false;
	}
	SealEngine.SetThreadLoadingMode(this.m_3DLayerParts.Get3DLayerPluginID(1), false);
	int BeginTime = system.GetTime();
	this.m_3DLayerParts.SetShow(false);
	for (; ; )
	{
		AFL_View_Update(true);
		if (!this.IsLoading())
		{
			break;
		}
	}
	this.m_3DLayerParts.SetShow(true);
	SealEngine.SetThreadLoadingMode(this.m_3DLayerParts.Get3DLayerPluginID(1), true);
	return true;
}

bool CAS3DLayer::DrawToMainSurface()
{
	return SealEngine.DrawToMainSurface(this.m_3DLayerParts.Get3DLayerPluginID(1));
}

