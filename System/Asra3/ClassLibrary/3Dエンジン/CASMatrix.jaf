float CASMatrix::det2x2(float a1, float a2, float b1, float b2)
{
	return a1 * b2 - b1 * a2;
}

float CASMatrix::det3x3(float a1, float a2, float a3, float b1, float b2, float b3, float c1, float c2, float c3)
{
	return (a1 * this.det2x2(b2, b3, c2, c3) - b1 * this.det2x2(a2, a3, c2, c3)) + c1 * this.det2x2(a2, a3, b2, b3);
}

void CASMatrix::Set(float a11, float a12, float a13, float a14, float a21, float a22, float a23, float a24, float a31, float a32, float a33, float a34, float a41, float a42, float a43, float a44)
{
	this.m[0][0] = a11;
	this.m[0][1] = a12;
	this.m[0][2] = a13;
	this.m[0][3] = a14;
	this.m[1][0] = a21;
	this.m[1][1] = a22;
	this.m[1][2] = a23;
	this.m[1][3] = a24;
	this.m[2][0] = a31;
	this.m[2][1] = a32;
	this.m[2][2] = a33;
	this.m[2][3] = a34;
	this.m[3][0] = a41;
	this.m[3][1] = a42;
	this.m[3][2] = a43;
	this.m[3][3] = a44;
}

void CASMatrix::Identity()
{
	this.m[0][0] = 1.0;
	this.m[0][1] = 0.0;
	this.m[0][2] = 0.0;
	this.m[0][3] = 0.0;
	this.m[1][0] = 0.0;
	this.m[1][1] = 1.0;
	this.m[1][2] = 0.0;
	this.m[1][3] = 0.0;
	this.m[2][0] = 0.0;
	this.m[2][1] = 0.0;
	this.m[2][2] = 1.0;
	this.m[2][3] = 0.0;
	this.m[3][0] = 0.0;
	this.m[3][1] = 0.0;
	this.m[3][2] = 0.0;
	this.m[3][3] = 1.0;
}

void CASMatrix::SetMove(float fX, float fY, float fZ)
{
	this.Set(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, fX, fY, fZ, 1.0);
}

void CASMatrix::SetScale(float fX, float fY, float fZ)
{
	this.Set(fX, 0.0, 0.0, 0.0, 0.0, fY, 0.0, 0.0, 0.0, 0.0, fZ, 0.0, 0.0, 0.0, 0.0, 1.0);
}

void CASMatrix::SetRotH(float fAngle)
{
	float fCos = Math.Cos(fAngle);
	float fSin = Math.Sin(fAngle);
	this.Set(fCos, 0.0, -fSin, 0.0, 0.0, 1.0, 0.0, 0.0, fSin, 0.0, fCos, 0.0, 0.0, 0.0, 0.0, 1.0);
}

void CASMatrix::SetRotP(float fAngle)
{
	float fCos = Math.Cos(fAngle);
	float fSin = Math.Sin(fAngle);
	this.Set(1.0, 0.0, 0.0, 0.0, 0.0, fCos, fSin, 0.0, 0.0, -fSin, fCos, 0.0, 0.0, 0.0, 0.0, 1.0);
}

void CASMatrix::SetRotB(float fAngle)
{
	float fCos = Math.Cos(fAngle);
	float fSin = Math.Sin(fAngle);
	this.Set(fCos, fSin, 0.0, 0.0, -fSin, fCos, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);
}

void CASMatrix::MulMatrix(CASMatrix a)
{
	CASMatrix b;
	b = this;
	this.m[0][0] = b.m[0][0] * a.m[0][0] + b.m[0][1] * a.m[1][0] + b.m[0][2] * a.m[2][0] + b.m[0][3] * a.m[3][0];
	this.m[0][1] = b.m[0][0] * a.m[0][1] + b.m[0][1] * a.m[1][1] + b.m[0][2] * a.m[2][1] + b.m[0][3] * a.m[3][1];
	this.m[0][2] = b.m[0][0] * a.m[0][2] + b.m[0][1] * a.m[1][2] + b.m[0][2] * a.m[2][2] + b.m[0][3] * a.m[3][2];
	this.m[0][3] = b.m[0][0] * a.m[0][3] + b.m[0][1] * a.m[1][3] + b.m[0][2] * a.m[2][3] + b.m[0][3] * a.m[3][3];
	this.m[1][0] = b.m[1][0] * a.m[0][0] + b.m[1][1] * a.m[1][0] + b.m[1][2] * a.m[2][0] + b.m[1][3] * a.m[3][0];
	this.m[1][1] = b.m[1][0] * a.m[0][1] + b.m[1][1] * a.m[1][1] + b.m[1][2] * a.m[2][1] + b.m[1][3] * a.m[3][1];
	this.m[1][2] = b.m[1][0] * a.m[0][2] + b.m[1][1] * a.m[1][2] + b.m[1][2] * a.m[2][2] + b.m[1][3] * a.m[3][2];
	this.m[1][3] = b.m[1][0] * a.m[0][3] + b.m[1][1] * a.m[1][3] + b.m[1][2] * a.m[2][3] + b.m[1][3] * a.m[3][3];
	this.m[2][0] = b.m[2][0] * a.m[0][0] + b.m[2][1] * a.m[1][0] + b.m[2][2] * a.m[2][0] + b.m[2][3] * a.m[3][0];
	this.m[2][1] = b.m[2][0] * a.m[0][1] + b.m[2][1] * a.m[1][1] + b.m[2][2] * a.m[2][1] + b.m[2][3] * a.m[3][1];
	this.m[2][2] = b.m[2][0] * a.m[0][2] + b.m[2][1] * a.m[1][2] + b.m[2][2] * a.m[2][2] + b.m[2][3] * a.m[3][2];
	this.m[2][3] = b.m[2][0] * a.m[0][3] + b.m[2][1] * a.m[1][3] + b.m[2][2] * a.m[2][3] + b.m[2][3] * a.m[3][3];
	this.m[3][0] = b.m[3][0] * a.m[0][0] + b.m[3][1] * a.m[1][0] + b.m[3][2] * a.m[2][0] + b.m[3][3] * a.m[3][0];
	this.m[3][1] = b.m[3][0] * a.m[0][1] + b.m[3][1] * a.m[1][1] + b.m[3][2] * a.m[2][1] + b.m[3][3] * a.m[3][1];
	this.m[3][2] = b.m[3][0] * a.m[0][2] + b.m[3][1] * a.m[1][2] + b.m[3][2] * a.m[2][2] + b.m[3][3] * a.m[3][2];
	this.m[3][3] = b.m[3][0] * a.m[0][3] + b.m[3][1] * a.m[1][3] + b.m[3][2] * a.m[2][3] + b.m[3][3] * a.m[3][3];
}

void CASMatrix::GetInverse(ref CASMatrix Result)
{
	float a11 = this.det3x3(this.m[1][1], this.m[2][1], this.m[3][1], this.m[1][2], this.m[2][2], this.m[3][2], this.m[1][3], this.m[2][3], this.m[3][3]);
	float a21 = -this.det3x3(this.m[1][0], this.m[2][0], this.m[3][0], this.m[1][2], this.m[2][2], this.m[3][2], this.m[1][3], this.m[2][3], this.m[3][3]);
	float a31 = this.det3x3(this.m[1][0], this.m[2][0], this.m[3][0], this.m[1][1], this.m[2][1], this.m[3][1], this.m[1][3], this.m[2][3], this.m[3][3]);
	float a41 = -this.det3x3(this.m[1][0], this.m[2][0], this.m[3][0], this.m[1][1], this.m[2][1], this.m[3][1], this.m[1][2], this.m[2][2], this.m[3][2]);
	float a12 = -this.det3x3(this.m[0][1], this.m[2][1], this.m[3][1], this.m[0][2], this.m[2][2], this.m[3][2], this.m[0][3], this.m[2][3], this.m[3][3]);
	float a22 = this.det3x3(this.m[0][0], this.m[2][0], this.m[3][0], this.m[0][2], this.m[2][2], this.m[3][2], this.m[0][3], this.m[2][3], this.m[3][3]);
	float a32 = -this.det3x3(this.m[0][0], this.m[2][0], this.m[3][0], this.m[0][1], this.m[2][1], this.m[3][1], this.m[0][3], this.m[2][3], this.m[3][3]);
	float a42 = this.det3x3(this.m[0][0], this.m[2][0], this.m[3][0], this.m[0][1], this.m[2][1], this.m[3][1], this.m[0][2], this.m[2][2], this.m[3][2]);
	float a13 = this.det3x3(this.m[0][1], this.m[1][1], this.m[3][1], this.m[0][2], this.m[1][2], this.m[3][2], this.m[0][3], this.m[1][3], this.m[3][3]);
	float a23 = -this.det3x3(this.m[0][0], this.m[1][0], this.m[3][0], this.m[0][2], this.m[1][2], this.m[3][2], this.m[0][3], this.m[1][3], this.m[3][3]);
	float a33 = this.det3x3(this.m[0][0], this.m[1][0], this.m[3][0], this.m[0][1], this.m[1][1], this.m[3][1], this.m[0][3], this.m[1][3], this.m[3][3]);
	float a43 = -this.det3x3(this.m[0][0], this.m[1][0], this.m[3][0], this.m[0][1], this.m[1][1], this.m[3][1], this.m[0][2], this.m[1][2], this.m[3][2]);
	float a14 = -this.det3x3(this.m[0][1], this.m[1][1], this.m[2][1], this.m[0][2], this.m[1][2], this.m[2][2], this.m[0][3], this.m[1][3], this.m[2][3]);
	float a24 = this.det3x3(this.m[0][0], this.m[1][0], this.m[2][0], this.m[0][2], this.m[1][2], this.m[2][2], this.m[0][3], this.m[1][3], this.m[2][3]);
	float a34 = -this.det3x3(this.m[0][0], this.m[1][0], this.m[2][0], this.m[0][1], this.m[1][1], this.m[2][1], this.m[0][3], this.m[1][3], this.m[2][3]);
	float a44 = this.det3x3(this.m[0][0], this.m[1][0], this.m[2][0], this.m[0][1], this.m[1][1], this.m[2][1], this.m[0][2], this.m[1][2], this.m[2][2]);
	float det = this.m[0][0] * a11 + this.m[0][1] * a21 + this.m[0][2] * a31 + this.m[0][3] * a41;
	float oodet = 1 / det;
	Result.m[0][0] = a11 * oodet;
	Result.m[1][0] = a21 * oodet;
	Result.m[2][0] = a31 * oodet;
	Result.m[3][0] = a41 * oodet;
	Result.m[0][1] = a12 * oodet;
	Result.m[1][1] = a22 * oodet;
	Result.m[2][1] = a32 * oodet;
	Result.m[3][1] = a42 * oodet;
	Result.m[0][2] = a13 * oodet;
	Result.m[1][2] = a23 * oodet;
	Result.m[2][2] = a33 * oodet;
	Result.m[3][2] = a43 * oodet;
	Result.m[0][3] = a14 * oodet;
	Result.m[1][3] = a24 * oodet;
	Result.m[2][3] = a34 * oodet;
	Result.m[3][3] = a44 * oodet;
}

