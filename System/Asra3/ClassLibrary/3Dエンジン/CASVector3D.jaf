void CASVector3D::Set(float X, float Y, float Z)
{
	this.fX = X;
	this.fY = Y;
	this.fZ = Z;
}

float CASVector3D::GetX()
{
	return this.fX;
}

float CASVector3D::GetY()
{
	return this.fY;
}

float CASVector3D::GetZ()
{
	return this.fZ;
}

CASVector3D CASVector3D::AddVector(CASVector3D Obj)
{
	CASVector3D Result;
	Result.fX = this.fX + Obj.fX;
	Result.fY = this.fY + Obj.fY;
	Result.fZ = this.fZ + Obj.fZ;
	return Result;
}

CASVector3D CASVector3D::SubVector(CASVector3D Obj)
{
	CASVector3D Result;
	Result.fX = this.fX - Obj.fX;
	Result.fY = this.fY - Obj.fY;
	Result.fZ = this.fZ - Obj.fZ;
	return Result;
}

float CASVector3D::DotVector(CASVector3D Obj)
{
	return this.fX * Obj.fX + this.fY * Obj.fY + this.fZ * Obj.fZ;
}

CASVector3D CASVector3D::CrossVector(CASVector3D Obj)
{
	CASVector3D Result;
	Result.Set(this.fY * Obj.fZ - this.fZ * Obj.fY, this.fZ * Obj.fX - this.fX * Obj.fZ, this.fX * Obj.fY - this.fY * Obj.fX);
	return Result;
}

CASVector3D CASVector3D::MulMatrix(CASMatrix m)
{
	CASVector3D Result;
	Result.fX = this.fX * m.m[0][0] + this.fY * m.m[1][0] + this.fZ * m.m[2][0] + m.m[3][0];
	Result.fY = this.fX * m.m[0][1] + this.fY * m.m[1][1] + this.fZ * m.m[2][1] + m.m[3][1];
	Result.fZ = this.fX * m.m[0][2] + this.fY * m.m[1][2] + this.fZ * m.m[2][2] + m.m[3][2];
	float fH = this.fX * m.m[0][3] + this.fY * m.m[1][3] + this.fZ * m.m[2][3] + m.m[3][3];
	if (fH != 0.0)
	{
		float fInvH = 1 / fH;
		Result.fX *= fInvH;
		Result.fY *= fInvH;
		Result.fZ *= fInvH;
	}
	return Result;
}

CASVector3D CASVector3D::MulScalar(float Scalar)
{
	CASVector3D Result;
	Result.fX = this.fX * Scalar;
	Result.fY = this.fY * Scalar;
	Result.fZ = this.fZ * Scalar;
	return Result;
}

void CASVector3D::Normalize()
{
	float fDenom = Math.Sqrt(this.fX * this.fX + this.fY * this.fY + this.fZ * this.fZ);
	if (fDenom != 0.0)
	{
		fDenom = 1.0 / fDenom;
		this.fX *= fDenom;
		this.fY *= fDenom;
		this.fZ *= fDenom;
	}
}

CASVector3D CASVector3D::GetNormal()
{
	CASVector3D Result;
	Result = this;
	Result.Normalize();
	return Result;
}

float CASVector3D::DistanceVector(CASVector3D Obj)
{
	return Math.Sqrt((this.fX - Obj.fX) * (this.fX - Obj.fX) + (this.fY - Obj.fY) * (this.fY - Obj.fY) + (this.fZ - Obj.fZ) * (this.fZ - Obj.fZ));
}

float CASVector3D::LengthVector()
{
	return Math.Sqrt(this.fX * this.fX + this.fY * this.fY + this.fZ * this.fZ);
}

float CASVector3D::LengthVectorSq()
{
	return this.fX * this.fX + this.fY * this.fY + this.fZ * this.fZ;
}

CASVector3D CF_CCASVector3D(float X, float Y, float Z)
{
	CASVector3D Result;
	Result.Set(X, Y, Z);
	return Result;
}

