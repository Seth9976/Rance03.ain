void Ｓ＿既読スキップ()
{
	SYS_スキップモード反転();
}

void 既読スキップモード解除()
{
	SYS_スキップモード設定(false);
}

bool 既読スキップ中確認()
{
	return SYS_スキップ中確認();
}

void 既読スキップ中フラグクリア()
{
	SYS_スキップ中フラグクリア();
}

bool 既読スキップ選択肢解除確認()
{
	return g_ReleaseMessageSkipInSelectMenu;
}

void 既読スキップモードマーク＿ＣＧ設定(int Ｍ番号, string ＣＧ名)
{
	if (Ｍ番号 != 0)
	{
		SYS_ASSERTE_AREA_ID(Ｍ番号);
		SYS_スキップモードマーク＿ＣＧ設定(Ｍ番号, ＣＧ名);
		return;
	}
	for (Ｍ番号 = 1; Ｍ番号 < 40; ++Ｍ番号)
	{
		SYS_スキップモードマーク＿ＣＧ設定(Ｍ番号, ＣＧ名);
	}
}

void 既読スキップモードマーク＿ループＣＧ設定(int Ｍ番号, string ＣＧ名, int 開始番号, int 枚数, int 切り替え時間)
{
	if (Ｍ番号 != 0)
	{
		SYS_ASSERTE_AREA_ID(Ｍ番号);
		SYS_スキップモードマーク＿ループＣＧ設定(Ｍ番号, ＣＧ名, 開始番号, 枚数, 切り替え時間);
		return;
	}
	for (Ｍ番号 = 1; Ｍ番号 < 40; ++Ｍ番号)
	{
		SYS_スキップモードマーク＿ループＣＧ設定(Ｍ番号, ＣＧ名, 開始番号, 枚数, 切り替え時間);
	}
}

void 既読スキップモードマーク＿フラット設定(int Ｍ番号, string フラット名)
{
	if (Ｍ番号 != 0)
	{
		SYS_ASSERTE_AREA_ID(Ｍ番号);
		SYS_スキップモードマーク＿フラット設定(Ｍ番号, フラット名);
		return;
	}
	for (Ｍ番号 = 1; Ｍ番号 < 40; ++Ｍ番号)
	{
		SYS_スキップモードマーク＿フラット設定(Ｍ番号, フラット名);
	}
}

void 既読スキップモードマーク表示位置(int Ｍ番号, int Ｘ, int Ｙ, int Ｚ)
{
	if (Ｍ番号 != 0)
	{
		SYS_ASSERTE_AREA_ID(Ｍ番号);
		SYS_スキップモードマーク表示位置(Ｍ番号, Ｘ, Ｙ, Ｚ);
		return;
	}
	for (Ｍ番号 = 1; Ｍ番号 < 40; ++Ｍ番号)
	{
		SYS_スキップモードマーク表示位置(Ｍ番号, Ｘ, Ｙ, Ｚ);
	}
}

void 既読スキップモードマーク表示許可設定(bool bShow)
{
	SYS_スキップモードマーク表示許可設定(bShow);
}

bool 既読スキップモードマーク表示許可設定取得()
{
	return SYS_スキップモードマーク表示許可フラグ取得();
}

