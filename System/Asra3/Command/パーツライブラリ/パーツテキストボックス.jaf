void Ｐ＿テキストボックス＿サイズ設定(int パーツ番号, int 幅, int 高さ)
{
	PartsEngine.SetTextBoxSize(パーツ番号, 幅, 高さ);
}

void Ｐ＿テキストボックス＿フォント設定(int パーツ番号, int 種類, int 赤, int 緑, int 青, float 太字幅, int 縁取り赤, int 縁取り緑, int 縁取り青, float 縁取り幅)
{
	PartsEngine.SetTextBoxFontProperty(パーツ番号, 種類, 16, 赤, 緑, 青, 太字幅, 縁取り赤, 縁取り緑, 縁取り青, 縁取り幅);
}

void Ｐ＿テキストボックス＿フォント取得(int パーツ番号, ref int 種類, ref int 赤, ref int 緑, ref int 青, ref float 太字幅, ref int 縁取り赤, ref int 縁取り緑, ref int 縁取り青, ref float 縁取り幅)
{
	int サイズ;
	PartsEngine.GetTextBoxFontProperty(パーツ番号, 種類, サイズ, 赤, 緑, 青, 太字幅, 縁取り赤, 縁取り緑, 縁取り青, 縁取り幅);
}

void Ｐ＿テキストボックス＿読み取り専用設定(int パーツ番号, bool 読み取り)
{
	PartsEngine.SetTextBoxReadOnly(パーツ番号, 読み取り);
}

bool Ｐ＿テキストボックス＿読み取り専用確認(int パーツ番号)
{
	return PartsEngine.IsTextBoxReadOnly(パーツ番号);
}

void Ｐ＿テキストボックス＿テキスト設定(int パーツ番号, string テキスト)
{
	PartsEngine.SetTextBoxText(パーツ番号, テキスト);
}

string Ｐ＿テキストボックス＿テキスト取得(int パーツ番号)
{
	string Text;
	PartsEngine.GetTextBoxText(パーツ番号, Text);
	return Text;
}

void Ｐ＿テキストボックス＿最大文字数設定(int パーツ番号, int 最大文字数)
{
	PartsEngine.SetTextBoxMaxTextLength(パーツ番号, 最大文字数);
}

int Ｐ＿テキストボックス＿最大文字数取得(int パーツ番号)
{
	return PartsEngine.GetTextBoxMaxTextLength(パーツ番号);
}

void Ｐ＿テキストボックス＿背景色設定(int パーツ番号, int 赤, int 緑, int 青)
{
	PartsEngine.SetTextBoxBGColor(パーツ番号, 赤, 緑, 青);
}

int Ｐ＿テキストボックス＿背景色赤取得(int パーツ番号)
{
	return PartsEngine.GetTextBoxBGR(パーツ番号);
}

int Ｐ＿テキストボックス＿背景色緑取得(int パーツ番号)
{
	return PartsEngine.GetTextBoxBGG(パーツ番号);
}

int Ｐ＿テキストボックス＿背景色青取得(int パーツ番号)
{
	return PartsEngine.GetTextBoxBGB(パーツ番号);
}

void Ｐ＿テキストボックス＿読み取り専用背景色設定(int パーツ番号, int 赤, int 緑, int 青)
{
	PartsEngine.SetTextBoxReadOnlyBGColor(パーツ番号, 赤, 緑, 青);
}

int Ｐ＿テキストボックス＿読み取り専用背景色赤取得(int パーツ番号)
{
	return PartsEngine.GetTextBoxReadOnlyBGR(パーツ番号);
}

int Ｐ＿テキストボックス＿読み取り専用背景色緑取得(int パーツ番号)
{
	return PartsEngine.GetTextBoxReadOnlyBGG(パーツ番号);
}

int Ｐ＿テキストボックス＿読み取り専用背景色青取得(int パーツ番号)
{
	return PartsEngine.GetTextBoxReadOnlyBGB(パーツ番号);
}

void Ｐ＿テキストボックス＿枠色設定(int パーツ番号, int 赤, int 緑, int 青)
{
	PartsEngine.SetTextBoxFrameColor(パーツ番号, 赤, 緑, 青);
}

int Ｐ＿テキストボックス＿枠色赤取得(int パーツ番号)
{
	return PartsEngine.GetTextBoxFrameR(パーツ番号);
}

int Ｐ＿テキストボックス＿枠色緑取得(int パーツ番号)
{
	return PartsEngine.GetTextBoxFrameG(パーツ番号);
}

int Ｐ＿テキストボックス＿枠色青取得(int パーツ番号)
{
	return PartsEngine.GetTextBoxFrameB(パーツ番号);
}

void Ｐ＿テキストボックス＿選択色設定(int パーツ番号, int 赤, int 緑, int 青)
{
	PartsEngine.SetTextBoxSelectColor(パーツ番号, 赤, 緑, 青);
}

int Ｐ＿テキストボックス＿選択色赤取得(int パーツ番号)
{
	return PartsEngine.GetTextBoxSelectR(パーツ番号);
}

int Ｐ＿テキストボックス＿選択色緑取得(int パーツ番号)
{
	return PartsEngine.GetTextBoxSelectG(パーツ番号);
}

int Ｐ＿テキストボックス＿選択色青取得(int パーツ番号)
{
	return PartsEngine.GetTextBoxSelectB(パーツ番号);
}

void Ｐ＿テキストボックス＿ＣＧ名設定(int パーツ番号, string ＣＧ名)
{
	PartsEngine.SetTextBoxCGName(パーツ番号, ＣＧ名);
}

string Ｐ＿テキストボックス＿ＣＧ名取得(int パーツ番号)
{
	string Name;
	PartsEngine.GetTextBoxCGName(パーツ番号, Name);
	return Name;
}

void Ｐ＿テキストボックス＿文字間隔設定(int パーツ番号, int 間隔)
{
	PartsEngine.SetTextBoxCharSpace(パーツ番号, 間隔);
}

int Ｐ＿テキストボックス＿文字間隔取得(int パーツ番号)
{
	return PartsEngine.GetTextBoxCharSpace(パーツ番号);
}

void Ｐ＿テキストボックス＿全角入力(int パーツ番号)
{
	PartsEngine.SetOpenTextBoxIME(パーツ番号, true);
}

void Ｐ＿テキストボックス＿半角入力(int パーツ番号)
{
	PartsEngine.SetOpenTextBoxIME(パーツ番号, false);
}

void Ｐ＿テキストボックス＿全角入力設定(int パーツ番号, bool 有効)
{
	PartsEngine.SetOpenTextBoxIME(パーツ番号, 有効);
}

bool Ｐ＿テキストボックス＿全角入力確認(int パーツ番号)
{
	return PartsEngine.IsOpenTextBoxIME(パーツ番号);
}

void Ｐ＿テキストボックス＿全選択(int パーツ番号)
{
	PartsEngine.SelectTextBoxAll(パーツ番号);
}

