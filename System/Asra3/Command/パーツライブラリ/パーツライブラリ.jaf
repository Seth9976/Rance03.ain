void Ｐ＿削除(int パーツ番号)
{
	if (1000000000 <= パーツ番号)
	{
		string ErrorText;
		ErrorText += "指定されたパーツ番号【%d】はシステムが使用しています。\n" % パーツ番号;
		ErrorText += "削除することができません。\n";
		ErrorText += "使用可能なパーツ番号は【 1 ～ %d 】です" % 999999999;
		system.Error(ErrorText);
		return;
	}
	PARTS_Release(パーツ番号);
}

bool Ｐ＿存在確認(int PartsNumber)
{
	return PartsEngine.IsExist(PartsNumber);
}

void Ｐ＿クリックミス効果音設定(string 効果音名)
{
	PartsEngine.SetClickMissSoundName(効果音名);
}

void Ｐ＿モーション画面振動設定(int 横振幅, int 縦振幅, int 開始時間, int 終了時間)
{
	PartsEngine.AddWholeMotionVibrationSize(横振幅, 縦振幅, 開始時間, 終了時間);
}

void Ｐ＿モーション効果音設定(string 効果音名, int 開始時間)
{
	PartsEngine.AddMotionSound(効果音名, 開始時間);
}

void Ｐ＿フォーカス設定(int PartsNumber)
{
	PartsEngine.SetFocus(PartsNumber);
}

bool Ｐ＿フォーカス確認(int PartsNumber)
{
	return PartsEngine.IsFocus(PartsNumber);
}

void Ｐ＿座標設定(int パーツ番号, float Ｘ, float Ｙ)
{
	PartsEngine.SetComponentPos(パーツ番号, Ｘ, Ｙ);
}

void Ｐ＿Ｚ座標設定(int パーツ番号, int Ｚ)
{
	SYS_ASSERTE_Z(Ｚ);
	PartsEngine.SetComponentPosZ(パーツ番号, Ｚ);
}

float Ｐ＿Ｘ座標取得(int パーツ番号)
{
	return PartsEngine.GetComponentPosX(パーツ番号);
}

float Ｐ＿Ｙ座標取得(int パーツ番号)
{
	return PartsEngine.GetComponentPosY(パーツ番号);
}

int Ｐ＿Ｚ座標取得(int パーツ番号)
{
	return PartsEngine.GetComponentPosZ(パーツ番号);
}

void Ｐ＿原点座標設定(int パーツ番号, int 原点座標)
{
	PartsEngine.SetComponentOriginPosMode(パーツ番号, 原点座標);
}

int Ｐ＿原点座標取得(int パーツ番号)
{
	return PartsEngine.GetComponentOriginPosMode(パーツ番号);
}

void Ｐ＿表示設定(int パーツ番号, bool 表示フラグ)
{
	PartsEngine.SetComponentShow(パーツ番号, 表示フラグ);
}

bool Ｐ＿表示設定取得(int パーツ番号)
{
	return PartsEngine.IsComponentShow(パーツ番号);
}

void Ｐ＿メッセージウィンドウ表示連動設定(int パーツ番号, bool 表示連動設定)
{
	PartsEngine.SetComponentMessageWindowShowLink(パーツ番号, 表示連動設定);
}

bool Ｐ＿メッセージウィンドウ表示連動設定取得(int パーツ番号)
{
	return PartsEngine.IsComponentMessageWindowShowLink(パーツ番号);
}

void Ｐ＿アルファ値設定(int パーツ番号, int アルファ値)
{
	PartsEngine.SetComponentAlpha(パーツ番号, アルファ値);
}

int Ｐ＿アルファ値取得(int パーツ番号)
{
	return PartsEngine.GetComponentAlpha(パーツ番号);
}

void Ｐ＿加算色設定(int パーツ番号, int 赤, int 緑, int 青)
{
	PartsEngine.SetComponentAddColor(パーツ番号, 赤, 緑, 青);
}

void Ｐ＿加算色取得(int パーツ番号, ref int 赤, ref int 緑, ref int 青)
{
	赤 = PartsEngine.GetComponentAddColorR(パーツ番号);
	緑 = PartsEngine.GetComponentAddColorG(パーツ番号);
	青 = PartsEngine.GetComponentAddColorB(パーツ番号);
}

void Ｐ＿乗算色設定(int パーツ番号, int 赤, int 緑, int 青)
{
	PartsEngine.SetComponentMulColor(パーツ番号, 赤, 緑, 青);
}

void Ｐ＿乗算色取得(int パーツ番号, ref int 赤, ref int 緑, ref int 青)
{
	赤 = PartsEngine.GetComponentMulColorR(パーツ番号);
	緑 = PartsEngine.GetComponentMulColorG(パーツ番号);
	青 = PartsEngine.GetComponentMulColorB(パーツ番号);
}

void Ｐ＿描画フィルタ設定(int パーツ番号, int 描画フィルタ)
{
	PartsEngine.SetComponentDrawFilter(パーツ番号, 描画フィルタ);
}

int Ｐ＿描画フィルタ取得(int パーツ番号)
{
	return PartsEngine.GetComponentDrawFilter(パーツ番号);
}

void Ｐ＿Ｘ拡大率設定(int パーツ番号, float Ｘ拡大率)
{
	PartsEngine.SetComponentMagX(パーツ番号, Ｘ拡大率);
}

void Ｐ＿Ｙ拡大率設定(int パーツ番号, float Ｙ拡大率)
{
	PartsEngine.SetComponentMagY(パーツ番号, Ｙ拡大率);
}

float Ｐ＿Ｘ拡大率取得(int パーツ番号)
{
	return PartsEngine.GetComponentMagX(パーツ番号);
}

float Ｐ＿Ｙ拡大率取得(int パーツ番号)
{
	return PartsEngine.GetComponentMagY(パーツ番号);
}

void Ｐ＿Ｘ回転角度設定(int パーツ番号, float Ｘ回転角度)
{
	PartsEngine.SetComponentRotateX(パーツ番号, Ｘ回転角度);
}

void Ｐ＿Ｙ回転角度設定(int パーツ番号, float Ｙ回転角度)
{
	PartsEngine.SetComponentRotateY(パーツ番号, Ｙ回転角度);
}

void Ｐ＿Ｚ回転角度設定(int パーツ番号, float Ｚ回転角度)
{
	PartsEngine.SetComponentRotateZ(パーツ番号, Ｚ回転角度);
}

float Ｐ＿Ｘ回転角度取得(int パーツ番号)
{
	return PartsEngine.GetComponentRotateX(パーツ番号);
}

float Ｐ＿Ｙ回転角度取得(int パーツ番号)
{
	return PartsEngine.GetComponentRotateY(パーツ番号);
}

float Ｐ＿Ｚ回転角度取得(int パーツ番号)
{
	return PartsEngine.GetComponentRotateZ(パーツ番号);
}

void Ｐ＿マージン設定(int パーツ番号, int 上マージン, int 下マージン, int 左マージン, int 右マージン)
{
	PartsEngine.SetComponentMargin(パーツ番号, 上マージン, 下マージン, 左マージン, 右マージン);
}

int Ｐ＿上マージン取得(int パーツ番号)
{
	return PartsEngine.GetComponentMarginTop(パーツ番号);
}

int Ｐ＿下マージン取得(int パーツ番号)
{
	return PartsEngine.GetComponentMarginBottom(パーツ番号);
}

int Ｐ＿左マージン取得(int パーツ番号)
{
	return PartsEngine.GetComponentMarginLeft(パーツ番号);
}

int Ｐ＿右マージン取得(int パーツ番号)
{
	return PartsEngine.GetComponentMarginRight(パーツ番号);
}

void Ｐ＿アルファクリッパー設定(int パーツ番号, int アルファクリッパーパーツ番号)
{
	PartsEngine.SetComponentAlphaClipper(パーツ番号, アルファクリッパーパーツ番号);
}

int Ｐ＿アルファクリッパー取得(int パーツ番号)
{
	return PartsEngine.GetComponentAlphaClipper(パーツ番号);
}

void Ｐ＿オンカーソル表示連動設定(int パーツ番号, int 参照パーツ番号)
{
	PartsEngine.Parts_SetOnCursorShowLinkPartsNumber(パーツ番号, 参照パーツ番号);
}

int Ｐ＿オンカーソル表示連動設定取得(int パーツ番号)
{
	return PartsEngine.Parts_GetOnCursorShowLinkPartsNumber(パーツ番号);
}

void Ｐ＿テクスチャフィルタ設定(int パーツ番号, int 種類)
{
	PartsEngine.SetComponentTextureFilterType(パーツ番号, 種類);
}

int Ｐ＿テクスチャフィルタ取得(int パーツ番号)
{
	return PartsEngine.GetComponentTextureFilterType(パーツ番号);
}

void Ｐ＿ミップマップ設定(int パーツ番号, bool ミップマップ)
{
	PartsEngine.SetComponentMipmap(パーツ番号, ミップマップ);
}

bool Ｐ＿ミップマップ設定取得(int パーツ番号)
{
	return PartsEngine.IsComponentMipmap(パーツ番号);
}

void Ｐ＿高速再生設定(int PartsNumber, bool 高速再生)
{
	PARTS_SetSpeedupRateByMessageSkip(PartsNumber, 高速再生 ? 3 : 1);
}

bool Ｐ＿高速再生設定取得(int PartsNumber)
{
	return PARTS_GetSpeedupRateByMessageSkip(PartsNumber) != 1;
}

void Ｐ＿親設定(int パーツ番号, int 親パーツ番号)
{
	PartsEngine.Parts_SetParentPartsNumber(パーツ番号, 親パーツ番号);
}

int Ｐ＿親設定取得(int パーツ番号)
{
	return PartsEngine.Parts_GetParentPartsNumber(パーツ番号);
}

void Ｐ＿親解放(int パーツ番号)
{
	Ｐ＿親設定(パーツ番号, 0);
}

bool Ｐ＿子存在確認(int パーツ番号, int 子パーツ番号)
{
	return PartsEngine.IsExistChild(パーツ番号, 子パーツ番号);
}

void Ｐ＿子全解放(int パーツ番号)
{
	PartsEngine.ClearChild(パーツ番号);
}

void Ｐ＿子追加(int パーツ番号, int 子パーツ番号)
{
	PartsEngine.AddChild(パーツ番号, 子パーツ番号);
}

void Ｐ＿子挿入(int パーツ番号, int インデックス, int 子パーツ番号)
{
	PartsEngine.InsertChild(パーツ番号, インデックス, 子パーツ番号);
}

void Ｐ＿子解放(int パーツ番号, int 子パーツ番号)
{
	PartsEngine.RemoveChild(パーツ番号, 子パーツ番号);
}

int Ｐ＿子数取得(int パーツ番号)
{
	return PartsEngine.NumofChild(パーツ番号);
}

int Ｐ＿子インデックス取得(int パーツ番号, int 子パーツ番号)
{
	return PartsEngine.GetChildIndex(パーツ番号, 子パーツ番号);
}

int Ｐ＿子取得(int パーツ番号, int インデックス)
{
	return PartsEngine.GetChild(パーツ番号, インデックス);
}

void Ｐ＿親メッセージウィンドウ設定(int パーツ番号, int 親メッセージウィンドウ番号)
{
	Ｐ＿親設定(パーツ番号, 1000000000 + 親メッセージウィンドウ番号);
}

int Ｐ＿親メッセージウィンドウ設定取得(int パーツ番号)
{
	int ParentPartsNumber = Ｐ＿親設定取得(パーツ番号);
	int GrandParentNumber = Ｐ＿親設定取得(ParentPartsNumber);
	if (GrandParentNumber == 0)
	{
		return 0;
	}
	return ParentPartsNumber - 1000000000;
}

void Ｐ＿モーション移動設定(int パーツ番号, float 開始Ｘ座標, float 開始Ｙ座標, float 終了Ｘ座標, float 終了Ｙ座標, int 開始時間, int 終了時間, string カーブ定義名)
{
	PartsEngine.AddComponentMotionPos(パーツ番号, 開始Ｘ座標, 開始Ｙ座標, 終了Ｘ座標, 終了Ｙ座標, 開始時間, 終了時間, カーブ定義名);
}

void Ｐ＿モーションアルファ設定(int パーツ番号, int 開始アルファ値, int 終了アルファ値, int 開始時間, int 終了時間, string カーブ定義名)
{
	PartsEngine.AddComponentMotionAlpha(パーツ番号, 開始アルファ値, 終了アルファ値, 開始時間, 終了時間, カーブ定義名);
}

void Ｐ＿モーション加算色設定(int パーツ番号, int 開始赤色, int 開始緑色, int 開始青色, int 終了赤色, int 終了緑色, int 終了青色, int 開始時間, int 終了時間, string カーブ定義名)
{
	PartsEngine.AddComponentMotionAddColor(パーツ番号, 開始赤色, 開始緑色, 開始青色, 終了赤色, 終了緑色, 終了青色, 開始時間, 終了時間, カーブ定義名);
}

void Ｐ＿モーション乗算色設定(int パーツ番号, int 開始赤色, int 開始緑色, int 開始青色, int 終了赤色, int 終了緑色, int 終了青色, int 開始時間, int 終了時間, string カーブ定義名)
{
	PartsEngine.AddComponentMotionMulColor(パーツ番号, 開始赤色, 開始緑色, 開始青色, 終了赤色, 終了緑色, 終了青色, 開始時間, 終了時間, カーブ定義名);
}

void Ｐ＿モーションＣＧ設定(int パーツ番号, string 基準ＣＧ名, int 開始番号, int 枚数, int 開始時間, int 終了時間, string カーブ定義名)
{
	if (!PartsEngine.AddComponentMotionCG(パーツ番号, 基準ＣＧ名, 開始番号, 枚数, 開始時間, 終了時間, カーブ定義名))
	{
		PARTS_Warning("Ｐ＿ＣＧ判定設定(パーツ番号 = %d, 基準ＣＧ名 = %s, 開始番号 = %d, 枚数 = %d, 開始時間 = %d, 終了時間 = %d, カーブ定義名 = %s)\n" % パーツ番号 % 基準ＣＧ名 % 開始番号 % 枚数 % 開始時間 % 終了時間 % カーブ定義名);
	}
}

void Ｐ＿モーションＣＧエフェクト設定(int パーツ番号, string 基準ＣＧ名, int 開始番号, int 枚数, int 開始時間, int 終了時間, string カーブ定義名)
{
	if (!PartsEngine.AddComponentMotionCG(パーツ番号, 基準ＣＧ名, 開始番号, 枚数, 開始時間, 終了時間, カーブ定義名))
	{
		PARTS_Warning("Ｐ＿モーションＣＧエフェクト設定(パーツ番号 = %d, 基準ＣＧ名 = %s, 開始番号 = %d, 枚数 = %d, 開始時間 = %d, 終了時間 = %d, カーブ定義名 = %s)\n" % パーツ番号 % 基準ＣＧ名 % 開始番号 % 枚数 % 開始時間 % 終了時間 % カーブ定義名);
	}
	PartsEngine.AddComponentMotionCG(パーツ番号, "", 0, 1, 終了時間, 終了時間, "");
}

void Ｐ＿モーション横ゲージ率設定(int パーツ番号, float 開始分子, float 開始分母, float 終了分子, float 終了分母, int 開始時間, int 終了時間, string カーブ定義名)
{
	PartsEngine.AddComponentMotionHGaugeRate(パーツ番号, 開始分子, 開始分母, 終了分子, 終了分母, 開始時間, 終了時間, カーブ定義名);
}

void Ｐ＿モーション縦ゲージ率設定(int パーツ番号, float 開始分子, float 開始分母, float 終了分子, float 終了分母, int 開始時間, int 終了時間, string カーブ定義名)
{
	PartsEngine.AddComponentMotionVGaugeRate(パーツ番号, 開始分子, 開始分母, 終了分子, 終了分母, 開始時間, 終了時間, カーブ定義名);
}

void Ｐ＿モーション数字設定(int パーツ番号, int 開始数, int 終了数, int 開始時間, int 終了時間, string カーブ定義名)
{
	PartsEngine.AddComponentMotionNumeralNumber(パーツ番号, 開始数, 終了数, 開始時間, 終了時間, カーブ定義名);
}

void Ｐ＿モーションＸ拡大率設定(int パーツ番号, float 開始Ｘ拡大率, float 終了Ｘ拡大率, int 開始時間, int 終了時間, string カーブ定義名)
{
	PartsEngine.AddComponentMotionMagX(パーツ番号, 開始Ｘ拡大率, 終了Ｘ拡大率, 開始時間, 終了時間, カーブ定義名);
}

void Ｐ＿モーションＹ拡大率設定(int パーツ番号, float 開始Ｙ拡大率, float 終了Ｙ拡大率, int 開始時間, int 終了時間, string カーブ定義名)
{
	PartsEngine.AddComponentMotionMagY(パーツ番号, 開始Ｙ拡大率, 終了Ｙ拡大率, 開始時間, 終了時間, カーブ定義名);
}

void Ｐ＿モーションＸ回転角度設定(int パーツ番号, float 開始Ｘ回転角度, float 終了Ｘ回転角度, int 開始時間, int 終了時間, string カーブ定義名)
{
	PartsEngine.AddComponentMotionRotateX(パーツ番号, 開始Ｘ回転角度, 終了Ｘ回転角度, 開始時間, 終了時間, カーブ定義名);
}

void Ｐ＿モーションＹ回転角度設定(int パーツ番号, float 開始Ｙ回転角度, float 終了Ｙ回転角度, int 開始時間, int 終了時間, string カーブ定義名)
{
	PartsEngine.AddComponentMotionRotateY(パーツ番号, 開始Ｙ回転角度, 終了Ｙ回転角度, 開始時間, 終了時間, カーブ定義名);
}

void Ｐ＿モーションＺ回転角度設定(int パーツ番号, float 開始Ｚ回転角度, float 終了Ｚ回転角度, int 開始時間, int 終了時間, string カーブ定義名)
{
	PartsEngine.AddComponentMotionRotateZ(パーツ番号, 開始Ｚ回転角度, 終了Ｚ回転角度, 開始時間, 終了時間, カーブ定義名);
}

void Ｐ＿モーション振動設定(int パーツ番号, int 開始幅, int 開始高さ, int 開始時間, int 終了時間)
{
	PartsEngine.AddComponentMotionVibrationSize(パーツ番号, 開始幅, 開始高さ, 開始時間, 終了時間);
}

void Ｐ＿ピクセル判定設定(int パーツ番号, bool ピクセル判定)
{
	PartsEngine.Parts_SetPartsPixelDecide(パーツ番号, ピクセル判定);
}

bool Ｐ＿ピクセル判定設定取得(int パーツ番号)
{
	return PartsEngine.Parts_IsPartsPixelDecide(パーツ番号);
}

void Ｐ＿座標レート設定(int パーツ番号, bool レート設定)
{
	PartsEngine.Parts_SetPosForRate(パーツ番号, レート設定);
}

bool Ｐ＿座標レート設定取得(int パーツ番号)
{
	return PartsEngine.Parts_IsPosForRate(パーツ番号);
}

void Ｐ＿時間初期化許可設定(int パーツ番号, bool 許可, int 状態)
{
	PartsEngine.Parts_SetResetTimerByChangeInputStatus(パーツ番号, 許可, 状態);
}

bool Ｐ＿時間初期化許可取得(int パーツ番号, int 状態)
{
	return PartsEngine.Parts_GetResetTimerByChangeInputStatus(パーツ番号, 状態);
}

void Ｐ＿ドラッグ可能設定(int パーツ番号, bool 可能)
{
	PartsEngine.Parts_SetDrag(パーツ番号, 可能);
}

bool Ｐ＿ドラッグ可能設定取得(int パーツ番号)
{
	return PartsEngine.Parts_GetPartsDrag(パーツ番号);
}

void Ｐ＿オンカーソル効果音設定(int パーツ番号, string 効果音名)
{
	PartsEngine.Parts_SetSoundName(パーツ番号, 効果音名, 2);
}

string Ｐ＿オンカーソル効果音取得(int パーツ番号)
{
	string SoundName;
	PartsEngine.Parts_GetSoundName(パーツ番号, SoundName, 2);
	return SoundName;
}

void Ｐ＿クリック効果音設定(int パーツ番号, string 効果音名)
{
	PartsEngine.Parts_SetSoundName(パーツ番号, 効果音名, 3);
}

string Ｐ＿クリック効果音取得(int パーツ番号)
{
	string SoundName;
	PartsEngine.Parts_GetSoundName(パーツ番号, SoundName, 3);
	return SoundName;
}

void Ｐ＿クリック可能設定(int パーツ番号, bool 選択可能)
{
	PartsEngine.Parts_SetClickable(パーツ番号, 選択可能);
}

bool Ｐ＿クリック可能設定取得(int パーツ番号)
{
	return PartsEngine.Parts_GetPartsClickable(パーツ番号);
}

void Ｐ＿オンカーソル透過設定(int パーツ番号, bool 透過許可)
{
	PartsEngine.Parts_SetPassCursor(パーツ番号, 透過許可);
}

bool Ｐ＿オンカーソル透過設定取得(int パーツ番号)
{
	return PartsEngine.Parts_GetPartsPassCursor(パーツ番号);
}

int Ｐ＿クリック実行(bool キーキャンセル)
{
	return PARTS_WaitForClick(NULL, キーキャンセル);
}

void Ｐ＿アクティビティ実行(string アクティビティ名, DG_PARTS_LoadedActivityHandler dgLoadedObject, DG_PARTS_ReleasingActivityHandler dgReleasingObject, DG_PARTS_IntentActivityHandler dgIntentActivityEvent)
{
	SYS_Activity_RunSingle(アクティビティ名, dgLoadedObject, dgReleasingObject, dgIntentActivityEvent);
}

void Ｐ＿アクティビティリスト実行(array@string アクティビティ名リスト, DG_PARTS_LoadedActivityHandler dgLoadedObject, DG_PARTS_ReleasingActivityHandler dgReleasingObject, DG_PARTS_IntentActivityHandler dgIntentActivityEvent)
{
	SYS_Activity_RunList(アクティビティ名リスト, dgLoadedObject, dgReleasingObject, dgIntentActivityEvent);
}

void Ｐ＿モーション実行(bool 未読既読スキップ)
{
	PARTS_BeginMotion();
	for (; ; )
	{
		PARTS_UpdateMotion(未読既読スキップ);
		AFL_View_Update(未読既読スキップ);
		if (!PARTS_IsMotion())
		{
			break;
		}
	}
	PARTS_EndMotion();
}

void Ｐ＿モーション実行キャンセル可能()
{
	CASClick LButtonClick;
	CASClick RButtonClick;
	CASClick SpaceKeyClick;
	CASClick EnterKeyClick;
	LButtonClick.Init(1, true);
	RButtonClick.Init(2, true);
	SpaceKeyClick.Init(32, true);
	EnterKeyClick.Init(13, true);
	PARTS_BeginMotion();
	for (; ; )
	{
		if (LButtonClick.IsClick(-2147483648) || RButtonClick.IsClick(-2147483648) || SpaceKeyClick.IsClick(-2147483648) || EnterKeyClick.IsClick(-2147483648) || 全文スキップ中確認() || 既読スキップ中確認() || SYS_ホイールバック確認())
		{
			PARTS_EndMotionFociby();
			break;
		}
		PARTS_UpdateMotion(false);
		AFL_View_Update(true);
		if (!PARTS_IsMotion())
		{
			break;
		}
	}
	PARTS_EndMotion();
}

bool Ｐ＿オンカーソル判定(int PartsNumber, int State)
{
	int MouseX;
	int MouseY;
	if (!AFL_Mouse_GetPos(MouseX, MouseY))
	{
		return false;
	}
	return AFL_Parts_IsPointIn(PartsNumber, MouseX, MouseY, State);
}

