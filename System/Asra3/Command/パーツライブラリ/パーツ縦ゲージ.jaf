void Ｐ＿縦ゲージＣＧ設定(int パーツ番号, string ＣＧ名, int 状態)
{
	if (!PartsEngine.Parts_SetVGaugeCG(パーツ番号, ＣＧ名, 状態))
	{
		PARTS_Warning("Ｐ＿縦ゲージＣＧ設定(パーツ番号 = %d, ＣＧ名 = %s, 状態 = %d)\n" % パーツ番号 % ＣＧ名 % 状態);
	}
}

string Ｐ＿縦ゲージＣＧ名取得(int パーツ番号, int 状態)
{
	string Out;
	PartsEngine.Parts_GetVGaugeCG(Out, パーツ番号, 状態);
	return Out;
}

void Ｐ＿縦ゲージ率設定(int パーツ番号, float 分子, float 分母, int 状態)
{
	PartsEngine.Parts_SetVGaugeRate(パーツ番号, 分子, 分母, 状態);
}

float Ｐ＿縦ゲージ分子取得(int パーツ番号, int 状態)
{
	return PartsEngine.Parts_GetVGaugeNumerator(パーツ番号, 状態);
}

float Ｐ＿縦ゲージ分母取得(int パーツ番号, int 状態)
{
	return PartsEngine.Parts_GetVGaugeDenominator(パーツ番号, 状態);
}

void Ｐ＿縦ゲージ表示範囲設定(int パーツ番号, int Ｘ, int Ｙ, int 幅, int 高さ, int 状態)
{
	PartsEngine.Parts_SetVGaugeSurfaceArea(パーツ番号, Ｘ, Ｙ, 幅, 高さ, 状態);
}

void Ｐ＿縦ゲージ表示範囲取得(int パーツ番号, ref int Ｘ, ref int Ｙ, ref int 幅, ref int 高さ, int 状態)
{
	PartsEngine.GetVGaugeSurfaceArea(パーツ番号, Ｘ, Ｙ, 幅, 高さ, 状態);
}

