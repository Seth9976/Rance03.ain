CAEPropertyHScrollBar::CAEPropertyHScrollBar()
{
	this.Init(0, NULL);
}

CAEPropertyHScrollBar::~CAEPropertyHScrollBar()
{
	this.Release();
}

void CAEPropertyHScrollBar::Init(int LayoutID, ref CAEInstanceItem Item)
{
	this.Release();
	if (Item === NULL)
	{
		return;
	}
	this.m_Item <- Item;
	this.m_Panel.Init(LayoutID);
	this.m_Panel.AddKeyDownEvent(this.KeyDownEvent);
	this.m_Panel.AddMouseWheelEvent(this.MouseWheelEvent);
	this.m_Panel.AddChangeTextEvent(this.ChangeTextEvent);
	this.m_Panel.AddMouseClickEvent(this.MouseLClickEvent);
	int ID = this.m_Item.GetID();
	this.m_Panel.AddTextBoxItem("幅", string(AFL_Parts_GetWidth(ID, 1)), false);
	this.m_Panel.AddTextBoxItem("高さ", string(AFL_Parts_GetHeight(ID, 1)), false);
	this.m_Panel.AddTextBoxItem("左ボタンの幅", string(Ｐ＿横スクロールバー＿左ボタン幅取得(ID)), false);
	this.m_Panel.AddTextBoxItem("右ボタンの幅", string(Ｐ＿横スクロールバー＿右ボタン幅取得(ID)), false);
	this.m_Panel.AddTextBoxItem("全体量", string(Ｐ＿横スクロールバー＿全体量取得(ID)), false);
	this.m_Panel.AddTextBoxItem("表示量", string(Ｐ＿横スクロールバー＿表示量取得(ID)), false);
	this.m_Panel.AddTextBoxItem("スクロール位置", string(Ｐ＿横スクロールバー＿スクロール位置取得(ID)), false);
	ref CAEPropertyItem PanelItem = this.m_Panel.AddTextBoxItem("スクロールレート", Ｐ＿横スクロールバー＿スクロールレート取得(ID).String(), false);
	this.m_Panel.AddTextBoxItem("ボタンクリック移動量", string(Ｐ＿横スクロールバー＿ボタンクリック移動量取得(ID)), false);
	this.m_Panel.AddTextBoxItem("ＣＧ名", Ｐ＿横スクロールバー＿ＣＧ名取得(ID), true);
	this.m_Panel.AddTextBoxItem("フラット名", Ｐ＿横スクロールバー＿フラット名取得(ID), true);
	PanelItem.SetTextBoxReadOnly(true);
}

void CAEPropertyHScrollBar::Release()
{
	this.m_dgMouseWheelEvent.Clear();
	this.m_dgKeyDownEvent.Clear();
	this.m_Item <- NULL;
	this.m_Panel.Release();
}

void CAEPropertyHScrollBar::KeyDownEvent(int ID, int KeyID)
{
	this.m_dgKeyDownEvent(ID, KeyID);
}

void CAEPropertyHScrollBar::MouseWheelEvent(int ID, int Forward, int Back)
{
	this.m_dgMouseWheelEvent(ID, Forward, Back);
}

void CAEPropertyHScrollBar::ChangeTextEvent(int ID)
{
	ref CAEPropertyItem Item = this.m_Panel.GetItem(ID);
	if (Item === NULL)
	{
		return;
	}
	int PartsID = this.m_Item.GetID();
	if (Item.GetLabel() == "幅")
	{
		Ｐ＿横スクロールバー＿サイズ設定(PartsID, Item.GetTextBoxInt(), AFL_Parts_GetHeight(PartsID, 1));
	}
	else if (Item.GetLabel() == "高さ")
	{
		Ｐ＿横スクロールバー＿サイズ設定(PartsID, AFL_Parts_GetWidth(PartsID, 1), Item.GetTextBoxInt());
	}
	else if (Item.GetLabel() == "左ボタンの幅")
	{
		Ｐ＿横スクロールバー＿左ボタン幅設定(PartsID, Item.GetTextBoxInt());
	}
	else if (Item.GetLabel() == "右ボタンの幅")
	{
		Ｐ＿横スクロールバー＿右ボタン幅設定(PartsID, Item.GetTextBoxInt());
	}
	else if (Item.GetLabel() == "全体量")
	{
		Ｐ＿横スクロールバー＿全体量設定(PartsID, Item.GetTextBoxInt());
	}
	else if (Item.GetLabel() == "表示量")
	{
		Ｐ＿横スクロールバー＿表示量設定(PartsID, Item.GetTextBoxInt());
	}
	else if (Item.GetLabel() == "スクロール位置")
	{
		Ｐ＿横スクロールバー＿スクロール位置設定(PartsID, Item.GetTextBoxInt());
		this.m_Panel.GetItemByLabel("スクロールレート").SetTextBoxText(Ｐ＿横スクロールバー＿スクロールレート取得(PartsID).String());
	}
	else if (Item.GetLabel() == "ボタンクリック移動量")
	{
		Ｐ＿横スクロールバー＿ボタンクリック移動量設定(PartsID, Item.GetTextBoxInt());
	}
	else if (Item.GetLabel() == "ＣＧ名")
	{
		Ｐ＿横スクロールバー＿ＣＧ名設定(PartsID, Item.GetTextBoxText());
	}
	else if (Item.GetLabel() == "フラット名")
	{
		Ｐ＿横スクロールバー＿フラット名設定(PartsID, Item.GetTextBoxText());
	}
	if (Item.GetLabel() == "全体量" || Item.GetLabel() == "表示量")
	{
		this.m_Panel.GetItemByLabel("スクロール位置").SetTextBoxText(string(Ｐ＿横スクロールバー＿スクロール位置取得(PartsID)));
		this.m_Panel.GetItemByLabel("スクロールレート").SetTextBoxText(Ｐ＿横スクロールバー＿スクロールレート取得(PartsID).String());
	}
}

void CAEPropertyHScrollBar::MouseLClickEvent(int ID, int MouseX, int MouseY)
{
	ref CAEPropertyItem Item = this.m_Panel.GetItem(ID);
	if (Item === NULL)
	{
		return;
	}
}

void CAEPropertyHScrollBar::SelecteTextEvent(int ID, string Name)
{
	ref CAEPropertyItem Item = this.m_Panel.GetItem(ID);
	if (Item === NULL)
	{
		return;
	}
}

void CAEPropertyHScrollBar::AddKeyDownEvent(DG_KeyDownHandler DelegateObject)
{
	this.m_dgKeyDownEvent += DelegateObject;
}

void CAEPropertyHScrollBar::EraseKeyDownEvent(DG_KeyDownHandler DelegateObject)
{
	this.m_dgKeyDownEvent -= DelegateObject;
}

void CAEPropertyHScrollBar::AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject)
{
	this.m_dgMouseWheelEvent += DelegateObject;
}

void CAEPropertyHScrollBar::EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject)
{
	this.m_dgMouseWheelEvent -= DelegateObject;
}

