CASDebugVideoMemorySize::CASDebugVideoMemorySize()
{
	this.m_Show = false;
	this.m_Text.Create();
	PARTS_SetWantSaveBackScene(this.m_Text.GetPartsNumber(), false);
	this.SetFont(0, 12, 24);
}

void CASDebugVideoMemorySize::SetFont(int Type, int Size, int Size2)
{
	this.m_FontSize = Size;
	this.m_FontSize2 = Size2;
	this.m_TextProperty.SetType(Type);
	this.m_TextProperty.SetSize(Size);
	this.m_TextProperty.SetColor(CF_CASColor(255, 255, 255, 255));
	this.m_TextProperty.SetEdgeWeight(1.0);
	this.m_TextProperty.SetEdgeColor(CF_CASColor(0, 0, 0, 255));
	this.m_Text.SetFontProperty(this.m_TextProperty, 1);
}

void CASDebugVideoMemorySize::Reset()
{
	this.m_UseSize = 0;
	this.m_UseMaxSize = 0;
}

void CASDebugVideoMemorySize::SetShow(bool Show)
{
	this.m_Show = Show;
}

bool CASDebugVideoMemorySize::GetShow()
{
	return this.m_Show;
}

void CASDebugVideoMemorySize::Update(bool IsShowLeft, int PosY)
{
	Ｐ＿親設定(this.m_Text.GetPartsNumber(), PARTS_GetSystemOverlayLayer());
	int PrevUseSize = this.m_UseSize;
	int PrevUseMaxSize = this.m_UseMaxSize;
	this.m_UseSize = SystemService.Debug_GetUseVideoMemorySize();
	this.m_UseMaxSize = Math.Max(this.m_UseMaxSize, this.m_UseSize);
	if (this.IsCompulsorilyShow())
	{
		this.SetShow(true);
		this.m_TextProperty.SetSize(this.m_FontSize2);
		this.m_TextProperty.SetColor(CF_CASColor(255, 0, 0, 255));
	}
	bool IsShow = this.GetShow() && !AFL_Config_GetDisavleDebugInfo();
	this.m_Text.SetShow(IsShow);
	this.m_Text.SetOriginPosMode(IsShowLeft ? 1 : 3);
	this.m_Text.SetPos(IsShowLeft ? 0 : AFL_View_GetWidth(), PosY);
	this.m_Text.SetZ(32767);
	if (!IsShow)
	{
		return;
	}
	if (PrevUseSize == this.m_UseSize && PrevUseMaxSize == this.m_UseMaxSize && this.m_Timer.Get() < 1000)
	{
		return;
	}
	this.m_Timer.Reset();
	this.m_Text.SetFontProperty(this.m_TextProperty, 1);
	this.m_Text.SetText("V:%4d/%4d" % (this.m_UseSize / 1024 / 1024) % (this.m_UseMaxSize / 1024 / 1024), 1);
}

bool CASDebugVideoMemorySize::IsCompulsorilyShow()
{
	return this.m_UseSize >= 167772160;
}

int CASDebugVideoMemorySize::GetBottom()
{
	int Number = this.m_Text.GetPartsNumber();
	return AFL_Parts_GetUpperLeftPosY(Number, 1) + AFL_Parts_GetHeight(Number, 1);
}

