class sact_text_metrics_t
{
public:
	int nColorR;
	int nColorG;
	int nColorB;
	int nSize;
	int nWeight;
	int nFace;
	int nShadowPixelL;
	int nShadowPixelU;
	int nShadowPixelR;
	int nShadowPixelD;
	int nShadowColorR;
	int nShadowColorG;
	int nShadowColorB;

	sact_text_metrics_t();
};

class SYS_選択_result_t
{
public:
	int 値;
	sys_btn_fnc_t fnc;
};

class 文字入力エリア_t
{
public:
	int Ｘ;
	int Ｙ;
	int Ｚ;
	string ＣＧ名;
	int 幅;
	int 高;
	int 塗Ｒ;
	int 塗Ｇ;
	int 塗Ｂ;
	int 塗率;
	int 枠タイプ;
	int 枠Ｒ;
	int 枠Ｇ;
	int 枠Ｂ;
	int 文字Ｘ;
	int 文字Ｙ;
	int フォント;
	int 文字サイズ;
	int 文字Ｒ;
	int 文字Ｇ;
	int 文字Ｂ;
	int 文字飾上;
	int 文字飾右;
	int 文字飾下;
	int 文字飾左;
	int 文字飾Ｒ;
	int 文字飾Ｇ;
	int 文字飾Ｂ;
	int m_nMaxTextLengthSJIS;

	文字入力エリア_t();
};

class 選択エリア_字_t
{
public:
	int フォント;
	int 文字Ｒ;
	int 文字Ｇ;
	int 文字Ｂ;
	int 文字飾上;
	int 文字飾右;
	int 文字飾下;
	int 文字飾左;
	int 文字飾Ｒ;
	int 文字飾Ｇ;
	int 文字飾Ｂ;
};

class 選択エリア_t
{
public:
	int Ｓ番号;
	int Ｘ;
	int Ｙ;
	int Ｚ;
	string ＣＧ名;
	int 幅フラグ;
	int 高フラグ;
	int 座標フラグ;
	int 枠太;
	int 幅;
	int 高;
	int 塗Ｒ;
	int 塗Ｇ;
	int 塗Ｂ;
	int 塗率;
	int 枠タイプ;
	int 枠Ｒ;
	int 枠Ｇ;
	int 枠Ｂ;
	int 余白上;
	int 余白右;
	int 余白下;
	int 余白左;
	int 文字サイズ;
	選択エリア_字_t _選択可能字;
	選択エリア_字_t _選択不可字;
	int 文字配置;
	int 行間;
	int カーソルタイプ;
	int カーソルＲ;
	int カーソルＧ;
	int カーソルＢ;
	int カーソル率;
	int 選択文字Ｒ;
	int 選択文字Ｇ;
	int 選択文字Ｂ;
	int 選択文字飾上;
	int 選択文字飾右;
	int 選択文字飾下;
	int 選択文字飾左;
	int 選択文字飾Ｒ;
	int 選択文字飾Ｇ;
	int 選択文字飾Ｂ;
	string 音決定;
	string 音無効;
	string 音移動１;
	string 音移動２;
	float m_fBoldWeight;
	float m_fSelectedBoldWeight;
	float m_fUnselectableBoldWeight;
	int m_nCharSpace;
	int m_nSelectedCharSpace;
	int m_nUnselectableCharSpace;
	string CursorCG;
	int nCursorOffsetX;
	int nCursorOffsetY;
	int nCursorOffsetZ;

	選択エリア_t();
};

class 選択肢_t
{
public:
	int 番号;
	string テキスト;
	int キーコード;
};

class セーブ２_t
{
public:
	int sys年;
	int sys月;
	int sys日;
	int sys曜;
	int sys時;
	int sys分;
	int sys秒;
	string ゲーム時間文字列;
	string コメント;
	int PlayMinuteTime;
};

class BackSE_t
{
public:
	int Group;
	int FadeChannel;
	int PlayIndex;
	array@string PlayList;
	bool bStop;
	bool bRunSoundFadeByVoice;
};

class ADVSceneData
{
public:
	ADVSoundData m_SoundData;
	string m_最終音声名;
	ADVMessageWindowData m_MessageWindowData;
	array@int m_PartsEngineData;
};

class ADVSoundData
{
public:
	ADVBGMData m_BGM;
	array@ADVBGMData m_LoopSE;
	array@BackSE_t m_サウンド再生リスト;
};

class ADVBGMData
{
public:
	string m_Name;
	int m_Pause;
	float m_Volume;
	int m_LoopCount;
};

class ADVMessageWindowData
{
public:
	int m_ActiveMessageWindowNumber;
	array@int m_MessageTextPartsNumberList;
	array@CASColor m_MessageTextFontColorList;
	array@int m_MessageWindowPartsNumberList;
	CMessageTextModel m_MessageTextModel;
};

class CASClick
{
public:
	int m_nKey;
	int m_nKeyDownOnObject;
	bool m_bKeyDown;
	bool m_bFirstClickOff;
	bool m_Trigger;
	bool m_bKeyPress;
	bool m_bKeyDownLoop;
	CASTimer m_Timer;
	int m_nPressFirstTime;
	int m_nPressTime;

	CASClick();
	void Init(int nKey, bool FirstKeyDownCancel);
	void Reset(bool FirstKeyDownCancel);
	bool IsFirstClick();
	bool IsClick(int nOnObject);
	bool IsKeyDown();
	bool IsKeyTrigger();
	bool IsKeyPress(int nOnObject);
};

class CASJoyClick
{
public:
	int m_nKey;
	int m_nKeyDownOnObject;
	bool m_bKeyDown;
	bool m_bFirstClickOff;
	bool m_Trigger;
	int m_DeviceNumber;
	bool m_bKeyPress;
	bool m_bKeyDownLoop;
	CASTimer m_Timer;
	int m_nPressFirstTime;
	int m_nPressTime;

	CASJoyClick();
	void Init(int nKey, bool FirstKeyDownCancel);
	void ChangeKey(int nKey);
	void Reset(bool FirstKeyDownCancel);
	bool IsFirstClick();
	bool IsClick(int nOnObject);
	bool IsKeyDown();
	bool IsKeyTrigger();
	bool IsKeyPress();
};

class CASJoyClickAssignedKey
{
public:
	CASJoyClick m_JoyClick;
	int m_AssignedCode;

	CASJoyClickAssignedKey();
	~CASJoyClickAssignedKey();
	void UpdateAssignedKey();
	void Init(int AssignedCode, bool FirstKeyDownCancel);
	void Reset(bool FirstKeyDownCancel);
	bool IsFirstClick();
	bool IsClick(int nOnObject);
	bool IsKeyDown();
	bool IsKeyTrigger();
	bool IsKeyPress();
};

class CASJoypadCallback
{
public:
	sys_btn_fnc_t m_Callback;

	bool Empty();
	void SetCallback(sys_btn_fnc_t Callback);
	sys_btn_fnc_t GetCallback();
};

class CASTimer
{
public:
	int m_nHandle;

	CASTimer();
	~CASTimer();
	void Reset();
	int Get();
	void SetPassTime(int PassTime);
};

class CASTimerImp
{
public:
	int m_nBeginTime;
	int m_nCurrentTime;

	void Reset();
	int Get();
	void SetPassTime(int PassTime);
	void UpdateCurrentTime();
	void Rebuild(int nCurrentTime);
};

class CASTimerManager
{
public:
	array@CASTimerImp m_TimerImpList;
	array@int m_CreatedFlagList;

	CASTimerManager();
	~CASTimerManager();
	int CreateHandle();
	void ReleaseHandle(int nHandle);
	void GC();
	ref CASTimerImp GetObject(int nHandle);
	bool CheckHandle(int nHandle);
	void UpdateCurrentTime();
	void Rebuild();
};

class CASColor
{
public:
	int m_nR;
	int m_nG;
	int m_nB;
	int m_nA;

	void Set(int nR, int nG, int nB, int nA);
	int GetR();
	int GetG();
	int GetB();
	int GetA();
	bool Equal(ref CASColor Obj);
};

class CASPos
{
public:
	int m_nX;
	int m_nY;

	void Set(int nX, int nY);
	int GetX();
	int GetY();
};

class CASRect
{
public:
	int m_nX;
	int m_nY;
	int m_nWidth;
	int m_nHeight;

	void Set(int nX, int nY, int nWidth, int nHeight);
	int GetX();
	int GetY();
	int GetWidth();
	int GetHeight();
	bool IsIn(int nX, int nY);
};

class CASCharSpriteProperty
{
public:
	int m_nType;
	int m_nSize;
	CASColor m_Color;
	float m_fBoldWeight;
	float m_fEdgeWeight;
	CASColor m_EdgeColor;

	CASCharSpriteProperty();
	void SetType(int nType);
	void SetSize(int nSize);
	void SetColor(CASColor Color);
	void SetBoldWeight(float fBoldWeight);
	void SetEdgeWeight(float fEdgeWeight);
	void SetEdgeColor(CASColor EdgeColor);
	int GetType();
	int GetSize();
	CASColor GetColor();
	float GetBoldWeight();
	float GetEdgeWeight();
	CASColor GetEdgeColor();
	bool Equal(ref CASCharSpriteProperty Obj);
	void SetProperty();
	int GetPixelWidth();
	int GetPixelHeight();
	int GetFontWidth(string Char);
};

class CASConstructionProcess
{
public:
	int m_Command;
	int m_InterpolationType;
	int m_nSrcX;
	int m_nSrcY;
	int m_nSrcWidth;
	int m_nSrcHeight;
	int m_nDestX;
	int m_nDestY;
	int m_nDestX2;
	int m_nDestY2;
	int m_nDestWidth;
	int m_nDestHeight;
	int m_nR;
	int m_nG;
	int m_nB;
	int m_nA;
	int m_nR2;
	int m_nG2;
	int m_nB2;
	int m_CharSpace;
	int m_LineSpace;
	CASCharSpriteProperty m_Font;
	string m_Text;
	string m_CGName;
	bool m_FullSize;

	CASConstructionProcess();
	void Clear();
	void SetCreate(int nWidth, int nHeight);
	void SetCreatePixelOnly(int nWidth, int nHeight);
	void SetCreateCG(string CGName);
	void SetFill(int nX, int nY, int nWidth, int nHeight, int nR, int nG, int nB);
	void SetFillAlphaColor(int nX, int nY, int nWidth, int nHeight, int nR, int nG, int nB, int nA);
	void SetFillAMap(int nX, int nY, int nWidth, int nHeight, int nAlpha);
	void SetFillWithAlpha(int nX, int nY, int nWidth, int nHeight, int nR, int nG, int nB, int nA);
	void SetFillGradationHorizon(int nX, int nY, int nWidth, int nHeight, int nTopR, int nTopG, int nTopB, int nBottomR, int nBottomG, int nBottomB);
	void SetDrawRect(int nX, int nY, int nWidth, int nHeight, int nR, int nG, int nB);
	void SetCutCGBlend(string CGName, int DestX, int DestY, int SrcX, int SrcY, int DestWidth, int DestHeight, int InterpolationType);
	void SetCutCGCopy(string CGName, int DestX, int DestY, int SrcX, int SrcY, int DestWidth, int DestHeight, int InterpolationType);
	void SetCutCGScaleBlend(string CGName, int DestX, int DestY, int DestWidth, int DestHeight, int SrcX, int SrcY, int SrcWidth, int SrcHeight, int InterpolationType);
	void SetCutCGScaleCopy(string CGName, int DestX, int DestY, int DestWidth, int DestHeight, int SrcX, int SrcY, int SrcWidth, int SrcHeight, int InterpolationType);
	void SetGrayFilter(int nX, int nY, int nWidth, int nHeight, bool FullSize);
	void SetAddFilter(int nX, int nY, int nWidth, int nHeight, int nR, int nG, int nB, bool FullSize);
	void SetMulFilter(int nX, int nY, int nWidth, int nHeight, int nR, int nG, int nB, bool FullSize);
	void SetDrawLine(int nX1, int nY1, int nX2, int nY2, int nR, int nG, int nB, int nA);
	void SetDrawText(int nX, int nY, string Text, ref CASCharSpriteProperty Property, int CharSpace, int LineSpace);
	void SetCopyText(int nX, int nY, string Text, ref CASCharSpriteProperty Property, int CharSpace, int LineSpace);
	void SetCutCGAlphaBlend(string CGName, int DestX, int DestY, int SrcX, int SrcY, int DestWidth, int DestHeight, int InterpolationType);
	void SetCutCGScaleAlphaBlend(string CGName, int DestX, int DestY, int DestWidth, int DestHeight, int SrcX, int SrcY, int SrcWidth, int SrcHeight, int InterpolationType);
	void SetCutCGOnlyAlpha(string CGName, int DestX, int DestY, int SrcX, int SrcY, int DestWidth, int DestHeight, int InterpolationType);
	void SetCutCGScaleOnlyAlpha(string CGName, int DestX, int DestY, int DestWidth, int DestHeight, int SrcX, int SrcY, int SrcWidth, int SrcHeight, int InterpolationType);
	int GetCommand();
	int GetInterpolationType();
	int GetSrcX();
	int GetSrcY();
	int GetSrcWidth();
	int GetSrcHeight();
	int GetDestX();
	int GetDestY();
	int GetDestX2();
	int GetDestY2();
	int GetDestWidth();
	int GetDestHeight();
	int GetR();
	int GetG();
	int GetB();
	int GetA();
	int GetR2();
	int GetG2();
	int GetB2();
	int GetCharSpace();
	int GetLineSpace();
	ref CASCharSpriteProperty GetFontProperty();
	string GetText();
	string GetCGName();
	bool IsFullSize();
	void SetCommand(int Type);
	void SetInterpolationType(int Type);
	void SetSrcX(int PosX);
	void SetSrcY(int PosY);
	void SetSrcWidth(int Width);
	void SetSrcHeight(int Height);
	void SetDestX(int PosX);
	void SetDestY(int PosY);
	void SetDestX2(int PosX);
	void SetDestY2(int PosY);
	void SetDestWidth(int Width);
	void SetDestHeight(int Height);
	void SetR(int Red);
	void SetG(int Green);
	void SetB(int Blue);
	void SetA(int Alpha);
	void SetR2(int Red);
	void SetG2(int Green);
	void SetB2(int Blue);
	void SetCharSpace(int Space);
	void SetLineSpace(int Space);
	void SetFontProperty(ref CASCharSpriteProperty Property);
	void SetText(string Text);
	void SetCGName(string Name);
	void SetFullSize(bool Full);
};

class _CButtonCgInfo
{
public:
	int _m_x;
	int _m_y;
	int _m_z;
	string _m_cg_pln;
	string _m_cg_hlt;
	string _m_cg_inv;
	string _m_cg_chk;
	string _m_cg_hlt_chk;
	string _m_click_sound;
	string _m_cursor_sound;

	void _SetCgPln(string _cg);
	void _SetCgHlt(string _cg);
	void _SetCgInv(string _cg);
	void _SetCgChk(string _cg);
	void _SetCgHltChk(string _cg);
	void _SetClickSound(string _click);
	void _SetCursorSound(string _cursor);
	bool _IsSetCgPln();
	bool _IsSetCgHlt();
	bool _IsSetCgInv();
	bool _IsSetCgChk();
	bool _IsSetCgHltChk();
	int _GetX();
	int _GetY();
	int _GetZ();
	string _GetClickSound();
	string _GetCursorSound();
	void _SetCg(ref string _dst, string _src);
	_CButtonCgInfo();
	void _SetPos(int _x, int _y);
	void _SetZ(int _z);
	string _GetCg(bool _hilite, bool _check, bool _invalid);
};

class SASMapIntIntPair
{
public:
	int Key;
	int Value;

	void Set(ref int k, ref int v);
	int Compare(ref int k);
};

class CASMapIntInt
{
public:
	array@SASMapIntIntPair m_List;

	CASMapIntInt();
	~CASMapIntInt();
	int GetNearIndex(ref int Key);
	int GetIndex(ref int Key);
	void Set(int Key, int Value);
	int Get(int Key);
	void Remove(int Key);
	bool IsExist(int Key);
	void Clear();
};

class SASMapIntStringPair
{
public:
	int Key;
	string Value;

	void Set(ref int k, ref string v);
	int Compare(ref int k);
};

class CASMapIntString
{
public:
	array@SASMapIntStringPair m_List;

	CASMapIntString();
	~CASMapIntString();
	int GetNearIndex(ref int Key);
	int GetIndex(ref int Key);
	void Set(int Key, string Value);
	string Get(int Key);
	void Remove(int Key);
	bool IsExist(int Key);
	void Clear();
};

class SASMapIntFloatPair
{
public:
	int Key;
	float Value;

	void Set(ref int k, ref float v);
	int Compare(ref int k);
};

class CASMapIntFloat
{
public:
	array@SASMapIntFloatPair m_List;

	CASMapIntFloat();
	~CASMapIntFloat();
	int GetNearIndex(ref int Key);
	int GetIndex(ref int Key);
	void Set(int Key, float Value);
	float Get(int Key);
	void Remove(int Key);
	bool IsExist(int Key);
	void Clear();
};

class SASMapIntBoolPair
{
public:
	int Key;
	bool Value;

	void Set(ref int k, ref bool v);
	int Compare(ref int k);
};

class CASMapIntBool
{
public:
	array@SASMapIntBoolPair m_List;

	CASMapIntBool();
	~CASMapIntBool();
	int GetNearIndex(ref int Key);
	int GetIndex(ref int Key);
	void Set(int Key, bool Value);
	bool Get(int Key);
	void Remove(int Key);
	bool IsExist(int Key);
	void Clear();
};

class SASMapStringIntPair
{
public:
	string Key;
	int Value;

	void Set(ref string k, ref int v);
	int Compare(ref string k);
};

class CASMapStringInt
{
public:
	array@SASMapStringIntPair m_List;

	CASMapStringInt();
	~CASMapStringInt();
	int GetNearIndex(ref string Key);
	int GetIndex(ref string Key);
	void Set(string Key, int Value);
	int Get(string Key);
	void Remove(string Key);
	bool IsExist(string Key);
	void Clear();
};

class SASMapStringStringPair
{
public:
	string Key;
	string Value;

	void Set(ref string k, ref string v);
	int Compare(ref string k);
};

class CASMapStringString
{
public:
	array@SASMapStringStringPair m_List;

	CASMapStringString();
	~CASMapStringString();
	int GetNearIndex(ref string Key);
	int GetIndex(ref string Key);
	void Set(string Key, string Value);
	string Get(string Key);
	void Remove(string Key);
	bool IsExist(string Key);
	void Clear();
};

class SASMapStringFloatPair
{
public:
	string Key;
	float Value;

	void Set(ref string k, ref float v);
	int Compare(ref string k);
};

class CASMapStringFloat
{
public:
	array@SASMapStringFloatPair m_List;

	CASMapStringFloat();
	~CASMapStringFloat();
	int GetNearIndex(ref string Key);
	int GetIndex(ref string Key);
	void Set(string Key, float Value);
	float Get(string Key);
	void Remove(string Key);
	bool IsExist(string Key);
	void Clear();
};

class SASMapStringBoolPair
{
public:
	string Key;
	bool Value;

	void Set(ref string k, ref bool v);
	int Compare(ref string k);
};

class CASMapStringBool
{
public:
	array@SASMapStringBoolPair m_List;

	CASMapStringBool();
	~CASMapStringBool();
	int GetNearIndex(ref string Key);
	int GetIndex(ref string Key);
	void Set(string Key, bool Value);
	bool Get(string Key);
	void Remove(string Key);
	bool IsExist(string Key);
	void Clear();
};

class CASParts
{
public:
	int m_PartsNumber;

	CASParts();
	~CASParts();
	void Create();
	void Release();
	bool IsExist();
	int GetPartsNumber();
	void SetState(int State);
	int GetState();
	void SetCG(string CGName, int State);
	void SetCGSurfaceArea(int X, int Y, int Width, int Height, int State);
	void SetLoopCG(string CGName, int BeginNumber, int Numof, int Time, int State);
	void SetText(string Text, int State);
	void SetFontProperty(ref CASCharSpriteProperty Property, int State);
	void SetFont(int Type, int State);
	void SetFontSize(int Size, int State);
	void SetFontBoldWeight(float Weight, int State);
	void SetFontEdgeWeight(float Weight, int State);
	void SetFontColor(int ColorR, int ColorG, int ColorB, int State);
	void SetFontEdgeColor(int ColorR, int ColorG, int ColorB, int State);
	void SetFontCharSpace(int Space, int State);
	void SetTextSurfaceArea(int X, int Y, int Width, int Height, int State);
	void SetNumeralCG(string CGName, int State);
	void SetNumeralNumber(int Number, int State);
	void SetRectangleDetection(int Width, int Height);
	void SetFlat(string FlatFileName);
	int GetFlatCurrentFrameNumber();
	void BackFlatBeginFrame();
	void StepFlatFinalFrame();
	bool Create3DLayerPluginID(int State);
	int Get3DLayerPluginID(int State);
	bool Release3DLayerPluginID(int State);
	void SetPos(int X, int Y);
	void SetZ(int Z);
	void SetZByBaseZ(int Z, int BaseZ);
	void SetShow(bool Show);
	void SetAlpha(int Alpha);
	void SetAddColor(int Red, int Green, int Blue);
	void SetMultipleColor(int Red, int Green, int Blue);
	void SetOriginPosMode(int OriginPosMode);
	void SetParentParts(ref CASParts ParentParts);
	void SetMessageWindowShowLink(bool ShowLink);
	void SetClickable(bool Clickable);
	bool IsShow();
	int GetX();
	int GetY();
	int GetAlpha();
	int GetWidth(int State);
	int GetHeight(int State);
	void SetOnCursorSoundName(string Name);
	void SetClickSoundName(string Name);
};

class CASPartsLayer
{
public:
	int m_LayerID;
	int m_PrevLayerID;

	CASPartsLayer();
	~CASPartsLayer();
	int Add(int ID);
	int AddTopLayer();
	void Erase();
	int GetID();
	int GetIndex();
	void Active();
};

class CAS3DInstance
{
public:
	ref CAS3DLayer m_Layer;
	int m_InstanceNumber;

	CAS3DInstance();
	~CAS3DInstance();
	bool Create(ref CAS3DLayer Layer);
	void Release();
	int GetInstance();
	bool SetType(int nType);
	bool Save(string FileName);
	bool Load(string Name);
	bool IsExistData(string Name);
	string GetName();
	bool SetPos(float fX, float fY, float fZ);
	bool SetPosX(float fX);
	bool SetPosY(float fY);
	bool SetPosZ(float fZ);
	float GetPosX();
	float GetPosY();
	float GetPosZ();
	bool SetAngle(float fAngle);
	bool SetAngleP(float fAngleP);
	bool SetAngleB(float fAngleB);
	float GetAngle();
	float GetAngleP();
	float GetAngleB();
	bool SetScale(float fScale);
	float GetScale();
	bool SetZBias(float fZBias);
	float GetZBias();
	bool SetVertexPos(int nIndex, float fX, float fY, float fZ);
	bool SetVertexUV(int Index, float U, float V);
	bool SetDiffuse(float fR, float fG, float fB);
	bool GetDiffuse(ref float ColorR, ref float ColorG, ref float ColorB);
	bool SetAmbient(float Red, float Green, float Blue);
	bool GetAmbient(ref float ColorR, ref float ColorG, ref float ColorB);
	bool SetGlobeDiffuse(float fR, float fG, float fB);
	bool SetSpecular(float fSpecular);
	bool SetAlpha(float Alpha);
	float GetAlpha();
	bool SetGrayscaleRate(float GrayscaleRate);
	float GetGrayscaleRate();
	bool SetAttenuationNear(float fNear);
	bool SetAttenuationFar(float fFar);
	bool SetShow(bool bFlag);
	bool IsShow();
	bool SetDrawShadow(bool bFlag);
	bool SetDrawBackShadow(bool bFlag);
	bool SetMakeShadow(bool bFlag);
	bool SetDrawBump(bool bFlag);
	bool GetDrawShadow();
	bool GetDrawBackShadow();
	bool GetDrawMakeShadow();
	bool GetDrawBump();
	bool SetDrawParam(int DrawParam, int Value);
	int GetMotionState();
	float GetMotionFrame();
	bool LoadMotion(string Name);
	bool IsExistMotion(string MotionName);
	bool SetMotionFrame(float fFrame);
	bool SetMotionState(int nState);
	bool SetMotionFrameRange(float fBeginFrame, float fEndFrame);
	bool SetMotionLoopFrameRange(float fBeginFrame, float fEndFrame);
	bool LoadNextMotion(string Name);
	bool SetNextMotionState(int nState);
	bool SetNextMotionFrame(float fFrame);
	bool SetNextMotionFrameRange(float fBeginFrame, float fEndFrame);
	bool SetNextMotionLoopFrameRange(float fBeginFrame, float fEndFrame);
	bool SetMotionBlendRate(float fRate);
	bool SetMotionBlend(bool bMotionBlend);
	bool IsMotionBlend();
	bool SwapMotion();
	bool FreeNextMotion();
	int GetNumofMaterial();
	bool GetMaterialName(int nNum, ref string Name);
	float GetMaterialParam(int nMaterial, int nType);
	bool SetMaterialParam(int nMaterial, int nType, float fParam);
	bool SaveAddMaterialData();
	bool SetPointPos(int nIndex, float fX, float fY, float fZ);
	bool GetPointPos(int nIndex, ref float pfX, ref float pfY, ref float pfZ);
	bool SetColumnPos(float fX, float fY, float fZ);
	bool SetColumnHeight(float fHeight);
	bool SetColumnRadius(float fRadius);
	bool SetColumnAngle(float fAngle);
	bool SetColumnAngleP(float fAngleP);
	bool SetColumnAngleB(float fAngleB);
	bool GetColumnPos(ref float fX, ref float fY, ref float fZ);
	float GetColumnHeight();
	float GetColumnRadius();
	float GetColumnAngle();
	float GetColumnAngleP();
	float GetColumnAngleB();
	bool GetDrawColumn();
	bool SetDrawColumn(bool bDraw);
	bool SetTarget(int nIndex, int nTarget);
	int GetTarget(int nIndex);
	float GetFPS();
	bool SetFPS(float fFPS);
	int GetNumofBone();
	bool GetBoneName(int BoneIndex, ref string pIName);
	bool GetBoneParentIndex(int BoneIndex, ref int pParentBoneIndex);
	int GetBoneIndex(string pIName);
	bool TransLocalPosToWorldPosByBone(int nBone, CASVector3D OffsetPos, ref CASVector3D ResultPos);
	bool SaveBoneFile();
	bool IsBoneCanIK(int BoneIndex);
	bool SetBoneCanIK(int BoneIndex, bool CanIK);
	bool GetBoneEulerAngle(int BoneIndex, ref CASVector3D EulerAngle);
	bool GetBoneMinEulerAngle(int BoneIndex, ref CASVector3D EulerAngle);
	bool GetBoneMaxEulerAngle(int BoneIndex, ref CASVector3D EulerAngle);
	bool SetBoneMinEulerAngle(int BoneIndex, CASVector3D EulerAngle);
	bool SetBoneMaxEulerAngle(int BoneIndex, CASVector3D EulerAngle);
	bool SetBoneMass(int BoneIndex, float Mass);
	bool SetBoneAirResistance(int BoneIndex, float AirResistance);
	bool SetBoneRestitutionCoefficient(int BoneIndex, float RestitutionCoefficient);
	float GetBoneMass(int BoneIndex);
	float GetBoneAirResistance(int BoneIndex);
	float GetBoneRestitutionCoefficient(int BoneIndex);
	int GetNumofBoneCollisionShapeList();
	int GetBoneCollisionShapeType(int Index);
	bool GetBoneCollisionShapePoint(int Index, ref CASVector3D Point);
	bool GetBoneCollisionShapePoint2(int Index, ref CASVector3D Point);
	float GetBoneCollisionShapeRadius(int Index);
	int GetBoneCollisionShapeLinkedBoneIndex(int Index);
	bool SetBoneCollisionShapeType(int Index, int Type);
	bool SetBoneCollisionShapePoint(int Index, CASVector3D Point);
	bool SetBoneCollisionShapePoint2(int Index, CASVector3D Point);
	bool SetBoneCollisionShapeRadius(int Index, float Radius);
	bool SetBoneCollisionShapeLinkedBoneIndex(int Index, int BoneIndex);
	bool AddBoneCollisionShape();
	bool EraseBoneCollisionShape(int Index);
	int GetNumofPolygon();
	int GetNumofVertex();
	int GetNumofNormal();
	int GetNumofMesh();
	bool GetMeshName(int MeshNumber, ref string pIName);
	int GetMeshMaterialIndex(int MeshNumber);
	int GetMeshMaterialID(int MeshNumber);
	int GetMeshNumofPolygon(int MeshNumber);
	bool IsMeshAlphaBlending(int MeshNumber);
	int GetTextureMemorySize();
	string GetInfoText();
	string GetMaterialInfoText();
	bool CalcHeightDetection(float X, float Z, ref float Height);
	void SetDrawEdge(bool DrawEdge);
	bool IsDrawEdge();
	float GetShadowVolumeBoneRadius();
	bool SetShadowVolumeBoneRadius(float fRadius);
	bool SetCircleShadowRadius(float CircleShadowRadius);
	float GetCircleShadowRadius();
	bool LoadLightParam();
	bool StoreLightParam();
	bool SetUseMagSpeed(bool UseMagSpeed);
	bool IsUseMagSpeed();
	bool GetDebugDrawShadowVolume();
	bool SetDebugDrawShadowVolume(bool bFlag);
	bool CreateDebugBoneList(ref CAS3DInstance BoneInstance, int OnCursorIndex, int SelectedIndex);
	bool CreateDebugBoneCollision(ref CAS3DInstance BoneInstance, int OnCursorIndex, int SelectedIndex);
	bool SaveEffect();
	bool GetEffectFrameRange(ref int pnBeginFrame, ref int pnEndFrame);
	bool SetSpecularReflectRate(float fRate);
	bool SetFresnelReflectRate(float fRate);
	float GetSpecularReflectRate();
	float GetFresnelReflectRate();
	bool CalcIntersectEyeVector(int ViewX, int ViewY, ref float X, ref float Y, ref float Z);
	bool ClearLineList();
	bool AddLineList(CASVector3D Pos1, CASVector3D Pos2);
	bool AddColorLineList(CASVector3D Pos1, int Color1, CASVector3D Pos2, int Color2);
	void SetEnableForwardLine(bool Enable);
};

class CAS3DLayer
{
public:
	CASParts m_3DLayerParts;

	CAS3DLayer();
	~CAS3DLayer();
	bool Create();
	void Release();
	int GetPluginNumber();
	bool SetZ(int Z);
	int CreateInstance();
	bool ReleaseInstance(int nInstance);
	void SetCameraPos(float fX, float fY, float fZ);
	void SetCameraAngle(float fAngle);
	void SetCameraAngleP(float fAngleP);
	void SetCameraAngleB(float fAngleB);
	bool GetCameraPos(ref float X, ref float Y, ref float Z);
	bool GetCameraAngle(ref float Angle);
	bool GetCameraAngleP(ref float AngleP);
	bool GetCameraAngleB(ref float AngleB);
	bool GetCameraXVector(ref float X, ref float Y, ref float Z);
	bool GetCameraYVector(ref float X, ref float Y, ref float Z);
	bool GetCameraZVector(ref float X, ref float Y, ref float Z);
	bool SetDrawDOF(bool DrawDOF);
	bool SetDOF_L(float DOF_L);
	bool SetDOF_F(float DOF_F);
	bool SetDOF_f(float DOF_f);
	bool IsDrawDOF();
	float GetDOF_L();
	float GetDOF_F();
	float GetDOF_f();
	bool SetShadowLightVector(float X, float Y, float Z);
	float GetShadowLightVectorX();
	float GetShadowLightVectorY();
	float GetShadowLightVectorZ();
	bool SetShadowRate(float Rate);
	float GetShadowRate();
	float GetShadowBias(int nNum);
	float GetShadowTargetDistance(int nNum);
	bool SetShadowMapType(int nType);
	bool SetShadowMapLightLookPos(float fX, float fY, float fZ);
	bool SetShadowMapLightDir(float fX, float fY, float fZ);
	bool SetShadowBox(float fX, float fY, float fZ, float fSizeX, float fSizeY, float fSizeZ);
	bool SetShadowBias(int nNum, float fShadowBias);
	bool SetShadowSlopeBias(float fShadowSlopeBias);
	bool SetShadowFilterMag(float fShadowFilterMag);
	bool SetShadowTargetDistance(int nNum, float fDistance);
	bool SetShadowMapResolutionLevel(int nLevel);
	int GetShadowMapResolutionLevel();
	float GetShadowSplitDepth(int nNum);
	bool SetShadowSplitDepth(int nNum, float fDepth);
	bool SetFogNear(float fNear);
	bool SetFogFar(float fFar);
	bool SetFogColor(float fR, float fG, float fB);
	int GetFogType();
	float GetFogNear();
	float GetFogFar();
	void GetFogColor(ref float pfR, ref float pfG, ref float pfB);
	bool SetSoftFogEdgeLength(float SoftFogEdgeLength);
	float GetSoftFogEdgeLength();
	bool SetEdgeLength(float EdgeLength);
	float GetEdgeLength();
	bool SetEdgeReductionRate(float EdgeReductionRate);
	float GetEdgeReductionRate();
	bool SetEdgeColor(float ColorR, float ColorG, float ColorB);
	bool GetEdgeColor(ref float ColorR, ref float ColorG, ref float ColorB);
	bool SetDrawTextureFog(bool bDraw);
	bool GetDrawTextureFog();
	bool SetOptionAntiAliasing(int nFlag);
	bool SetViewport(int nX, int nY, int nWidth, int nHeight);
	bool SetProjection(float fWidth, float fHeight, float fNear, float fFar, float fDeg);
	bool SetParallelProjection(float Width, float Height, float Near, float Far, float Mag);
	float GetBrightness();
	void SetBrightness(float fBrightness);
	int GetShaderDebugMode();
	bool SetDebugMode(int DebugModeType, int Mode);
	int GetDebugMode(int DebugModeType);
	int GetTextureFilterMode();
	bool SetRenderMode(int nMode);
	bool SetDrawOption(int DrawOption, int Param);
	int GetDrawOption(int DrawOption);
	bool SetShadowMode(int nMode);
	bool SetBumpMode(int nMode);
	bool SetFogMode(int nMode);
	bool SetSpecularMode(int nMode);
	bool SetLightMapMode(int nMode);
	bool SetSoftFogEdgeMode(int nMode);
	bool SetSSAOMode(int nMode);
	bool SetShaderDebugMode(int nMode);
	int GetTextureResolutionLevel();
	bool SetTextureResolutionLevel(int nLevel);
	bool SetTextureFilterMode(int nMode);
	int GetRenderMode();
	int GetShadowMode();
	int GetBumpMode();
	int GetFogMode();
	int GetSpecularMode();
	int GetLightMapMode();
	int GetSoftFogEdgeMode();
	int GetSSAOMode();
	bool GetUsePower2Texture();
	bool SetUsePower2Texture(bool bUse);
	bool GetGlobalAmbient(ref float fR, ref float fG, ref float fB);
	bool SetGlobalAmbient(float fR, float fG, float fB);
	int GetBloomMode();
	bool SetBloomMode(int nMode);
	int GetGlareMode();
	bool SetGlareMode(int nMode);
	float GetPostEffectFilterY();
	float GetPostEffectFilterCb();
	float GetPostEffectFilterCr();
	bool SetPostEffectFilterY(float fY);
	bool SetPostEffectFilterCb(float fCb);
	bool SetPostEffectFilterCr(float fCr);
	bool GetBackCGName(int nNum, ref string pICGName);
	int GetBackCGNum(int nNum);
	float GetBackCGBlendRate(int nNum);
	float GetBackCGDestPosX(int nNum);
	float GetBackCGDestPosY(int nNum);
	float GetBackCGMag(int nNum);
	float GetBackCGQuakeMag(int nNum);
	bool GetBackCGShow(int nNum);
	bool SetBackCGName(int nNum, string pICGName);
	bool SetBackCGNum(int nNum, int nCGNum);
	bool SetBackCGBlendRate(int nNum, float fBlendRate);
	bool SetBackCGDestPos(int nNum, float fX, float fY);
	bool SetBackCGMag(int nNum, float fMag);
	bool SetBackCGQuakeMag(int nNum, float fQuakeMag);
	bool SetBackCGShow(int nNum, bool bShow);
	float GetGlareBrightnessParam(int nIndex);
	bool SetGlareBrightnessParam(int nIndex, float fParam);
	bool ResetLightParam();
	bool SetLightParam(int Type, float Value);
	float GetLightParam(int Type);
	void SetHemisphereLightVector(float X, float Y, float Z);
	void SetHemisphereLightSkyColor(float ColorR, float ColorG, float ColorB);
	void SetHemisphereLightMiddleColor(float ColorR, float ColorG, float ColorB);
	void SetHemisphereLightGroundColor(float ColorR, float ColorG, float ColorB);
	float GetHemisphereLightVectorX();
	float GetHemisphereLightVectorY();
	float GetHemisphereLightVectorZ();
	float GetHemisphereLightSkyColorR();
	float GetHemisphereLightSkyColorG();
	float GetHemisphereLightSkyColorB();
	float GetHemisphereLightMiddleColorR();
	float GetHemisphereLightMiddleColorG();
	float GetHemisphereLightMiddleColorB();
	float GetHemisphereLightGroundColorR();
	float GetHemisphereLightGroundColorG();
	float GetHemisphereLightGroundColorB();
	bool SetUseLightScattering(bool Use);
	bool GetUseLightScattering();
	void SetLightScatteringLightVector(float X, float Y, float Z);
	void SetLightScatteringLightColor(float ColorR, float ColorG, float ColorB);
	void SetLightScatteringSunColor(float ColorR, float ColorG, float ColorB);
	void SetLightScatteringBetaR(float BetaR);
	void SetLightScatteringBetaM(float BetaM);
	void SetLightScatteringG(float G);
	void SetLightScatteringDistance(float Distance);
	float GetLightScatteringLightVectorX();
	float GetLightScatteringLightVectorY();
	float GetLightScatteringLightVectorZ();
	float GetLightScatteringLightColorR();
	float GetLightScatteringLightColorG();
	float GetLightScatteringLightColorB();
	float GetLightScatteringSunColorR();
	float GetLightScatteringSunColorG();
	float GetLightScatteringSunColorB();
	float GetLightScatteringBetaR();
	float GetLightScatteringBetaM();
	float GetLightScatteringG();
	float GetLightScatteringDistance();
	void SetToneMappingExposureBias(float ExposureBias);
	void SetToneMappingWhitePoint(float WhitePoint);
	void SetToneMappingShoulderStrength(float ShoulderStrength);
	void SetToneMappingLinearStrength(float LinearStrength);
	void SetToneMappingLinearAngle(float LinearAngle);
	void SetToneMappingToeStrength(float ToeStrength);
	void SetToneMappingToeNumerator(float ToeNumerator);
	void SetToneMappingToeDenominator(float ToeDenominator);
	float GetToneMappingExposureBias();
	float GetToneMappingWhitePoint();
	float GetToneMappingShoulderStrength();
	float GetToneMappingLinearStrength();
	float GetToneMappingLinearAngle();
	float GetToneMappingToeStrength();
	float GetToneMappingToeNumerator();
	float GetToneMappingToeDenominator();
	float GetSSAOParam(int nType);
	bool SetSSAOParam(int nType, float fParam);
	void SetSSAONumofRound(float NumofRound);
	void SetSSAOMinLength(float MinLength);
	void SetSSAOMaxLength(float MaxLength);
	void SetSSAOMinDistance(float MinDistance);
	void SetSSAOMaxDistance(float MaxDistance);
	void SetSSAOColor(float ColorR, float ColorG, float ColorB);
	void SetSSAOAlpha(float Alpha);
	float GetSSAONumofRound();
	float GetSSAOMinLength();
	float GetSSAOMaxLength();
	float GetSSAOMinDistance();
	float GetSSAOMaxDistance();
	float GetSSAOColorR();
	float GetSSAOColorG();
	float GetSSAOColorB();
	float GetSSAOAlpha();
	bool IsLoading();
	void SetThreadLoadingMode(bool Mode);
	bool IsThreadLoadingMode();
	bool Calc2DDetectionHeight(float X, float Z, ref float Height);
	bool Calc2DDetection(float X0, float Y0, float Z0, float X1, float Y1, float Z1, float Radius, ref float X2, ref float Y2, ref float Z2);
	bool Calc2DDetectionIntersectEyeVector(int ViewX, int ViewY, ref float X, ref float Y, ref float Z);
	bool FindPath(float StartX, float StartY, float StartZ, float GoalX, float GoalY, float GoalZ);
	bool GetPathLine(ref array@float pIXArray, ref array@float pIYArray, ref array@float pIZArray);
	bool GetOptimizedPathLine(ref array@float pIXArray, ref array@float pIYArray, ref array@float pIZArray);
	bool TransformPosToViewPos(float X, float Y, float Z, ref int ViewX, ref int ViewY);
	bool ClearCache();
	bool Suspend();
	bool IsSuspend();
	bool Resume();
	bool DrawToMainSurface();
};

class CASMatrix
{
public:
	array@float@2 m[4][4];

	float det2x2(float a1, float a2, float b1, float b2);
	float det3x3(float a1, float a2, float a3, float b1, float b2, float b3, float c1, float c2, float c3);
	void Set(float a11, float a12, float a13, float a14, float a21, float a22, float a23, float a24, float a31, float a32, float a33, float a34, float a41, float a42, float a43, float a44);
	void Identity();
	void SetMove(float fX, float fY, float fZ);
	void SetScale(float fX, float fY, float fZ);
	void SetRotH(float fAngle);
	void SetRotP(float fAngle);
	void SetRotB(float fAngle);
	void MulMatrix(CASMatrix a);
	void GetInverse(ref CASMatrix Result);
};

class CASProjection
{
public:
	float fWidth;
	float fHeight;
	float fNear;
	float fFar;
	float fDeg;

	void Set(float fWidth_, float fHeight_, float fNear_, float fFar_, float fDeg_);
	void SetNear(float Near);
	void SetFar(float Far);
	void SetDegree(float Degree);
	float GetWidth();
	float GetHeight();
	float GetNear();
	float GetFar();
	float GetDegree();
	CASMatrix GetMatrix();
};

class CASVector3D
{
public:
	float fX;
	float fY;
	float fZ;

	void Set(float X, float Y, float Z);
	float GetX();
	float GetY();
	float GetZ();
	CASVector3D AddVector(CASVector3D Obj);
	CASVector3D SubVector(CASVector3D Obj);
	float DotVector(CASVector3D Obj);
	CASVector3D CrossVector(CASVector3D Obj);
	CASVector3D MulMatrix(CASMatrix m);
	CASVector3D MulScalar(float Scalar);
	void Normalize();
	CASVector3D GetNormal();
	float DistanceVector(CASVector3D Obj);
	float LengthVector();
	float LengthVectorSq();
};

class CASGameNetService
{
public:
	int m_UserIDFileID;
	string m_ServerURL;
	int m_UserID;

	CASGameNetService();
	void SetServerURL(string ServerURL);
	bool IsExistUserID();
	bool BeginCreateUserID();
	bool IsEndCreateUserID();
	void StopCreateUserID();
	bool EndCreateUserID();
	string GetUserIDFileName();
	bool LoadUserIDFile(ref int UserID);
	bool SaveUserIDFile(int UserID);
	void SetUserID(int UserID);
	string TransDelimiter(string Text);
	bool BeginSendCommand(string Command, array@string ParamList);
	bool IsEndSendCommand();
	void StopSendCommand();
	bool EndSendCommand(ref string Result);
};

class CDrawMovie
{
public:
	int m_MovieParts;
	array@int m_anKeyCode;
	array@bool m_abKeyDown;
	CASClick m_EscapeKeyClick;
	int m_nBackColorY;
	int m_nBackColorCb;
	int m_nBackColorCr;

	CDrawMovie();
	~CDrawMovie();
	void Release();
	bool CreateMovieParts(string FileName, int SoundGroup);
	bool IsClick();
	bool Play(string FileName, int SoundGroup, bool bKeyCancel);
	void SetBackColor(int nR, int nG, int nB);
};

class CASInputText
{
public:
	bool m_End;
	CASParts m_BaseParts;
	string m_InputText;
	CASCharSpriteProperty m_CharProperty;
	int m_AreaNumber;
	CASClick m_LeftKeyClick;
	CASClick m_RightKeyClick;
	CASClick m_EnterKeyClick;
	CASClick m_EscapeKeyClick;
	CASClick m_RButtonClick;
	CASClick m_HomeKeyClick;
	CASClick m_EndKeyClick;
	CASClick m_BackSpaceKeyClick;
	CASClick m_DeleteKeyClick;
	CASParts m_PrevTextParts;
	CASParts m_NextTextParts;
	CASParts m_CursorParts;
	string m_PrevText;
	string m_NextText;
	string m_OldPrevText;
	string m_OldNextText;
	bool m_Converts;
	bool m_Inputs;
	bool m_OpenIME;

	CASInputText();
	void Begin(int AreaNumber, string BeginText, bool OpenIME);
	void Update();
	void End();
	bool IsEnd();
	string GetInputText();
	void UpdateCursorPos(ref 文字入力エリア_t a, int OffsetX, int OffsetY);
	void ClipText(ref 文字入力エリア_t InputStringArea, ref string PrevText, ref string NextText);
	bool ShiftRight(ref string SrcText, ref string DestText);
	bool ShiftLeft(ref string SrcText, ref string DestText);
	bool IsConverting();
};

class CMessageText
{
public:
	int nType;
	int MessageWindowNumber;
	int nMsgNum;
	string MessageText;
	int Ｍフォント;
	int Ｍサイズ;
	int Ｍ太さ;
	int ＭＲ;
	int ＭＧ;
	int ＭＢ;
	int Ｍ速度;
	int Ｍ配置;
	float Ｍ縁取り幅;
	int Ｍ縁取りＲ;
	int Ｍ縁取りＧ;
	int Ｍ縁取りＢ;
	string Voice;
	string EventFuncName;
};

class CMessageTextModel
{
public:
	array@CMessageText m_MessageTextList;
	CReadMessageTextManager m_ReadMessageTextManager;
	string m_EventName;
	string m_EventInfoByADVEngine;

	CMessageTextModel();
	void Clear();
	void ClearMessageText(int MessageWindowNumber);
	void SetEventName(string Name);
	void SetEventInfoByADV(string FilePath, string FuncName);
	void AddMessageText(int Index, string Text, int MessageWindowNumber);
	void AddNewLine(int MessageWindowNumber);
	void AddVoice(string VoiceName, int MessageWindowNumber);
	void AddC(int MessageWindowNumber);
	int GetNumofMessage();
	ref CMessageText GetMessage(int Index);
	int GetMessageTextLength();
	string GetLastVoiceName();
	bool IsExistVoice();
	bool IsReadMessage(ref CMessageText MessageText);
	void SetMessageReadFlag();
	void DebugOutputMessageText();
	void DebugMessageTextToClipboard();
};

class CMessageDrawParts
{
public:
	int m_nTime;
	int m_MessageWindowNumber;
	bool m_bFixed;
	int m_PartsNumber;
	int m_DefaultRed;
	int m_DefaultGreen;
	int m_DefaultBlue;

	CMessageDrawParts();
	~CMessageDrawParts();
	void SetCharSprite(int nTime, int MessageWindowNumber);
	void SetFixed();
	int GetTime();
	int GetMessageWindowNumber();
	bool IsFixed();
	void SetAlphaRate(int AlphaRate);
	int GetAlphaRate();
	void SetPos(int X, int Y);
	void SetZ(int Z);
	void SetShow(bool Show);
	void SetAddColor(int Red, int Green, int Blue);
	void UpdateZByMessageWindowZChanged();
	void SetText(string Text);
	void SetFontProperty(ref CASCharSpriteProperty Property);
	void SetFont(int Type);
	void SetFontSize(int Size);
	void SetFontBoldWeight(float Weight);
	void SetFontEdgeWeight(float Weight);
	void SetFontColor(int ColorR, int ColorG, int ColorB);
	void SetFontEdgeColor(int ColorR, int ColorG, int ColorB);
	void SetFontCharSpace(int Space);
	void SetDefaultFontColor(int Red, int Green, int Blue);
	int GetDefaultFontRed();
	int GetDefaultFontGreen();
	int GetDefaultFontBlue();
	int GetPartsNumber();
};

class SDrawChar
{
public:
	int nType;
	int MessageWindowNumber;
	int nX;
	int nY;
	int nWidth;
	int Height;
	int MaxHeightInLine;
	int CharSpace;
	string CharText;
	CASCharSpriteProperty Property;
	int nTime;
	string Voice;
	int DefaultRed;
	int DefaultGreen;
	int DefaultBlue;
	int Red;
	int Green;
	int Blue;
};

class CMessageTextView
{
public:
	array@SDrawChar m_DrawCharList;
	int m_DrawSpriteFadeTotalTime;
	array@CMessageDrawParts m_MessageDrawParts;

	CMessageTextView();
	void Clear();
	void CreateDrawCharList(ref CMessageTextModel MessageTextModel);
	void GetHomePosition(int MessageWindowNumber, ref int DrawX, ref int DrawY);
	int CalcMaxCharHeight(ref CMessageTextModel MessageTextModel, int Begin, int End, int MessageWindowNumber);
	int CalcCharHeight(ref CMessageText Message);
	void CreateDrawChar(ref CMessageTextModel MessageTextModel, int Begin, int End, int MaxCharHeight, ref int Time, ref int DrawX, ref int DrawY);
	void CreateDrawCharFromMessage(ref CMessageText Message, int MaxCharHeight, ref int Time, int CharSpeed, ref CMessageTextModel MessageTextModel, ref int DrawX, ref int DrawY);
	void CreateDrawCharNewLine(ref CMessageText Message, int MaxCharHeight, ref int DrawX, ref int DrawY);
	void FreezeDrawCharListBeforeC();
	void SetCharSpritePropertyFromMessageText(ref SDrawChar _Char, ref CMessageText Message, ref CMessageTextModel MessageTextModel);
	int DecideFontType(ref CMessageText MessageText);
	int DecideFontSize(ref CMessageText MessageText);
	int DecideFontColorR(ref CMessageText MessageText);
	int DecideFontColorG(ref CMessageText MessageText);
	int DecideFontColorB(ref CMessageText MessageText);
	float DecideFontWeight(ref CMessageText MessageText);
	float DecideFontEdgeWeight(ref CMessageText MessageText);
	int DecideFontEdgeColorR(ref CMessageText MessageText);
	int DecideFontEdgeColorG(ref CMessageText MessageText);
	int DecideFontEdgeColorB(ref CMessageText MessageText);
	float CalcFontWeight(int Weight);
	int CalcCharSpeed(ref CMessageText Message);
	void Draw(ref CMessageTextModel MessageTextModel);
	void DrawAll(ref CMessageTextModel MessageTextModel);
	int CalcTotalTime();
	void DrawCharList();
	bool IsFinishedDrawCharListFadeIn();
	void UpdateDrawCharListAlphaRate(float fTime, float fTimeLength);
	void FixAllDrawCharListAlphaRate();
	void DrawCharListAll();
	bool DrawChar(ref SDrawChar _Char, bool _bEffect, bool bAlphaFadeInFinishedCheck);
	bool IsKeysDown();
	bool IsJoyKeysDown();
	bool IsWheelRotate();
	void ClearMessageTextAndSetHome(int MessageWindowNumber);
	void SetShow(bool bShow);
	void UpdateZByMessageWindowZChanged();
	void MoveTextPosForLayout(ref CMessageTextModel MessageTextModel);
	void GetNeedLayoutMessageWindowNumberList(ref array@int MessageWindowNumberList, ref array@int LayoutTypeList, ref CMessageTextModel MessageTextModel);
	void MoveTextXPosForLayout(ref array@int MessageWindowNumberList, ref array@int LayoutTypeList);
	void MoveTextXPosOnWindow(int MessageWindowNumber, int LayoutType);
	int CalcOffsetX(int Width, int LayoutType);
	void MoveTextYPosForLayout(ref array@int MessageWindowNumberList, ref array@int LayoutTypeList);
	void MoveTextYPosOnWindow(int MessageWindowNumber, int LayoutType);
	int CalcOffsetY(int Height, int LayoutType);
	void GetTextPartsNumberList(ref array@int List);
	void GetTextFontColorList(ref array@CASColor List);
	void SetPartsLayer(int ID);
};

class _CMsgKeyWait
{
public:
	bool _m_exit;
	int _m_wheel_time;
	int _m_auto_mode_time_length;
	int _m_auto_mode_time_start;
	bool m_bExistVoiceInMessage;
	CASTimer m_AutoModeTimer;
	sys_btn_fnc_t _m_crsr_sys_btn;
	sys_btn_fnc_t m_FirstKeyDownSystemButton;
	bool m_LButtonDown;
	bool m_ReturnKeyDown;
	bool m_RButtonDown;
	bool m_EscapeKeyDown;
	bool m_SpaceKeyDown;
	bool m_AKeyDown;
	bool m_SKeyDown;
	bool m_MButtonDown;
	bool m_ZKeyDown;
	bool m_PageUpKeyDown;
	bool m_HomeKeyDown;
	bool m_BackspaceKeyDown;
	bool m_ShiftCKeyDown;
	bool m_UpKeyDown;
	bool m_DownKeyDown;
	bool m_LButtonThrough;
	bool m_ReturnKeyThrough;
	bool m_UpKeyThrough;
	bool m_DownKeyThrough;
	CASJoyClickAssignedKey m_StepMessageJoyClick;
	CASJoyClickAssignedKey m_HideMessageWindowJoyClick;
	CASJoyClickAssignedKey m_OpenBackLog;
	CASJoyClickAssignedKey m_OpenBackScene;
	array@CASJoyClickAssignedKey m_JoyClickForCallbackList;

	_CMsgKeyWait();
	void _Execute(bool _ignore_skip_mode);
	void _Prepare(bool _ignore_skip_mode);
	void InitJoyClick(bool _ignore_skip_mode);
	void _Loop(bool _ignore_skip_mode);
	void _Update(bool _ignore_skip_mode);
	void _OnAutoMode();
	void _OnReadSkipMode();
	void _OnPlainMode(bool _ignore_skip_mode);
	bool CheckReleaseModeByClick();
	bool CheckKeyClick();
	bool IsAllKeyUp();
	bool CheckJoyClick();
	bool IsAllJoyKeyUp();
	bool CheckSystemButton();
	void InitAutoModeTimer();
	bool _IsAutoModeTimeOut();
	void _ComputeAutoModeTimeLength();
	void _DoCommand(sys_btn_fnc_t _f);
	void _Cleanup();
	bool _IsSetQuakeScreen();
	void _ExecuteQuakeScreen();
	void _OnRButton();
	void _OnSpaceKey();
	void _OnBackspaceKey();
	void _OnEscapeKey();
	void OnShiftCKeyClick();
	void _CheckSystemButtonOnCursor();
	void _ClearKeyDownFlag();
	void CheckKeyThroughFlag();
	void ClearKeyThroughFlag();
};

class _CMsgKeyWaitAnime
{
public:
	bool _m_show;
	CMessageWindowModel m_MessageWindowModel;
	string _m_n_created_基準ＣＧ名;
	int _m_n_created_開始番号;
	int _m_n_created_マーク枚数;
	string m_CreatedFlatName;
	CASParts m_Parts;

	void _Init(ref CMessageWindowModel _area_data);
	void _Create();
	bool _IsIdentity();
	void _UpdatePos();
	void _SetShow(bool _show);
	bool IsShow();
	void SetPartsLayer(int ID);
};

class SReadMessageTextInfo
{
public:
	int m_MessageNumber;
	bool m_ReserveErase;
};

class CReadMessageTextManager
{
public:
	array@SReadMessageTextInfo m_ReadMessageTextQueue;

	CReadMessageTextManager();
	void SetReadMessage(int MessageNumber);
	void EraseMessageNumber(int MessageNumber);
};

class CReplacePair
{
public:
	string m_Src;
	string m_Dest;

	CReplacePair();
	void SetPair(string Src, string Dest);
	string GetSrc();
	string GetDest();
};

class CSystemButtonModelMap
{
public:
	array@CSystemButtonModelList m_SystemButtonModelMap;
	CASRect m_DummyRect;

	void SetCGButtonModel(int MessageWindowNumber, sys_btn_fnc_t CommandFunc, int X, int Y, int Z, string PlainName, string OnCursorName, string KeyDownName, bool PixelDecide);
	void SetFlatButtonModel(int MessageWindowNumber, sys_btn_fnc_t CommandFunc, int X, int Y, int Z, string PlainName, string OnCursorName, string KeyDownName, bool PixelDecide);
	void Clear(int MessageWindowNumber);
	void ClearButtonModelByMessageWindowNumber(int MessageWindowNumber);
	void SetButtonModel(int MessageWindowNumber, sys_btn_fnc_t CommandFunc, int X, int Y, int Z, string PlainName, string OnCursorName, string KeyDownName, bool PixelDecide, bool IsFlat);
	void SetButtonModelByMessageWindowNumber(int MessageWindowNumber, sys_btn_fnc_t CommandFunc, int X, int Y, int Z, string PlainName, string OnCursorName, string KeyDownName, bool PixelDecide, bool IsFlat);
	void SetCGButtonModelForReminisceMode(int MessageWindowNumber, sys_btn_fnc_t CommandFunc, string CoverName);
	void SetFlatButtonModelForReminisceMode(int MessageWindowNumber, sys_btn_fnc_t CommandFunc, string CoverName);
	void SetButtonModelForReminisceMode(int MessageWindowNumber, sys_btn_fnc_t CommandFunc, string CoverName, bool IsFlat);
	void SetButtonModelByMessageWindowNumberForReminisceMode(int MessageWindowNumber, sys_btn_fnc_t CommandFunc, string CoverName, bool IsFlat);
	void SetDisableCG(int MessageWindowNumber, sys_btn_fnc_t CommandFunc, string DisableName);
	void SetDisableFlat(int MessageWindowNumber, sys_btn_fnc_t CommandFunc, string DisableName);
	void SetDisable(int MessageWindowNumber, sys_btn_fnc_t CommandFunc, string DisableName, bool IsFlat);
	void SetDisableByMessageWindowNumber(int MessageWindowNumber, sys_btn_fnc_t CommandFunc, string DisableName, bool IsFlat);
	void SetIsEnableSystemButtonFunc(int MessageWindowNumber, sys_btn_fnc_t CommandFunc, FTIsEnableSystemButton Func);
	void EnlargeModelList(int MessageWindowNumber);
	int GetButtonCount(int MessageWindowNumber);
	sys_btn_fnc_t GetFunction(int MessageWindowNumber, int ButtonIndex);
	int GetX(int MessageWindowNumber, int ButtonIndex);
	int GetY(int MessageWindowNumber, int ButtonIndex);
	int GetZ(int MessageWindowNumber, int ButtonIndex);
	string GetPlainName(int MessageWindowNumber, int ButtonIndex);
	string GetOnCursorName(int MessageWindowNumber, int ButtonIndex);
	string GetKeyDownName(int MessageWindowNumber, int ButtonIndex);
	string GetDisableName(int MessageWindowNumber, int ButtonIndex);
	string GetCoverName(int MessageWindowNumber, int ButtonIndex);
	bool IsInvalidByReminisceMode(int MessageWindowNumber, int ButtonIndex);
	bool IsEnable(int MessageWindowNumber, int ButtonIndex);
	bool IsPixelDecide(int MessageWindowNumber, int ButtonIndex);
	bool IsFlatButton(int MessageWindowNumber, int ButtonIndex);
	bool IsFlatDisable(int MessageWindowNumber, int ButtonIndex);
	bool IsFlatCover(int MessageWindowNumber, int ButtonIndex);
	bool AsserteButtonIndex(int MessageWindowNumber);
};

class CSystemButtonModelList
{
public:
	array@CSystemButtonModel m_SystemButtonModelList;
	CASRect m_DummyRect;

	void SetCGButtonModel(sys_btn_fnc_t CommandFunc, int _x, int _y, int _z, string PlainName, string OnCursorName, string KeyDownName, bool PixelDecide);
	void SetFlatButtonModel(sys_btn_fnc_t CommandFunc, int _x, int _y, int _z, string PlainName, string OnCursorName, string KeyDownName, bool PixelDecide);
	void SetCGButtonModelForReminisceMode(sys_btn_fnc_t CommandFunc, string CoverName);
	void SetFlatButtonModelForReminisceMode(sys_btn_fnc_t CommandFunc, string CoverName);
	void SetDisableCG(sys_btn_fnc_t CommandFunc, string DisableCGName);
	void SetDisableFlat(sys_btn_fnc_t CommandFunc, string DisableFlatName);
	void SetIsEnableSystemButtonFunc(sys_btn_fnc_t CommandFunc, FTIsEnableSystemButton Func);
	void Clear();
	int GetButtonCount();
	int FindOrNewIndex(sys_btn_fnc_t CommandFunc);
	int FindFunction(sys_btn_fnc_t CommandFunc);
	bool IsEnable(int ButtonIndex);
	sys_btn_fnc_t GetFunction(int ButtonIndex);
	int GetX(int ButtonIndex);
	int GetY(int ButtonIndex);
	int GetZ(int ButtonIndex);
	string GetPlainName(int ButtonIndex);
	string GetOnCursorName(int ButtonIndex);
	string GetKeyDownName(int ButtonIndex);
	string GetDisableName(int ButtonIndex);
	string GetCoverName(int ButtonIndex);
	bool IsInvalidByReminisceMode(int ButtonIndex);
	bool AsserteButtonIndex(int ButtonIndex);
	bool IsPixelDecide(int ButtonIndex);
	bool IsFlatButton(int ButtonIndex);
	bool IsFlatDisable(int ButtonIndex);
	bool IsFlatCover(int ButtonIndex);
};

class CSystemButtonModel
{
public:
	sys_btn_fnc_t m_FunctionObject;
	int m_X;
	int m_Y;
	int m_Z;
	string m_PlainName;
	string m_OnCursorName;
	string m_KeyDownName;
	string m_DisableName;
	string m_CoverName;
	bool m_FlatButton;
	bool m_FlatDisable;
	bool m_FlatCover;
	bool m_InvalidByReminisceMode;
	FTIsEnableSystemButton m_IsEnableSystemButtonFunc;
	bool m_PixelDecide;

	CSystemButtonModel();
	void SetButtonModel(int X, int Y, int Z, string PlainName, string OnCursorName, string KeyDownName, sys_btn_fnc_t CommandFunc, bool PixelDecide);
	void SetCGButtonModel(int X, int Y, int Z, string PlainName, string OnCursorName, string KeyDownName, sys_btn_fnc_t CommandFunc, bool PixelDecide);
	void SetFlatButtonModel(int X, int Y, int Z, string PlainName, string OnCursorName, string KeyDownName, sys_btn_fnc_t CommandFunc, bool PixelDecide);
	void SetCGButtonModelForReminisceMode(string CoverName);
	void SetFlatButtonModelForReminisceMode(string CoverName);
	void SetDisableCG(string Name);
	void SetDisableFlat(string Name);
	void SetIsEnableSystemButtonFunc(FTIsEnableSystemButton Func);
	bool IsEnable();
	sys_btn_fnc_t GetFunction();
	int GetX();
	int GetY();
	int GetZ();
	string GetPlainName();
	string GetOnCursorName();
	string GetKeyDownName();
	string GetDisableName();
	string GetCoverName();
	bool IsInvalidByReminisceMode();
	bool IsPixelDecide();
	bool IsFlatButton();
	bool IsFlatDisable();
	bool IsFlatCover();
};

class CSystemButtonViewList
{
public:
	int m_MessageWindowNumber;
	array@CSystemButtonView m_ViewList;
	int m_SelectButtonID;
	bool m_Show;
	string m_OnCursorSoundName;
	string m_ClickSoundName;

	CSystemButtonViewList();
	void Clear();
	void SetMessageWindowNumber(int MessageWindowNumber);
	void Create();
	void Update();
	int GetMessageWindowNumber();
	sys_btn_fnc_t GetSelectedFunc();
	void Hide();
	void Show();
	void SetShow(bool ShowFlg);
	void SetPartsLayer(int ID);
	bool IsShow();
	void SetOnCursorSoundName(string OnCursorSoundName);
	void SetClickSoundName(string ClickSoundName);
	void PlayOnCursorSound();
	void PlayClickSound();
};

class CSystemButtonView
{
public:
	bool m_FirstUpdate;
	int m_ButtonIndex;
	int m_State;
	CASParts m_Parts;
	bool m_Show;

	CSystemButtonView();
	void Create(int ButtonIndex);
	void Delete();
	void SetPartsLayer(int ID);
	void RecreateButtonByState(int MessageWindowNumber, int ButtonIndex, int State);
	void Update();
	int UpdateState();
	void SetShow(bool Show);
	bool IsSelecting();
};

class CMessageWindowModel
{
public:
	string m_CGName;
	string m_FlatFileName;
	int m_X;
	int m_Y;
	bool m_InitializePosX;
	bool m_InitializePosY;
	int m_FontSize;
	int _文字太さ;
	bool m_ExistFontWeightInEX;
	float m_FontWeightInEX;
	float m_FontEdgeWeight;
	bool m_ExistFontEdgeWeightInEX;
	float m_FontEdgeWeightInEX;
	int 飾Ｒ;
	int 飾Ｇ;
	int 飾Ｂ;
	bool m_ExistFontEdgeColorRInEX;
	bool m_ExistFontEdgeColorGInEX;
	bool m_ExistFontEdgeColorBInEX;
	int m_FontEdgeColorRInEX;
	int m_FontEdgeColorGInEX;
	int m_FontEdgeColorBInEX;
	CASColor m_InactiveWindowMultipleColor;
	CASRect m_TextAreaRect;
	string m_KeyWaitMarkFlatName;
	int m_FlatShowWaitFrameNumber;
	int 効果番号;
	int 効果時間;
	int 字間;
	int 行間;
	string 基準ＣＧ名;
	int 開始番号;
	int マーク枚数;
	int マーク速度;
	int マークＸ;
	int マークＹ;
	int フォント;
	int 文字Ｒ;
	int 文字Ｇ;
	int 文字Ｂ;
	int 文字速度;
	int 文字配置;
	string オートモードマーク＿ＣＧ基準名;
	string オートモードマーク＿フラット名;
	int オートモードマーク＿ＣＧ開始番号;
	int オートモードマーク＿ＣＧ枚数;
	int オートモードマーク＿Ｘ;
	int オートモードマーク＿Ｙ;
	int オートモードマーク＿Ｚ;
	int オートモードマーク＿ＣＧ切り替え時間;
	string スキップモードマーク＿ＣＧ基準名;
	string スキップモードマーク＿フラット名;
	int スキップモードマーク＿ＣＧ開始番号;
	int スキップモードマーク＿ＣＧ枚数;
	int スキップモードマーク＿Ｘ;
	int スキップモードマーク＿Ｙ;
	int スキップモードマーク＿Ｚ;
	int スキップモードマーク＿ＣＧ切り替え時間;

	CMessageWindowModel();
	void Init(int MessageWindowNumber);
	void InitFontEdgeWeightInEX(int MessageWindowNumber);
	void InitFontEdgeColorRInEX(int MessageWindowNumber);
	void InitFontEdgeColorGInEX(int MessageWindowNumber);
	void InitFontEdgeColorBInEX(int MessageWindowNumber);
	void InitFontWeightInEX(int MessageWindowNumber);
	void SetCGName(string CGName);
	void SetFlatFileName(string FlatFileName);
	void SetX(int X);
	void SetY(int Y);
	void SetFontSize(int FontSize);
	string GetCGName();
	string GetFlatFileName();
	int GetX();
	int GetY();
	int GetFontSize();
	void SetFontWeight(int FontWeight);
	int GetFontWeight();
	float GetFontRealWeight();
	float CalcFontWeight(int Weight);
	void SetEdgeWeight(float EdgeWeight);
	float GetEdgeWeight();
	void SetEdgeColor(int ColorR, int ColorG, int ColorB);
	int GetEdgeColorR();
	int GetEdgeColorG();
	int GetEdgeColorB();
	void SetInactiveMultipleColor(CASColor Color);
	CASColor GetInactiveMultipleColor();
	void SetTextAreaRect(CASRect TextAreaRect);
	CASRect GetTextAreaRect();
	void SetKeyWaitMarkFlatName(string FlatName);
	string GetKeyWaitMarkFlatName();
};

class CMessageWindowModelManager
{
public:
	int m_Z;
	array@CMessageWindowModel m_ModelList;
	int m_IncZ;
	int m_TextOffsetZ;
	int m_MessageWindowMulColorR;
	int m_MessageWindowMulColorG;
	int m_MessageWindowMulColorB;
	array@CASColor m_ReadTextColorList;

	CMessageWindowModelManager();
	bool Init();
	void SetZ(int Z);
	int GetZ();
	int GetIncZ();
	int GetTextOffsetZ();
	int GetMessageWindowMulColorR();
	int GetMessageWindowMulColorG();
	int GetMessageWindowMulColorB();
	CASColor GetReadTextColor(int Index);
	ref CMessageWindowModel GetMessageWindow(int MessageWindowNumber);
};

class CMessageWindowStatusManager
{
public:
	array@int m_ShowingMessageWindowList;

	CMessageWindowStatusManager();
	void Clear();
	void ShowMessageWindow(int MessageWindowNumber);
	void HideMessageWindow(int MessageWindowNumber);
	void GetShowingMessageWindowList(ref array@int ShowingMessageWindowList);
	int GetActiveMessageWindowNumber();
	bool IsExistActiveMessageWindow();
};

class CMessageWindow
{
public:
	int m_MessageWindowNumber;
	bool m_Exist;
	bool m_Active;
	int m_OffsetZ;
	CASColor m_InactiveMultipleColor;
	bool m_Flat;

	CMessageWindow();
	~CMessageWindow();
	void Release();
	bool IsExist();
	bool Create(int MessageWindowNumber);
	int GetMessageWindowNumber();
	void SetShow(bool Show);
	bool IsShow();
	void UpdatePos();
	void SetOffsetZ(int OffsetZ);
	int GetOffsetZ();
	void UpdateZ();
	void SetPartsLayer(int ID);
	void UpdateAlpha();
	void UpdateMulColor();
	void UpdateActiveState(bool Active);
	bool IsFlat();
	bool IsOverFlatWaitFrame();
	void BackFlatBeginFrame();
	void StepFlatFinalFrame();
	int GetPartsNumber();
};

class CMessageWindowManager
{
public:
	array@CMessageWindow m_MessageWindowList;
	bool m_HideAll;
	bool m_PrevShowSystemButton;
	bool m_PrevShowKeyWaitAnime;

	CMessageWindowManager();
	~CMessageWindowManager();
	void Update(ref CMessageWindowStatusManager StatusManager);
	int FindMessageWindow(int MessageWindowNumber);
	void CreateByShowingList(ref array@int ShowingList);
	void Create(int MessageWindowNumber, int OffsetZ, bool ActiveState);
	void HideAll();
	void ShowAll();
	bool IsShowAll();
	void ClearByShowingList(ref array@int ShowingList);
	int GetOffsetZ(int MessageWindowNumber);
	int GetShowingMaxOffsetZ();
	void GC();
	void SetPartsLayer(int ID);
	void UpdateAlpha();
	void UpdateMulColor();
	void WaitShowFlat();
	void StepAllFlatFinalFrame();
	void GetMessageWindowPartsNumberList(ref array@int List);
};

class CModeCGModel
{
public:
	string m_CGName;
	string m_AutoModeFlatName;
	int m_nX;
	int m_nY;
	int m_nZ;
	bool m_bShow;
	int m_CGBeginNumber;
	int m_CGCount;
	int m_CGSwitchTime;

	CModeCGModel();
	void Clear();
	string GetCG();
	string GetFlatName();
	int GetX();
	int GetY();
	int GetZ();
	bool GetShow();
	int GetCGBeginNumber();
	int GetCGCount();
	int GetCGSwitchTime();
	void SetCG(string Name);
	void SetFlatName(string Name);
	void SetX(int _nX);
	void SetY(int _nY);
	void SetZ(int _nZ);
	void SetShow(bool _bShow);
	void SetCGBeginNumber(int Number);
	void SetCGCount(int Count);
	void SetCGSwitchTime(int Time);
};

class CModeCGView
{
public:
	CASParts m_ModeView;
	CModeCGModel m_Info;

	CModeCGView();
	~CModeCGView();
	void Init();
	void Create(CModeCGModel Info);
	void SetShow(bool Show);
	bool IsShow();
	void SetPartsLayer(int ID);
};

class CBackLogView
{
public:
	string m_ActivityNameByGame;
	CBackLogUnitList m_UnitList;
	array@SBackLogUnitModel m_LogTextList;
	string m_ActivityName;
	bool m_ViewLastScene;
	bool m_KeyUpWait;

	CBackLogView();
	void Execute();
	void CreateBacklogTextList();
	void AddBacklogText(int ADVLog);
	int NumofLine();
	void LoadedActivityEvent(string ActivityFileName, string ActivityName);
	void MouseWheelEvent(int PartsNumber, int Forward, int Back);
	void KeyPressEvent(int PartsNumber, int KeyCode);
	void KeyUpEvent(int PartsNumber, int KeyCode);
	void InitVScrollbar(string ActivityName);
	void InitBackButton(string ActivityName);
	void InitLogText(string ActivityName);
	bool IsExistParts(string ActivityName, string PartsName);
	void ClickEnd(int Number, int MouseX, int MouseY);
	void ScrollEvent(int Number, int ScrollPos, int Total);
	void SetLineIndex(int Index);
	void SetActivityName(string Name);
	void DebugLogTextToLog();
	void DebugLogTextToClipboard();
	string DebugGetLogText(string ReturnText);
};

class CBackLogUnitList
{
public:
	CASParts m_MainLayout;
	array@CBackLogUnit m_List;
	array@string m_VoiceList;
	ref array@SBackLogUnitModel m_ModelList;

	CBackLogUnitList();
	~CBackLogUnitList();
	void Init(float PosX, float PosY, float PosZ, ref array@SBackLogUnitModel List);
	void Free();
	void AddUnit(ref SBackLogUnitModel Model);
	void AddLog(ref SBackLogUnitModel Model);
	void AddSeparate(ref SBackLogUnitModel Model);
	void PushUnit();
	void Build(CASCharSpriteProperty Font, CASCharSpriteProperty VoiceFont, CASCharSpriteProperty VoiceOnFont, CASCharSpriteProperty PlayVoiceFont, int CharSpace, int LineSpace, int Width);
	void NotifyPlayVoiceEvent(ref array@string List);
	void PlayingVoice(int PassedTime);
	void StopVoice();
};

class SBackLogRefUnitModel
{
public:
	ref SBackLogUnitModel Model;
};

class CBackLogUnit
{
public:
	CASParts m_Text;
	array@SBackLogRefUnitModel m_ModelList;
	DG_NotifyPlayVoiceList m_PlayVoiceEvent;
	CASCharSpriteProperty m_VoiceFont;
	CASCharSpriteProperty m_VoiceOnFont;
	CASCharSpriteProperty m_PlayVoiceFont;
	int m_CharSpace;
	int m_LineSpace;
	int m_Width;
	int m_TextHeight;

	CBackLogUnit();
	~CBackLogUnit();
	void AddPlayVoiceEvent(DG_NotifyPlayVoiceList dgObject);
	void Add(ref SBackLogUnitModel Model);
	string CreateLog();
	bool IsExistVoice();
	bool IsPlayVoice();
	void Build(int LayoutParts, CASCharSpriteProperty Font, CASCharSpriteProperty VoiceFont, CASCharSpriteProperty VoiceOnFont, CASCharSpriteProperty PlayVoiceFont, int CharSpace, int LineSpace, int Width);
	void CreateText(CASCharSpriteProperty Font, int CharSpace, int LineSpace, int Width, int TextHeight, int State);
	void LClickEvent(int Number, int MouseX, int MouseY);
	void PlayVoice();
	void StopVoice();
};

class SBackLogUnitModel
{
public:
	string m_Text;
	bool m_Separator;
	bool m_Playing;
	array@string m_VoiceNameList;
};

class CBackSceneView
{
public:
	string m_ActivityNameByGame;
	string m_ActivityName;
	ADVSceneData m_ADVScene;
	bool m_ViewLastScene;
	bool m_KeyUpWait;

	CBackSceneView();
	void RunActivity();
	void LoadedActivityEvent(string ActivityFileName, string ActivityName);
	void MouseWheelEvent(int PartsNumber, int Forward, int Back);
	void KeyPressEvent(int PartsNumber, int KeyCode);
	void KeyUpEvent(int PartsNumber, int KeyCode);
	void InitVScrollbar(string ActivityName);
	void InitBackButton(string ActivityName);
	void InitHideButton(string ActivityName);
	void InitVoiceButton(string ActivityName);
	void InitNextButton(string ActivityName);
	void InitPrevButton(string ActivityName);
	void InitDenominatorText(string ActivityName);
	void InitNumeratorText(string ActivityName);
	bool IsExistParts(string ActivityName, string PartsName);
	void Execute();
	void HideMessageWindow();
	void HideAllFrontScene(ref array@int ShowedLayer);
	void ShowAllFrontScene(ref array@int ShowedLayer);
	void PressPrevButton(int Number, int KeyCode);
	void PressNextButton(int Number, int KeyCode);
	void ClickPlayVoice(int Number, int MouseX, int MouseY);
	void ClickEnd(int Number, int MouseX, int MouseY);
	void ClickHideWindow(int Number, int MouseX, int MouseY);
	void HideWindow();
	void ScrollEvent(int Number, int ScrollPos, int Total);
	void SetSceneIndex(int Index);
	void UpdateBackSceneMessageWindow();
	void SetShowRootParts(bool Show);
	bool IsShowRootParts();
	void SetActivityName(string Name);
};

class CPartsComboBox
{
public:
	DG_MouseMoveHandler DG_MouseMoveEvent;
	unknown_delegate DG_MouseLeaveEvent;
	unknown_delegate DG_MouseEnterEvent;
	DG_MouseClickHandler DG_MouseClickEvent;
	DG_MouseWheelHandler DG_MouseWheelEvent;
	unknown_delegate DG_MouseOnEvent;
	DG_DragBeginHandler DG_DragBeginEvent;
	DG_DragingHandler DG_DragingEvent;
	DG_DragEndHandler DG_DragEndEvent;
	DG_DropEnterHandler DG_DropEnterEvent;
	DG_DropOnHandler DG_DropOnEvent;
	DG_DroppedHandler DG_DroppedEvent;
	DG_DropLeaveHandler DG_DropLeaveEvent;
	DG_KeyTriggerHandler DG_KeyTriggerEvent;
	DG_KeyDownHandler DG_KeyDownEvent;
	DG_KeyPressHandler DG_KeyPressEvent;
	DG_KeyUpHandler DG_KeyUpEvent;
	unknown_delegate DG_ScrollEvent;
	DG_SelectedHandler DG_SelectedEvent;
	int m_ComboNumber;
	int m_ListNumber;
	bool m_OpenList;
	int m_OnCursorTime;
	int m_OnCursorTimeCombo;
	int m_OnCursorTimeList;
	int m_SelectedIndex;
	int m_LineHeight;
	int m_BoxHeight;
	string m_ListBoxCGName;
	CASCharSpriteProperty m_ListFontProperty;
	int m_MarginListWidth;
	int m_MarginListHeight;
	array@string m_ItemList;

	CPartsComboBox();
	~CPartsComboBox();
	void Create();
	void Reset(int nNumber);
	void Release();
	int GetPartsNumber();
	void SetFocus();
	bool IsFocus();
	bool IsOnCursor();
	bool IsClick();
	void MouseMoveEvent(int PartsNumber, int UIMouseX, int UIMouseY);
	void MouseLeaveEvent(int PartsNumber, int UIMouseX, int UIMouseY);
	void MouseEnterEvent(int PartsNumber, int UIMouseX, int UIMouseY);
	void MouseClickEvent(int PartsNumber, int UIMouseX, int UIMouseY);
	void MouseWheelEvent(int PartsNumber, int Forward, int Back);
	void MouseOnEvent(int PartsNumber, int UIMouseX, int UIMouseY, int Time);
	void DragBeginEvent(int PartsNumber);
	void DragingEvent(int PartsNumber, int BeginMouseX, int BeginMouseY, int MouseX, int MouseY);
	void DragEndEvent(int PartsNumber);
	void DropEnterEvent(int DropUINumber, int DragUINumber);
	void DropOnEvent(int DropUINumber, int DragUINumber, int MouseX, int MouseY);
	void DroppedEvent(int DropUINumber, int DragUINumber, int MouseX, int MouseY);
	void DropLeaveEvent(int DropUINumber, int DragUINumber);
	void KeyTriggerEvent(int PartsNumber, int KeyCode);
	void KeyDownEvent(int PartsNumber, int KeyCode);
	void KeyPressEvent(int PartsNumber, int KeyCode);
	void KeyUpEvent(int PartsNumber, int KeyCode);
	void SelectedEvent(int PartsNumber, int nSelectedIndex);
	void CreatedEvent(int PartsNumber);
	void LostFocusEvent(int PartsNumber);
	void SetPos(int PosX, int PosY);
	void SetZ(int PosZ);
	int GetX();
	int GetY();
	int GetZ();
	void SetSize(int Width, int Height);
	void SetLineHeight(int Height);
	void SetBoxHeight(int Height);
	int GetWidth();
	int GetHeight();
	int GetLineHeight();
	int GetBoxHeight();
	void SetMarginForBox(int Width, int Height);
	int GetWidthMarginFromBox();
	int GetHeightMarginFromBox();
	void SetMarginForList(int Width, int Height);
	int GetWidthMarginFromList();
	int GetHeightMarginFromList();
	void SetShow(bool Show);
	bool IsShow();
	void SetBoxCGName(string Name);
	string GetBoxCGName();
	void SetListCGName(string Name);
	string GetListCGName();
	void SetFontPropertyForBox(ref CASCharSpriteProperty FontProperty);
	void GetFontPropertyFromBox(ref CASCharSpriteProperty FontProperty);
	void SetFontPropertyForList(ref CASCharSpriteProperty FontProperty);
	void GetFontPropertyFromList(ref CASCharSpriteProperty FontProperty);
	void AddItem(string _Item_);
	string GetItem(int Index);
	void ClearItem();
	int Numof();
	void Select(int Index);
	int SelectedIndex();
	string SelectedItem();
	void AddMouseMoveEvent(DG_MouseMoveHandler DelegateObject);
	void EraseMouseMoveEvent(DG_MouseMoveHandler DelegateObject);
	void AddMouseLeaveEvent(unknown_delegate DelegateObject);
	void EraseMouseLeaveEvent(unknown_delegate DelegateObject);
	void AddMouseEnterEvent(unknown_delegate DelegateObject);
	void EraseMouseEnterEvent(unknown_delegate DelegateObject);
	void AddMouseClickEvent(DG_MouseClickHandler DelegateObject);
	void EraseMouseClickEvent(DG_MouseClickHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void AddMouseOnEvent(unknown_delegate DelegateObject);
	void EraseMouseOnEvent(unknown_delegate DelegateObject);
	void AddDragBeginEvent(DG_DragBeginHandler DelegateObject);
	void EraseDragBeginEvent(DG_DragBeginHandler DelegateObject);
	void AddDragingEvent(DG_DragingHandler DelegateObject);
	void EraseDragingEvent(DG_DragingHandler DelegateObject);
	void AddDragEndEvent(DG_DragEndHandler DelegateObject);
	void EraseDragEndEvent(DG_DragEndHandler DelegateObject);
	void AddDropEnterEvent(DG_DropEnterHandler DelegateObject);
	void EraseDropEnterEvent(DG_DropEnterHandler DelegateObject);
	void AddDropOnEvent(DG_DropOnHandler DelegateObject);
	void EraseDropOnEvent(DG_DropOnHandler DelegateObject);
	void AddDroppedEvent(DG_DroppedHandler DelegateObject);
	void EraseDroppedEvent(DG_DroppedHandler DelegateObject);
	void AddDropLeaveEvent(DG_DropLeaveHandler DelegateObject);
	void EraseDropLeaveEvent(DG_DropLeaveHandler DelegateObject);
	void AddKeyTriggerEvent(DG_KeyTriggerHandler DelegateObject);
	void EraseKeyTriggerEvent(DG_KeyTriggerHandler DelegateObject);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddKeyPressEvent(DG_KeyPressHandler DelegateObject);
	void EraseKeyPressEvent(DG_KeyPressHandler DelegateObject);
	void AddKeyUpEvent(DG_KeyUpHandler DelegateObject);
	void EraseKeyUpEvent(DG_KeyUpHandler DelegateObject);
	void AddScrollEvent(unknown_delegate DelegateObject);
	void EraseScrollEvent(unknown_delegate DelegateObject);
	void AddSelectedEvent(DG_SelectedHandler DelegateObject);
	void EraseSelectedEvent(DG_SelectedHandler DelegateObject);
};

class CPartsFunctionSet
{
public:
	bool m_Use;
	int m_PartsNumber;
	DG_MouseEnterHandler m_dgMouseEnterEvent;
	DG_MouseMoveHandler m_dgMouseMoveEvent;
	DG_MouseLeaveHandler m_dgMouseLeaveEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;
	DG_MouseClickHandler m_dgMouseLClickEvent;
	DG_MouseClickHandler m_dgMouseRClickEvent;
	DG_MouseClickHandler m_dgMouseMClickEvent;
	DG_MouseOnHandler m_dgMouseOnEvent;
	DG_KeyTriggerHandler m_dgKeyTriggerEvent;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_KeyPressHandler m_dgKeyPressEvent;
	DG_KeyUpHandler m_dgKeyUpEvent;
	DG_DragBeginHandler m_dgDragBeginEvent;
	DG_DragingHandler m_dgDragingEvent;
	DG_DragEndHandler m_dgDragEndEvent;
	DG_DropEnterHandler m_dgDropEnterEvent;
	DG_DropOnHandler m_dgDropOnEvent;
	DG_DroppedHandler m_dgDroppedEvent;
	DG_DropLeaveHandler m_dgDropLeaveEvent;
	DG_FocusHandler m_dgFocusEvent;
	DG_LostFocusHandler m_dgLostFocusEvent;
	DG_ScrollHandler m_dgScrollEvent;
	DG_CreatedHandler m_dgCreatedEvent;
	DG_DeletedHandler m_dgDeletedEvent;
	DG_SelectedHandler m_dgSelectedEvent;
	DG_ChangedHandler m_dgChangedEvent;
	DG_ChangedFlgHandler m_dgChangedFlgEvent;
	DG_FixedHandler m_dgFixedEvent;

	CPartsFunctionSet();
	~CPartsFunctionSet();
	void Release();
	void Init(int PartsNumber);
	bool IsUse();
	void CallFunctionMouseEnter(int MouseX, int MouseY);
	void CallFunctionMouseMove(int MouseX, int MouseY);
	void CallFunctionMouseLeave(int MouseX, int MouseY);
	void CallFunctionMouseWheel(int Forward, int Back);
	void CallFunctionMouseClick(int MouseX, int MouseY, int KeyCode);
	void CallFunctionMouseOnCursor(int MouseX, int MouseY, int Time);
	void CallFunctionKeyTrigger(int KeyCode);
	void CallFunctionKeyDown(int KeyCode);
	void CallFunctionKeyPress(int KeyCode);
	void CallFunctionKeyUp(int KeyCode);
	void CallFunctionDragBegin();
	void CallFunctionDraging(int BeginMouseX, int BeginMouseY, int MouseX, int MouseY);
	void CallFunctionDragEnd();
	void CallFunctionDropEnter(int DragPartsNumber);
	void CallFunctionDropOn(int DragPartsNumber, int MouseX, int MouseY);
	void CallFunctionDropped(int DragPartsNumber, int MouseX, int MouseY);
	void CallFunctionDropLeave(int DragPartsNumber);
	void CallFunctionFocus();
	void CallFunctionLostFocus();
	void CallFunctionScroll(int ScrollPos, int Total);
	void CallFunctionCreated();
	void CallFunctionDeleted();
	void CallFunctionSelected(int Selected);
	void CallFunctionChanged();
	void CallFunctionChangedFlg(bool Check);
	void CallFunctionFixed();
	void AddMouseEnterEvent(DG_MouseEnterHandler DelegateObject);
	void EraseMouseEnterEvent(DG_MouseEnterHandler DelegateObject);
	void AddMouseMoveEvent(DG_MouseMoveHandler DelegateObject);
	void EraseMouseMoveEvent(DG_MouseMoveHandler DelegateObject);
	void AddMouseLeaveEvent(DG_MouseLeaveHandler DelegateObject);
	void EraseMouseLeaveEvent(DG_MouseLeaveHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void AddMouseLClickEvent(DG_MouseClickHandler DelegateObject);
	void EraseMouseLClickEvent(DG_MouseClickHandler DelegateObject);
	void AddMouseRClickEvent(DG_MouseClickHandler DelegateObject);
	void EraseMouseRClickEvent(DG_MouseClickHandler DelegateObject);
	void AddMouseMClickEvent(DG_MouseClickHandler DelegateObject);
	void EraseMouseMClickEvent(DG_MouseClickHandler DelegateObject);
	void AddMouseOnEvent(DG_MouseOnHandler DelegateObject);
	void EraseMouseOnEvent(DG_MouseOnHandler DelegateObject);
	void AddKeyTriggerEvent(DG_KeyTriggerHandler DelegateObject);
	void EraseKeyTriggerEvent(DG_KeyTriggerHandler DelegateObject);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddKeyPressEvent(DG_KeyPressHandler DelegateObject);
	void EraseKeyPressEvent(DG_KeyPressHandler DelegateObject);
	void AddKeyUpEvent(DG_KeyUpHandler DelegateObject);
	void EraseKeyUpEvent(DG_KeyUpHandler DelegateObject);
	void AddDragBeginEvent(DG_DragBeginHandler DelegateObject);
	void EraseDragBeginEvent(DG_DragBeginHandler DelegateObject);
	void AddDragingEvent(DG_DragingHandler DelegateObject);
	void EraseDragingEvent(DG_DragingHandler DelegateObject);
	void AddDragEndEvent(DG_DragEndHandler DelegateObject);
	void EraseDragEndEvent(DG_DragEndHandler DelegateObject);
	void AddDropEnterEvent(DG_DropEnterHandler DelegateObject);
	void EraseDropEnterEvent(DG_DropEnterHandler DelegateObject);
	void AddDropOnEvent(DG_DropOnHandler DelegateObject);
	void EraseDropOnEvent(DG_DropOnHandler DelegateObject);
	void AddDroppedEvent(DG_DroppedHandler DelegateObject);
	void EraseDroppedEvent(DG_DroppedHandler DelegateObject);
	void AddDropLeaveEvent(DG_DropLeaveHandler DelegateObject);
	void EraseDropLeaveEvent(DG_DropLeaveHandler DelegateObject);
	void AddFocusEvent(DG_FocusHandler DelegateObject);
	void EraseFocusEvent(DG_FocusHandler DelegateObject);
	void AddLostFocusEvent(DG_LostFocusHandler DelegateObject);
	void EraseLostFocusEvent(DG_LostFocusHandler DelegateObject);
	void AddScrollEvent(DG_ScrollHandler DelegateObject);
	void EraseScrollEvent(DG_ScrollHandler DelegateObject);
	void AddCreatedEvent(DG_CreatedHandler DelegateObject);
	void EraseCreatedEvent(DG_CreatedHandler DelegateObject);
	void AddDeletedEvent(DG_DeletedHandler DelegateObject);
	void EraseDeletedEvent(DG_DeletedHandler DelegateObject);
	void AddSelectedEvent(DG_SelectedHandler DelegateObject);
	void EraseSelectedEvent(DG_SelectedHandler DelegateObject);
	void AddChangedEvent(DG_ChangedHandler DelegateObject);
	void EraseChangedEvent(DG_ChangedHandler DelegateObject);
	void AddChangedFlgEvent(DG_ChangedFlgHandler DelegateObject);
	void EraseChangedFlgEvent(DG_ChangedFlgHandler DelegateObject);
	void AddFixedEvent(DG_FixedHandler DelegateObject);
	void EraseFixedEvent(DG_FixedHandler DelegateObject);
};

class CPartsMessageManager
{
public:
	CPartsFunctionSet m_WholeFunctionSet;
	array@CPartsFunctionSet m_FunctionSetList;
	CPartsFunctionSet m_ErrorFunctionSet;

	CPartsMessageManager();
	~CPartsMessageManager();
	void Update();
	void PopMessage();
	bool CallDelegate(int MessageType);
	bool CallDelegateMouseEnter(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateMouseMove(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateMouseLeave(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateMouseWheel(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateMouseClick(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateMouseOnCursor(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateKetTrigger(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateKeyDown(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateKeyPress(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateKeyUp(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateDragBegin(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateDraging(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateDragEnd(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateDropEnter(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateDropOn(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateDropped(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateDropLeave(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateFocus(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateLostFocus(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateScroll(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateCreated(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateSelected(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateChanged(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateChangedFlg(ref CPartsFunctionSet FunctionSet);
	bool CallDelegateFixed(ref CPartsFunctionSet FunctionSet);
	void GC();
	void ReleaseFunctionSetWithoutGC(int DelegateIndex);
	void ReleaseFunctionSet(int DelegateIndex);
	void ReleaseFunctionSetList(ref array@int DelegateIndexList);
	ref CPartsFunctionSet GetFunctionSet(int PartsNumber);
	ref CPartsFunctionSet GetFunctionSetWithoutCreate(int PartsNumber);
	void AddMouseEnterEvent(int PartsNumber, DG_MouseEnterHandler DelegateObject);
	void EraseMouseEnterEvent(int PartsNumber, DG_MouseEnterHandler DelegateObject);
	void AddMouseMoveEvent(int PartsNumber, DG_MouseMoveHandler DelegateObject);
	void EraseMouseMoveEvent(int PartsNumber, DG_MouseMoveHandler DelegateObject);
	void AddMouseLeaveEvent(int PartsNumber, DG_MouseLeaveHandler DelegateObject);
	void EraseMouseLeaveEvent(int PartsNumber, DG_MouseLeaveHandler DelegateObject);
	void AddMouseWheelEvent(int PartsNumber, DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(int PartsNumber, DG_MouseWheelHandler DelegateObject);
	void AddMouseLClickEvent(int PartsNumber, DG_MouseClickHandler DelegateObject);
	void EraseMouseLClickEvent(int PartsNumber, DG_MouseClickHandler DelegateObject);
	void AddMouseRClickEvent(int PartsNumber, DG_MouseClickHandler DelegateObject);
	void EraseMouseRClickEvent(int PartsNumber, DG_MouseClickHandler DelegateObject);
	void AddMouseMClickEvent(int PartsNumber, DG_MouseClickHandler DelegateObject);
	void EraseMouseMClickEvent(int PartsNumber, DG_MouseClickHandler DelegateObject);
	void AddMouseOnEvent(int PartsNumber, DG_MouseOnHandler DelegateObject);
	void EraseMouseOnEvent(int PartsNumber, DG_MouseOnHandler DelegateObject);
	void AddKeyTriggerEvent(int PartsNumber, DG_KeyTriggerHandler DelegateObject);
	void EraseKeyTriggerEvent(int PartsNumber, DG_KeyTriggerHandler DelegateObject);
	void AddKeyDownEvent(int PartsNumber, DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(int PartsNumber, DG_KeyDownHandler DelegateObject);
	void AddKeyPressEvent(int PartsNumber, DG_KeyPressHandler DelegateObject);
	void EraseKeyPressEvent(int PartsNumber, DG_KeyPressHandler DelegateObject);
	void AddKeyUpEvent(int PartsNumber, DG_KeyUpHandler DelegateObject);
	void EraseKeyUpEvent(int PartsNumber, DG_KeyUpHandler DelegateObject);
	void AddDragBeginEvent(int PartsNumber, DG_DragBeginHandler DelegateObject);
	void EraseDragBeginEvent(int PartsNumber, DG_DragBeginHandler DelegateObject);
	void AddDragingEvent(int PartsNumber, DG_DragingHandler DelegateObject);
	void EraseDragingEvent(int PartsNumber, DG_DragingHandler DelegateObject);
	void AddDragEndEvent(int PartsNumber, DG_DragEndHandler DelegateObject);
	void EraseDragEndEvent(int PartsNumber, DG_DragEndHandler DelegateObject);
	void AddDropEnterEvent(int PartsNumber, DG_DropEnterHandler DelegateObject);
	void EraseDropEnterEvent(int PartsNumber, DG_DropEnterHandler DelegateObject);
	void AddDropOnEvent(int PartsNumber, DG_DropOnHandler DelegateObject);
	void EraseDropOnEvent(int PartsNumber, DG_DropOnHandler DelegateObject);
	void AddDroppedEvent(int PartsNumber, DG_DroppedHandler DelegateObject);
	void EraseDroppedEvent(int PartsNumber, DG_DroppedHandler DelegateObject);
	void AddDropLeaveEvent(int PartsNumber, DG_DropLeaveHandler DelegateObject);
	void EraseDropLeaveEvent(int PartsNumber, DG_DropLeaveHandler DelegateObject);
	void AddFocusEvent(int PartsNumber, DG_FocusHandler DelegateObject);
	void EraseFocusEvent(int PartsNumber, DG_FocusHandler DelegateObject);
	void AddLostFocusEvent(int PartsNumber, DG_LostFocusHandler DelegateObject);
	void EraseLostFocusEvent(int PartsNumber, DG_LostFocusHandler DelegateObject);
	void AddScrollEvent(int PartsNumber, DG_ScrollHandler DelegateObject);
	void EraseScrollEvent(int PartsNumber, DG_ScrollHandler DelegateObject);
	void AddCreatedEvent(int PartsNumber, DG_CreatedHandler DelegateObject);
	void EraseCreatedEvent(int PartsNumber, DG_CreatedHandler DelegateObject);
	void AddDeletedEvent(int PartsNumber, DG_DeletedHandler DelegateObject);
	void EraseDeletedEvent(int PartsNumber, DG_DeletedHandler DelegateObject);
	void AddSelectedEvent(int PartsNumber, DG_SelectedHandler DelegateObject);
	void EraseSelectedEvent(int PartsNumber, DG_SelectedHandler DelegateObject);
	void AddChangedEvent(int PartsNumber, DG_ChangedHandler DelegateObject);
	void EraseChangedEvent(int PartsNumber, DG_ChangedHandler DelegateObject);
	void AddChangedFlgEvent(int PartsNumber, DG_ChangedFlgHandler DelegateObject);
	void EraseChangedFlgEvent(int PartsNumber, DG_ChangedFlgHandler DelegateObject);
	void AddFixedEvent(int PartsNumber, DG_FixedHandler DelegateObject);
	void EraseFixedEvent(int PartsNumber, DG_FixedHandler DelegateObject);
};

class CParts3DLayerManager
{
public:
	array@int m_List;
	array@int m_SuspendList;

	CParts3DLayerManager();
	~CParts3DLayerManager();
	void Release();
	void Add(int Number);
	void Remove(int Number);
	void SetShow(bool Show);
	void SuspendShowState();
	void ResumeShowState();
	bool IsSuspendShowState();
	int Numof();
	int Get(int Index);
};

class SPartsContextMenuItem
{
public:
	int PartsNumber;
	string Text;
	DG_SelectContextMenuItemHandler Delegate;
	bool Show;
	bool Enable;
};

class CPartsContextMenu
{
public:
	int m_PartsNumber;
	array@SPartsContextMenuItem m_ItemList;

	CPartsContextMenu();
	~CPartsContextMenu();
	void Open(int PosX, int PosY);
	void Close();
	int AddItem(string ItemText, DG_SelectContextMenuItemHandler DelegateObject);
	int InsertItem(int Index, string ItemText, DG_SelectContextMenuItemHandler DelegateObject);
	int AddSeparator();
	int InsertSeparator(int Index);
	int NumofItem();
	int NumofShowItem();
	void SetItemText(int Index, string ItemText);
	string GetItemText(int Index);
	void SetItemShow(int Index, bool Show);
	bool GetItemShow(int Index);
	void SetItemEnable(int Index, bool Enable);
	bool GetItemEnable(int Index);
	int GetPartsNumber();
	void OnLostFocus(int PartsNumber);
	void MenuItem_OnMouseLClick(int PartsNumber, int MouseX, int MouseY);
	void MenuItem_OnMouseEnter(int PartsNumber, int MouseX, int MouseY);
	void MenuItem_OnMouseLeave(int PartsNumber, int MouseX, int MouseY);
};

class CPartsPanel
{
public:
	int m_Base;
	int m_Caption;
	int m_CaptionText;
	int m_CaptionMask;
	int m_CloseButton;
	int m_BG;
	int m_Layout;
	float m_X;
	float m_Y;
	int m_Z;
	int m_CaptionHeight;
	int m_FrameSize;
	int m_Width;
	int m_Height;
	CASColor m_CaptionColor;
	CASColor m_CaptionLightColor;
	bool m_Minimizable;
	bool m_Translucent;
	bool m_Active;
	bool m_Close;
	string m_Title;
	DG_DragBeginHandler m_dgCaptionDragBeginEvent;
	DG_DragingHandler m_dgCaptionDragingEvent;
	DG_DragEndHandler m_dgCaptionDragEndEvent;
	DG_Panel_GetLastZHandler m_dgGetLastZEvent;
	DG_Panel_UpdateSizeHandler m_dgUpdateSizeEvent;
	DG_Panel_ChangedActiveFlgHandler m_dgChangedActiveFlgEvent;
	DG_Panel_ChangedCloseFlgHandler m_dgChangedCloseFlgEvent;

	CPartsPanel();
	~CPartsPanel();
	void CreateBG();
	void CreateCaption();
	void UpdateBG();
	void UpdateCaption();
	string GetCloseButtonText();
	void BeginUpdateEvent(int PassedTime);
	void CaptionDragBeginEvent(int PartsNumber);
	void CaptionDragingEvent(int PartsNumber, int BeginMouseX, int BeginMouseY, int MouseX, int MouseY);
	void CaptionDragEndEvent(int PartsNumber);
	void CloseButtonClickEvent(int PartsNumber, int MouseX, int MouseY);
	void Create();
	void Reset(int Number);
	void Release();
	void Refresh();
	int GetBaseParts();
	int GetLayout();
	void SetMinimizable(bool Flg);
	bool IsMinimizable();
	void SetTranslucent(bool Flg);
	bool IsTranslucent();
	void SetActive(bool Flg);
	bool IsActive();
	void SetPos(float X, float Y);
	void SetZ(int Z);
	float GetX();
	float GetY();
	int GetZ();
	int GetLastZ();
	void SetSize(int Width, int Height);
	int GetWidth();
	int GetHeight();
	void SetTitle(string Title);
	string GetTitle();
	void SetCaptionColor(int nR, int nG, int nB);
	void SetCaptionLightColor(int nR, int nG, int nB);
	void Open();
	void Close();
	bool IsClosed();
	void AddCaptionDragBeginEvent(DG_DragBeginHandler DelegateObject);
	void EraseCaptionDragBeginEvent(DG_DragBeginHandler DelegateObject);
	void AddCaptionDragingEvent(DG_DragingHandler DelegateObject);
	void EraseCaptionDragingEvent(DG_DragingHandler DelegateObject);
	void AddCaptionDragEndEvent(DG_DragEndHandler DelegateObject);
	void EraseCaptionDragEndEvent(DG_DragEndHandler DelegateObject);
	void AddChangedActiveFlgEvent(DG_Panel_ChangedActiveFlgHandler DelegateObject);
	void EraseChangedActiveFlgEvent(DG_Panel_ChangedActiveFlgHandler DelegateObject);
	void AddGetLastZEvent(DG_Panel_GetLastZHandler DelegateObject);
	void EraseGetLastZEvent(DG_Panel_GetLastZHandler DelegateObject);
	void AddUpdateSizeEvent(DG_Panel_UpdateSizeHandler DelegateObject);
	void EraseUpdateSizeEvent(DG_Panel_UpdateSizeHandler DelegateObject);
	void AddChangedCloseFlgEvent(DG_Panel_ChangedCloseFlgHandler DelegateObject);
	void EraseChangedCloseFlgEvent(DG_Panel_ChangedCloseFlgHandler DelegateObject);
};

class CPartsPanelList
{
public:
	int m_Base;
	int m_Layout;
	int m_AlphaClipper;
	int m_HScroll;
	int m_VScroll;
	float m_X;
	float m_Y;
	int m_Z;
	int m_Width;
	int m_Height;
	int m_ScrollBarSize;
	int m_LayoutType;
	int m_DraggingPanel;
	array@CPartsPanel m_PanelList;
	array@int m_FloatingPanelLayer;
	DG_PanelList_UpdateLayoutHandler m_dgUpdateLayoutEvent;

	CPartsPanelList();
	~CPartsPanelList();
	void PanelCaptionDragBeginEvent(int BaseNumber);
	void PanelCaptionDragingEvent(int BaseNumber, int BeginMouseX, int BeginMouseY, int MouseX, int MouseY);
	void PanelCaptionDragEndEvent(int BaseNumber);
	void FloatingPanelCaptionDragEndEvent(int BaseNumber);
	void VerticalSort(int BaseNumber, int Y);
	void HorizonSort(int BaseNumber, int X);
	void PanelChangedActiveFlgEvent(int BaseNumber, bool Active);
	void FloatingPanelChangedActiveFlgEvent(int BaseNumber, bool Active);
	void UpdateZPos();
	void PanelUpdateSizeEvent(int BaseNumber, int Width, int Height);
	void PanelChangedCloseFlgEvent(int BaseNumber, bool Closed);
	void Create();
	void Reset(int Number);
	void Release();
	string GetEXString(string Key);
	bool Restore(string Key);
	int GetPartsNumber();
	void SetPos(float X, float Y);
	void SetZ(int Z);
	int GetX();
	int GetY();
	int GetZ();
	void SetSize(int Width, int Height);
	void UpdateSize();
	void UpdateHScroll();
	void UpdateVScroll();
	void UpdateAlphaClipper();
	int GetWidth();
	int GetHeight();
	int GetClientWidth();
	int GetClientHeight();
	void SetShow(bool Show);
	bool IsShow();
	void SetLayoutType(int LayoutType);
	int GetLayoutType();
	int CreatePanel(string Title);
	int CreateFloatingPanel(string Title);
	int CreateTranslucentPanel(string Title);
	int ResetPanel(string Title, int PartsNumber);
	int ResetFloatingPanel(string Title, int PartsNumber);
	int ResetTranslucentPanel(string Title, int PartsNumber);
	void ClearPanel();
	ref CPartsPanel GetPanelFromBase(int BaseNumber);
	ref CPartsPanel GetPanelFromLayout(int LayoutNumber);
	void OpenPanel(int LayoutNumber);
	void ClosePanel(int LayoutNumber);
	void SetPanelPos(int LayoutNumber, float X, float Y);
	void SetPanelSize(int LayoutNumber, int Width, int Height);
	void SetPanelWidth(int LayoutNumber, int Width);
	void SetPanelHeight(int LayoutNumber, int Height);
	void SetPanelTitle(int LayoutNumber, string Title);
	void SetPanelCaptionColor(int LayoutNumber, int nR, int nG, int nB);
	void SetPanelCaptionLightColor(int LayoutNumber, int nR, int nG, int nB);
	void AddUpdateLayoutEvent(DG_PanelList_UpdateLayoutHandler DelegateObject);
	void EraseUpdateLayoutEvent(DG_PanelList_UpdateLayoutHandler DelegateObject);
};

class CConfigView
{
public:
	array@string m_ActivityNameList;
	DG_NotifyHandler m_Begin;
	DG_NotifyHandler m_End;
	DG_PARTS_LoadedActivityHandler m_dgLoadedObject;
	DG_PARTS_ReleasingActivityHandler m_dgReleasingObject;
	DG_NotifyConfigUpdateHandler m_dgSetAsraDataForParts;
	DG_NotifyConfigUpdateHandler m_dgSetPartsDataForAsra;

	CConfigView();
	void Execute(string ActivityNameByGame);
	void LoadedActivityEvent(string ActivityFileName, string ActivityName);
	void ReleasingActivityEvent(string ActivityFileName, string ActivityName);
	void AddButtonEvent(string ActivityName, string PartsName);
	void BeginUpdateEvent(int PassedTime);
	void SetHScrollRateForAsra(string PartsName, DG_SetFloatHandler dgObject);
	void SetCheckStatForAsra(string PartsName, DG_SetBoolHandler dgObject);
	void EndUpdateEvent(int PassedTime);
	void SetHScrollRateForParts(string PartsName, DG_GetFloatHandler dgObject);
	void SetCheckStatForParts(string PartsName, DG_GetBoolHandler dgObject);
	void SetTextForParts(string PartsName, DG_GetStringHandler dgObject);
	void SetMulColorForParts(string PartsName, DG_GetColorHandler dgObject);
	void SetCheckBoxColorForParts(string PartsName, DG_GetColorHandler dgObject);
	void SetAlphaForParts(string PartsName, DG_GetIntHandler dgObject);
	void ClickEvent(int Number, int MouseX, int MouseY);
	void CallFunction(int Number, string PartsName, DG_NotifyHandler dgObject);
	void SetBeginEvent(DG_NotifyHandler dgObject);
	void SetEndEvent(DG_NotifyHandler dgObject);
	void SetLoadedActivityEvent(DG_PARTS_LoadedActivityHandler dgObject);
	void SetReleasingActivityEvent(DG_PARTS_ReleasingActivityHandler dgObject);
	void SetAsraDataForPartsEvent(DG_NotifyConfigUpdateHandler dgObject);
	void SetPartsDataForAsraEvent(DG_NotifyConfigUpdateHandler dgObject);
};

class CAS3DSetting
{
public:
	int m_RenderMode;
	int m_LightingMode;
	int m_AntiAliasingMode;
	int m_Edge;
	int m_ShadowMode;
	int m_ShadowMapResolutionLevel;
	int m_BumpMode;
	int m_BloomMode;
	int m_GlareMode;
	int m_FogMode;
	int m_SpecularMode;
	int m_LightMapMode;
	int m_SoftFogEdgeMode;
	int m_SSAOMode;
	int m_TextureResolutionLevel;
	int m_TextureFilterMode;
	int m_DOFMode;

	CAS3DSetting();
	bool Load();
	bool Save();
	void Bind();
	bool SetParam(int Type, int Param);
	bool ExistReignSaveFile();
	string GetSaveFileName();
	int GetRenderMode();
	int GetLightingMode();
	int GetAntiAliasingMode();
	int GetEdge();
	int GetShadowMode();
	int GetShadowMapResolutionLevel();
	int GetBumpMode();
	int GetBloomMode();
	int GetGlareMode();
	int GetFogMode();
	int GetSpecularMode();
	int GetLightMapMode();
	int GetSoftFogEdgeMode();
	int GetSSAOMode();
	int GetTextureResolutionLevel();
	int GetTextureFilterMode();
	int GetDOFMode();
	void SetRenderMode(int nRenderMode);
	void SetLightingMode(int LightingMode);
	void SetAntiAliasingMode(int AntiAliasingMode);
	void SetEdge(int Edge);
	void SetShadowMode(int nShadowMode);
	void SetShadowMapResolutionLevel(int nShadowMapResolutionLevel);
	void SetBumpMode(int nBumpMode);
	void SetBloomMode(int nBloomMode);
	void SetGlareMode(int nGlareMode);
	void SetFogMode(int nFogMode);
	void SetSpecularMode(int nSpecularMode);
	void SetLightMapMode(int nLightMapMode);
	void SetSoftFogEdgeMode(int nSoftFogEdgeMode);
	void SetSSAOMode(int nSSAOMode);
	void SetTextureResolutionLevel(int nTextureResolutionLevel);
	void SetTextureFilterMode(int nTextureFilterMode);
	void SetDOFMode(int DOFMode);
};

class CMenuViewItem
{
public:
	int m_nX;
	int m_nY;
	int m_nAreaWidth;
	int m_nAreaHeight;
	bool m_bEnableSel;
	CASParts m_TextParts;
	CASParts m_SelectedTextParts;
	CASParts m_SeparatorParts;
	CASParts m_CursorParts;

	bool _IsEnableSel();
	CMenuViewItem();
	~CMenuViewItem();
	void Release();
	void SetShow(bool bShow);
	bool _IsMousePtIn();
	void SetSelectedState(bool bSelected);
	void _Create(ref 選択肢_t _data, ref sact_text_metrics_t tm1, ref sact_text_metrics_t tm2, ref sact_text_metrics_t tm3, float fBoldWeight, float fSelectedBoldWeight, float fUnselectableBoldWeight, int nCharSpace, int nSelectedCharSpace, int nUnselectableCharSpace, int _z, int _BaseZ, int _x, int _y, int _w);
	void CreateTextParts(int nX, int nY, int nZ, int nBaseZ, int nWidth, int nHeight, ref 選択肢_t MenuInfo, ref sact_text_metrics_t TextMetrics, ref sact_text_metrics_t SelectedTextMetrics, ref sact_text_metrics_t UnselectableTextMetrics, float fBoldWeight, float fSelectedBoldWeight, float fUnselectableBoldWeight, int nCharSpace, int nSelectedCharSpace, int nUnselectableCharSpace, bool bEnableSel);
	void CreateTextPartsItem(ref CASParts TextParts, int nX, int nY, int nZ, int nBaseZ, int nWidth, int nHeight, ref 選択肢_t MenuInfo, ref sact_text_metrics_t TextMetrics, float fBoldWeight, int nCharSpace);
	void CreateSeparator(int nX, int nY, int nZ, int nBaseZ, int nWidth, int nHeight, int nR, int nG, int nB);
	void CreateCursor(int nX, int nY, int nZ, int nBaseZ, int nWidth, int nHeight, int nCursorType, int nCursorR, int nCursorG, int nCursorB, int nCursorA);
	int GetX();
	int GetY();
};

class CMenuView
{
public:
	bool _m_bCreate;
	SYS_選択_result_t _m_result;
	int _m_ox;
	int _m_oy;
	int _m_total_w;
	int _m_total_h;
	CASParts m_BackParts;
	CASParts m_CGCursorParts;
	array@CMenuViewItem _m_item;
	int _m_sel_item;
	bool _m_click;
	bool _m_cancel_click;
	int _m_move;
	bool _m_exit;
	sact_text_metrics_t _m_tm1;
	sact_text_metrics_t _m_tm2;
	sact_text_metrics_t _m_tm3;
	float m_fBoldWeight;
	float m_fSelectedBoldWeight;
	float m_fUnselectableBoldWeight;
	int m_nCharSpace;
	int m_nSelectedCharSpace;
	int m_nUnselectableCharSpace;
	CASClick m_LButtonClick;
	CASClick m_EnterKeyClick;
	CASClick m_RButtonClick;
	CASClick m_SpaceKeyClick;
	CASClick m_EscapeKeyClick;
	CASClick m_PageUpKeyClick;
	CASClick m_HomeKeyClick;
	CASClick m_UpKeyPress;
	CASClick m_DownKeyPress;
	int m_PrevMouseX;
	int m_PrevMouseY;
	array@CASClick m_SelectClick;

	SYS_選択_result_t _GetResult();
	CMenuView();
	bool _IsCreate();
	void _Release();
	void _Clear();
	void _Execute(bool _キャンセルあり, int _キャンセル値);
	void _Open();
	void _Close();
	void SetShow(bool bShow);
	void _Loop(bool _キャンセルあり, int _キャンセル値);
	void _Update(bool _キャンセルあり, int _キャンセル値);
	void _SetResultValue();
	void CreateCGCursor();
	void _CreateItems(ref 選択エリア_t _area);
	void _ClearItem();
	void _CalcAreaMetrics();
	int CalcMaxWidth(ref sact_text_metrics_t tm, float Weight);
	void _CalcAreaSize();
	void _CalcAreaPos();
	void _SetAreaPos左上();
	void _SetAreaPos中上();
	void _SetAreaPos右上();
	void _SetAreaPos左中();
	void _SetAreaPos中中();
	void _SetAreaPos右中();
	void _SetAreaPos左下();
	void _SetAreaPos中下();
	void _SetAreaPos右下();
	void _SetAreaZ();
	void _CreateFrame();
	void _SetTextMetrics();
	void _ShowFrame();
	int _ComputeCurSelByMouse();
	int _ComputeCurSelByKey();
	void _UpdateItem(int _hilite_index);
	int _GetNextItem(int _o);
	int _GetPrevItem(int _o);
};

class CMenuViewManager
{
public:
	array@CMenuView _m_MenuViewList;

	SYS_選択_result_t _Execute(bool _キャンセルあり, int _キャンセル値);
	int _CreateHandle();
	void _DeleteHandle(int _nHandle);
	void SetShow(bool bShow);
};

class _CSystemSound
{
public:
	int m_index;
	array@_CSystemSoundChannel m_ch[6];

	_CSystemSound();
	void _Play(string _snd);
	void _ClearCache();
	bool IsPlay();
};

class _CSystemSoundChannel
{
public:
	int m_chn;
	string m_snd;

	_CSystemSoundChannel();
	void _SetChannel(int _ch);
	bool _Prepare(string _snd);
	bool IsPlay();
	void _Play();
	void _Unprepare();
};

class CASBGM
{
public:
	array@int m_ChannelList;
	int m_CurrentChannel;
	string m_SoundName;
	float m_Volume;
	int m_TransitionType;
	int m_TransitionTotalTime;
	int m_LoopCount;
	bool m_Pause;
	bool m_Reserve;
	string m_Reserve_BGMName;
	int m_Reserve_LoopCount;
	int m_Reserve_Time;
	float m_Reserve_Volume;
	int m_Reserve_FadeType;

	CASBGM();
	void InitChannel(int Channel1, int Channel2);
	void SwapChannel();
	void SetSoundName(string SoundName);
	string GetSoundName();
	string GetSoundNameStable();
	void SetVolume(float Volume);
	float GetVolume();
	float GetVolumeStable();
	int GetTransitionType();
	int GetTransitionTotalTime();
	void SetLoopCount(int LoopCount);
	int GetLoopCount();
	void ReserveNext(string 音楽名, int LoopCount, int 効果時間, float Volume, int FadeType);
	void UpdateReserve();
	void UpdateReserveForce();
	void ClearReserveInfo();
	void PlayNext(string 音楽名, int LoopCount, int 効果時間, float Volume, int FadeType);
	void PlayBGM(string 音楽名, int LoopCount, int 効果タイプ, int 効果時間, float Volume);
	bool IsPause();
	void Prepare(string SoundName);
	void Play();
	void Stop();
	void Fade(int Time, float Volume, bool StopAfterEnd, int FadeType);
	void FadeWithVolumeCap(int Time, float VolumeCapRate, int FadeType);
	bool IsPlay();
	void Pause();
	void Restart();
	bool IsPausing();
	int GetLength();
	int GetPos();
	int Seek(int MilliSecond);
	void SetLoop(bool Loop);
};

class CASSE
{
public:
	array@int m_ChannelList;
	int m_CurrentChannel;
	float m_Volume;
	int m_TransitionType;
	int m_TransitionTotalTime;
	bool m_Reserve;
	string m_Reserve_SoundName;
	int m_Reserve_Time;
	float m_Reserve_Volume;
	int m_Reserve_FadeType;

	CASSE();
	void InitChannel(int Channel1, int Channel2);
	void SwapChannel();
	void SetVolume(float Volume);
	float GetVolume();
	int GetTransitionType();
	int GetTransitionTotalTime();
	void ReserveNext(string SoundName, int 効果時間, float Volume, int FadeType);
	void UpdateReserve();
	void PlayNext(string SoundName, int 効果時間, int FadeType);
	bool IsReserve();
	void Stop();
	bool IsPlay();
	void Fade(int Time, float Volume, bool StopAfterEnd, int FadeType);
};

class CVolumeCap
{
public:
	float m_CapVolume;
	int m_FadeOutTime;
	int m_WaitForFadeInTime;
	int m_FadeInTime;

	CVolumeCap();
	void Set(float CapVolume, int FadeOutTime, int WaitForFadeInTime, int FadeInTime);
	float GetCapVolume();
	int GetFadeOutTime();
	int GetWaitForFadeInTime();
	int GetFadeInTime();
};

class CBGMVolumeCapManager
{
public:
	CVolumeCap m_CurrentBGMVolumeCap;
	float m_CurrentBGMVolumeCapRate;
	bool m_bRunBGMFadeByVoice;
	bool m_bWaitingBGMFadeByVoice;
	CASTimer m_WaitingBGMFadeByVoiceTimer;
	array@int m_PlayChannelList;
	array@int m_PlaySystemSEChannelList;

	CBGMVolumeCapManager();
	bool IsPlayList();
	bool IsWaitingBGMFadeByVoice();
	bool SeachCalcVolumeList(int GroupNumber);
	void BeginBGMFadeImpl(string SoundName);
	void BeginBGMFade(int Channel, string SoundName);
	void BeginBGMFadeBySystemSE(int Channel, string SoundName);
	void UpdateBGMFade();
	void ResetBGM();
	float GetCurrentBGMVolumeCapRate();
};

class CSoundVolumeCapManager
{
public:
	CVolumeCap m_CurrentSoundVolumeCap;
	bool m_bWaitingSoundFadeByVoice;
	CASTimer m_WaitingSoundFadeByVoiceTimer;
	int m_PlayChannel;

	CSoundVolumeCapManager();
	bool IsWaitingSoundFadeByVoice();
	bool SeachCalcVolumeList(int GroupNumber);
	void ResetPlayListVolume(int myIndex);
	void BeginSoundFade(int Channel, string SoundName);
	void UpdateSoundFade(int Index);
	void UpdateSoundShuffle(int Index);
	void UpdateSound();
};

class CASEffectKeyCancelKey
{
public:
	int m_nKey;
	bool m_bFirstKeyDownCancel;

	CASEffectKeyCancelKey();
	bool Init(int nKey, bool bFirstKeyDownCancel);
	bool IsKeyDown();
	int GetKey();
};

class CASEffectKeyCancelChecker
{
public:
	array@CASEffectKeyCancelKey m_KeyList;
	bool m_ClickCanceled;

	CASEffectKeyCancelChecker();
	bool Init(bool FirstKeyDownCancel);
	bool IsCancel();
	bool IsClickCanceled();
};

class CSampleSaveView
{
public:
	void Run();
};

class CSampleLoadView
{
public:
	void Run();
};

class CASDebugFPS
{
public:
	CASParts m_Text;
	bool m_Show;
	CASCharSpriteProperty m_TextProperty;
	CASTimer m_Timer;

	CASDebugFPS();
	void SetFont(int Type, int Size);
	void SetShow(bool Show);
	bool GetShow();
	void Update(bool IsShowLeft, int PosY);
	int GetBottom();
};

class CASDebugMemorySize
{
public:
	CASParts m_Text;
	bool m_Show;
	int m_CurrentAllocatedMemorySize;
	int m_MaxAllocatedMemorySize;
	CASCharSpriteProperty m_TextProperty;
	CASTimer m_Timer;

	CASDebugMemorySize();
	void SetFont(int Type, int Size);
	void Reset();
	void SetShow(bool Show);
	bool GetShow();
	void Update(bool IsShowLeft, int PosY);
	bool IsCompulsorilyShow();
	int GetBottom();
};

class CASDebugFillRate
{
public:
	CASParts m_Text;
	bool m_Show;
	int m_CurrentFillRate;
	int m_MaxFillRate;
	CASCharSpriteProperty m_TextProperty;
	CASTimer m_Timer;

	CASDebugFillRate();
	void SetFont(int Type, int Size);
	void SetShow(bool Show);
	bool GetShow();
	void Update(bool IsShowLeft, int PosY);
	bool IsCompulsorilyShow();
	int GetBottom();
};

class CASDebugVoicePlaying
{
public:
	CASParts m_Text;
	bool m_Show;
	bool m_Play;
	CASCharSpriteProperty m_TextProperty;

	CASDebugVoicePlaying();
	void SetFont(int Type, int Size);
	void SetText(string Text, CASColor Color);
	void SetShow(bool Show);
	bool IsShow();
	void SetPlay(bool Play);
	void Update(int PosX, int PosY);
	int GetBottom();
};

class CASDebugVideoMemorySize
{
public:
	int m_UseSize;
	int m_UseMaxSize;
	int m_FontSize;
	int m_FontSize2;
	CASParts m_Text;
	bool m_Show;
	CASCharSpriteProperty m_TextProperty;
	CASTimer m_Timer;

	CASDebugVideoMemorySize();
	void SetFont(int Type, int Size, int Size2);
	void Reset();
	void SetShow(bool Show);
	bool GetShow();
	void Update(bool IsShowLeft, int PosY);
	bool IsCompulsorilyShow();
	int GetBottom();
};

class CActivityEditor
{
public:
	string EX_PANELLAYOUT_FILEPATH;
	int m_InstanceLayerID;
	int m_UILayerID;
	int m_BGRect;
	CPartsPanelList m_PanelList;
	CAEProjectForm m_ProjectForm;
	CAEComponentListForm m_ComponentListForm;
	CAEInstanceItemList m_InstanceItemList;
	CAEInstanceTreeForm m_InstanceTreeForm;
	CAEPropertyForm m_PropertyForm;
	bool m_EditMode;
	bool m_DownMButton;
	int m_StartRootPosX;
	int m_StartRootPosY;
	int m_StartMousePosX;
	int m_StartMousePosY;

	CActivityEditor();
	~CActivityEditor();
	bool CreateBGRect();
	bool CreateToolForm();
	bool CreateProjectForm();
	bool CreateComponentListForm();
	bool CreateInstanceItemList();
	bool CreateInstanceTreeForm();
	bool CreatePropertyForm();
	void MouseClickEvent(int ID, int MouseX, int MouseY);
	void MouseProjectCreateClickEvent(int ID, int MouseX, int MouseY);
	void MouseProjectLoadClickEvent(int ID, int MouseX, int MouseY);
	void Load(string ActivityName);
	void MouseProjectSaveClickEvent(int ID, int MouseX, int MouseY);
	void MouseProjectSaveAsClickEvent(int ID, int MouseX, int MouseY);
	void MouseProjectRunClickEvent(int ID, int MouseX, int MouseY);
	void MouseProjectResetPosClickEvent(int ID, int MouseX, int MouseY);
	void MouseMoveEvent(int Number, int MouseX, int MouseY);
	void KeyTriggerEvent(int Number, int KeyCode);
	void KeyUpEvent(int Number, int KeyCode);
	bool OutputActivity(string ActivityName);
	bool SaveEXText(ref string Data);
	void SetEditMode(bool EditMode);
	void SwitchEditMode();
	void OnBeginUpdate(int PassedTime);
	void OnUpdatePanelLayout();
	void SavePanelSetting();
	void LoadPanelSetting();
	void Run(string ActivityName);
	void RunActivity();
};

class CActivityData
{
public:
	bool m_HoldData;
	string m_FileName;
	string m_HoldDataActivityName;

	CActivityData();
	~CActivityData();
	bool Release();
	bool IsHoldActivity();
	string GetFileName();
	string GetActivityName();
	bool Create(string FileName);
	bool Load(string FileName, int LayerID);
	bool CloseWithWrite();
	bool Close();
	bool SaveEXText(ref string Data);
	bool LoadEXText(string FileName, string Data, int LayerID);
};

class CAEProjectForm
{
public:
	int m_LayoutBox;
	int m_ButtonLayoutBox;
	int m_EndTypeLayoutBox;
	int m_TitleLabel;
	int m_CreateButton;
	int m_LoadButton;
	int m_SaveButton;
	int m_SaveAsButton;
	int m_EndButton;
	int m_RunButton;
	int m_ResetPosButton;
	int m_EndTypeRButton;
	int m_EndTypeSpace;
	int m_EndTypeEscape;
	DG_MouseClickHandler m_CreateClick;
	DG_MouseClickHandler m_LoadClick;
	DG_MouseClickHandler m_SaveClick;
	DG_MouseClickHandler m_SaveAsClick;
	DG_MouseClickHandler m_RunClick;
	DG_MouseClickHandler m_ResetPosClick;
	bool m_End;

	CAEProjectForm();
	~CAEProjectForm();
	int Create();
	void Release();
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void CreateProject(string Name);
	void End(bool EndFlg);
	bool IsEnd();
	bool SaveActivity(ref CActivityData ActivityData);
	bool LoadActivity(ref CActivityData ActivityData);
	void SetProjectName(string Name);
	string GetProjectName();
	void SetEndTypeClickRButton(bool Enable);
	bool IsEndTypeClickRButton();
	void SetEndTypeClickSpace(bool Enable);
	bool IsEndTypeClickSpace();
	void SetEndTypeClickEscape(bool Enable);
	bool IsEndTypeClickEscape();
	void SetCreateClick(DG_MouseClickHandler DelegateObject);
	void SetLoadClick(DG_MouseClickHandler DelegateObject);
	void SetSaveClick(DG_MouseClickHandler DelegateObject);
	void SetSaveAsClick(DG_MouseClickHandler DelegateObject);
	void SetRunClick(DG_MouseClickHandler DelegateObject);
	void SetResetPosClick(DG_MouseClickHandler DelegateObject);
};

class CAEComponentListForm
{
public:
	int m_LayoutBox;
	int m_ListBox;
	int m_AddButton;
	array@string m_ComponentList;
	DG_AddComponentEvent m_dgAddComponentEvent;

	CAEComponentListForm();
	~CAEComponentListForm();
	int Create();
	void Release();
	void MouseClickEvent(int ID, int MouseX, int MouseY);
	void AddAddComponentEvent(DG_AddComponentEvent DelegateObject);
	void EraseAddComponentEvent(DG_AddComponentEvent DelegateObject);
};

class CAEInstanceTreeForm
{
public:
	int m_MainLayoutBox;
	int m_ButtonLayoutBox;
	int m_EraseButton;
	int m_RenameButton;
	int m_CopyButton;
	int m_SingleCopyButton;
	int m_PasteButton;
	int m_OpenTreeButton;
	int m_CloseTreeButton;
	CAEInstanceTreeView m_TreeView;
	ref CAEInstanceItemList m_InstanceItemList;
	bool m_BookUpdate;
	CPartsContextMenu m_Menu;
	int m_RenameMenuID;
	int m_CopyMenuID;
	int m_SingleCopyMenuID;
	int m_PasteMenuID;
	int m_EraseMenuID;

	CAEInstanceTreeForm();
	~CAEInstanceTreeForm();
	int Create(ref CAEInstanceItemList InstanceList);
	void Release();
	void ReleaseAllInstance();
	void MouseClickEvent(int ID, int MouseX, int MouseY);
	void MouseCopyClickEvent(int ID, int MouseX, int MouseY);
	void MouseSingleCopyClickEvent(int ID, int MouseX, int MouseY);
	void MousePasteClickEvent(int ID, int MouseX, int MouseY);
	void MouseOpenTreeClickEvent(int ID, int MouseX, int MouseY);
	void MouseCloseTreeClickEvent(int ID, int MouseX, int MouseY);
	void KeyUpEvent(int Number, int KeyCode);
	void KeyPressEvent(int Number, int KeyCode);
	void MouseRClickEvent(int ID, int MouseX, int MouseY);
	void SelectContextMenuItemEvent(int Index, string ItemText);
	void CopyActiveItem();
	void SingleCopyActiveItem();
	void PasteActiveItem();
	void EnablePasteButton();
	void EraseActiveItem();
	void EraseItemWithChild(ref CAEInstanceItem Item);
	void Add(int GUIType);
	void RenameActiveItem();
	bool RenameItem(ref CAEInstanceItem Item, string Name);
	void SelectInstance(ref CAEInstanceItem Item);
	void UpdateButton();
	void GetPartsListByShowdItem(ref array@int List);
	void GetPartsListByShowdItemImp(int Parent, ref array@int List);
	void UpActive();
	void DownActive();
	void SetOpenActive(bool Open);
	void UpdateZPosAllParts();
	void UpdateZPos(int Parts, int Count);
	void UpdateTree();
	void UpdateTreeByUpdateFrame(int PassedTime);
	void BookUpdateTree();
	void MouseWheelEvent(int ID, int Forward, int Back);
	bool SaveActivity(ref CActivityData ActivityData);
	bool LoadActivity(ref CActivityData ActivityData);
};

class CAEPropertyForm
{
public:
	ref CAEInstanceItem m_Item;
	ref CAEInstanceItemList m_InstanceItemList;
	int m_LayoutBox;
	int m_Separate;
	int m_PropertyLayoutBoxID;
	int m_VScroll;
	int m_ChangeTypeButton;
	int m_TypeListBox;
	int m_Clip;
	int m_SelectType;
	int m_ScrollPos;
	CPartsComboBox m_ComboBox;
	CAEPropertyPlain m_PropertyPlain;
	CAEPropertyButton m_PropertyButton;
	CAEPropertyCheckBox m_PropertyCheckBox;
	CAEPropertyVScrollBar m_PropertyVScrollBar;
	CAEPropertyHScrollBar m_PropertyHScrollBar;
	CAEPropertyTextBox m_PropertyTextBox;
	CAEPropertyListBox m_PropertyListBox;
	CAEPropertyComboBox m_PropertyComboBox;
	CAEPropertyMultilineTextBox m_PropertyMultilineTextBox;
	CAEPropertyLayoutBox m_PropertyLayoutBox;
	CAEPropertyRadioButtonBox m_PropertyRadioButtonBox;
	CAEPropertyPlainParts m_PropertyPlainParts;

	CAEPropertyForm();
	~CAEPropertyForm();
	int Create();
	void SetInstanceTree(ref CAEInstanceItemList InstanceList);
	void Release();
	void ReleasePropertyPanel();
	void ScrolledEvent(int ID, int Pos, int Total);
	void SetComponent(ref CAEInstanceItem Item);
	void SetPlainPanel(ref CAEInstanceItem Item);
	void SetButtonPanel(ref CAEInstanceItem Item);
	void SetCheckBoxPanel(ref CAEInstanceItem Item);
	void SetVScrollBarPanel(ref CAEInstanceItem Item);
	void SetHScrollBarPanel(ref CAEInstanceItem Item);
	void SetTextBoxPanel(ref CAEInstanceItem Item);
	void SetListBoxPanel(ref CAEInstanceItem Item);
	void SetComboBoxPanel(ref CAEInstanceItem Item);
	void SetMultilineTextBoxPanel(ref CAEInstanceItem Item);
	void SetLayoutBoxPanel(ref CAEInstanceItem Item);
	void SetRadioButtonBoxPanel(ref CAEInstanceItem Item);
	void SetPlainPartsPanel(ref CAEInstanceItem Item, int State);
	void ResizePanel();
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ClickChangeTypeEvent(int ID, int MouseX, int MouseY);
	void CreateContentEvent(int LayoutBox);
	void SelectTypeEvent(int ID, int Index);
	void SelectedEvent(int ID, int Index);
	void SetTitle(string PartsTypeName, string PartsName);
};

class CAEInstanceItem
{
public:
	int m_ID;
	int m_Overlay;
	int m_Overlay1;
	int m_Overlay2;
	int m_Overlay3;
	int m_Overlay4;
	string m_Name;
	DG_InstanceItem_SelectHandler m_dgSelectEvent;
	DG_ChangedHandler m_dgMoveEvent;
	DG_InstanceItem_SetDraggableInstance m_dgDraggableInsntace;
	bool m_Active;
	float m_DragStartPartsX;
	float m_DragStartPartsY;
	bool m_Open;
	array@string m_Destination;
	int m_IntentType;

	CAEInstanceItem();
	~CAEInstanceItem();
	void Init(int ComponentType, int LayerID, string Name, int Line1, int Line2, int Line3, int Line4);
	void Set(int Number, string Name, int LayerID, int Line1, int Line2, int Line3, int Line4);
	void Release();
	void EditMode(bool Mode);
	bool IsCreated();
	void SetOpen(bool Open);
	bool IsOpen();
	void SetName(string Name);
	string GetName();
	void DragBeginEvent(int ID);
	void DragingEvent(int ID, int BeginMouseX, int BeginMouseY, int MouseX, int MouseY);
	void DragEndEvent(int ID);
	void MouseClickEvent(int ID, int MouseX, int MouseY);
	void SetType(int ComponentType, int State);
	int GetType(int State);
	int GetID();
	void SetPos(float X, float Y);
	void SetZ(int Z);
	float GetX();
	float GetY();
	int GetZ();
	void SetOriginPosMode(int Mode);
	int GetOriginPosMode();
	void UpdateOverlay(int PassedTime);
	bool IsDraggableOverlay();
	void CreateActiveLine(int ID, float Pos1X, float Pos1Y, float Pos2X, float Pos2Y);
	int GetWidth();
	int GetHeight();
	void SetShow(bool Show);
	bool IsShow();
	void SetMessageWindowShowLink(bool Link);
	bool IsMessageWindowShowLink();
	void SetAlpha(int Alpha);
	int GetAlpha();
	void SetAddColorR(int Color);
	void SetAddColorG(int Color);
	void SetAddColorB(int Color);
	int GetAddColorR();
	int GetAddColorG();
	int GetAddColorB();
	void SetMulColorR(int Color);
	void SetMulColorG(int Color);
	void SetMulColorB(int Color);
	int GetMulColorR();
	int GetMulColorG();
	int GetMulColorB();
	void SetDrawFilter(int Type);
	int GetDrawFilter();
	void SetMagX(float Mag);
	void SetMagY(float Mag);
	float GetMagX();
	float GetMagY();
	void SetRotateX(float Angle);
	void SetRotateY(float Angle);
	void SetRotateZ(float Angle);
	float GetRotateX();
	float GetRotateY();
	float GetRotateZ();
	void SetMarginTop(int Size);
	void SetMarginBottom(int Size);
	void SetMarginLeft(int Size);
	void SetMarginRight(int Size);
	int GetMarginTop();
	int GetMarginBottom();
	int GetMarginLeft();
	int GetMarginRight();
	void SetAlphaClipper(int Number);
	int GetAlphaClipper();
	void SetOnCursorShowLink(int Number);
	int GetOnCursorShowLink();
	void SetScrollPosXLink(int Number);
	void SetScrollPosYLink(int Number);
	int GetScrollPosXLink();
	int GetScrollPosYLink();
	void SetScrollAlphaLink(int Number);
	int GetScrollAlphaLink();
	void SetCheckBoxShowLink(int Number);
	int GetCheckBoxShowLink();
	void SetTextureFilter(int Type);
	int GetTextureFilter();
	void SetMipmap(bool Mipmap);
	bool IsMipmap();
	void SetSpeedup(bool Speedup);
	bool IsSpeedup();
	void SetParentNumber(int Number);
	int GetParentNumber();
	void SetParentMessageWindowNumber(int Number);
	int GetParentMessageWindowNumber();
	void AddSelectEvent(DG_InstanceItem_SelectHandler DelegateObject);
	void EraseSelectEvent(DG_InstanceItem_SelectHandler DelegateObject);
	void SetMoveEvent(DG_ChangedHandler DelegateObject);
	void SetDraggableInstanceEvent(DG_InstanceItem_SetDraggableInstance DelegateObject);
	void Active(bool Flg);
	bool IsActive();
	void SetState(int State);
	int GetState();
	void SetDestination(string ActivityName);
	void SetDestinationList(ref array@string List);
	string GetDestinationFirst();
	void GetDestination(ref array@string List);
	void SetIntentType(int Type);
	int GetIntentType();
	bool IsExistIntentData();
};

class CAEInstanceItemList
{
public:
	array@CAEInstanceItem m_List;
	int m_InstanceLayerID;
	int m_RootParts;
	int m_Overlay1;
	int m_Overlay2;
	int m_Overlay3;
	int m_Overlay4;
	DG_InstanceItem_SelectHandler m_dgSelectEvent;
	ref CAEInstanceItem m_ActiveItem;
	ref CAEInstanceItem m_PrevActiveItem;
	string m_CopyData;
	string m_CopyName;

	CAEInstanceItemList();
	~CAEInstanceItemList();
	void Create(int InstanceLayerID);
	void Release();
	void ReleaseAllInstance();
	void RecreateRootParts();
	void EditMode(bool Mode);
	void SetShow(bool Show);
	int Numof();
	void Active(int Number);
	ref CAEInstanceItem GetActive();
	void Passive();
	ref CAEInstanceItem AddInstance(int GUIType);
	string GetComponentName(int ComponentType);
	bool IsExist(string Name);
	int GetRootParts();
	bool IsRootParts(int Parts);
	void SetPosForRoot(int PosX, int PosY);
	int GetPosXByRoot();
	int GetPosYByRoot();
	ref CAEInstanceItem FindInstanceByNumber(int Number);
	ref CAEInstanceItem FindInstanceByName(string Name);
	void GetNameList(ref array@string List, int WithoutNumber);
	void GetAlphaClipperNameList(ref array@string List, int WithoutNumber);
	void GetOnCursorShowLinkNameList(ref array@string List, int WithoutNumber);
	void GetPartsNameList(ref array@string List, int PartsType, int WithoutNumber);
	void AddPartsNameList(ref array@string List, int PartsType, int WithoutNumber);
	string GetName(int Number);
	int GetNumber(string Name);
	void SelectInstance(ref CAEInstanceItem Item);
	void AddSelectEvent(DG_InstanceItem_SelectHandler DelegateObject);
	void EraseSelectEvent(DG_InstanceItem_SelectHandler DelegateObject);
	bool CreateAllPartsActivity(string Name);
	bool CreatePartsActivityWithChild(string Name, ref CAEInstanceItem Item);
	bool CreatePartsActivity(string Name, ref CAEInstanceItem Item);
	bool LoadPartsActivity(string Name);
	bool SaveActivity(ref CActivityData ActivityData);
	bool LoadActivity(ref CActivityData ActivityData);
	bool CopyActiveParts();
	bool SingleCopyActiveParts();
	bool PasteActiveParts();
	bool IsExistCopyData();
	void SetOpen(bool Open);
};

class CAEDialog
{
public:
	bool m_Result;
	string m_Text;
	int m_Padding;
	int m_ButtonWidth;
	int m_ButtonHeight;
	DG_CreateContentHandler m_CreateContentEvent;

	CAEDialog();
	~CAEDialog();
	int CreateMessateLabel(string Message);
	int CreateSeparator(int Width);
	int CreateOkButton(bool EnableHotKey);
	int CreateCancelButton(bool EnableHotKey);
	int CreateYesButton();
	int CreateNoButton();
	int CreateButtonLayoutBox();
	int CreateLayoutBox();
	int CreateBG(int Width, int Height);
	void ShowDialogOK(string Message);
	bool ShowDialogOKCancel(string Message);
	bool ShowDialogYESNO(string Message);
	void ShowDialogOKWithComponent(string Message, DG_CreateContentHandler dgObject);
	bool ShowDialogOKCancelWithComponent(string Message, DG_CreateContentHandler dgObject);
	bool ShowDialogGetText(string Message, string Text);
	void MouseOkClickEvent(int ID, int MouseX, int MouseY);
	void MouseCancelClickEvent(int ID, int MouseX, int MouseY);
	void MouseYesClickEvent(int ID, int MouseX, int MouseY);
	void MouseNoClickEvent(int ID, int MouseX, int MouseY);
	string GetText();
	void TextBoxFixedEvent(int PartsNumber);
	void KeyUpEvent(int PartsNumber, int KeyCode);
	void End(bool Result);
};

class CAESelectColorDialog
{
public:
	CASColor m_Color;
	CAEPropertyPanel m_Panel;
	DG_ChangedColor m_dgChangedColor;
	int m_RedSlider;
	int m_GreenSlider;
	int m_BlueSlider;
	bool m_OK;
	bool m_Cancel;

	CAESelectColorDialog();
	void Show(int ID, int PosX, int PosY, int Red, int Green, int Blue, DG_ChangedColor dgChangedColor);
	void ChangeTextEvent(int ID);
	void ClickOKButtonEvent(int ID, int MouseX, int MouseY);
	void ClickCancelButtonEvent(int ID, int MouseX, int MouseY);
	void DragEndEvent(int ID);
};

class CAESelectFontDialog
{
public:
	CASCharSpriteProperty m_Font;
	CAEPropertyPanel m_Panel;
	DG_ChangedFont m_dgChangedFont;
	bool m_OK;
	bool m_Cancel;
	int m_ParentID;

	CAESelectFontDialog();
	void Show(int ID, int PosX, int PosY, CASCharSpriteProperty Font, DG_ChangedFont dgChangedFont);
	void ChangeTextEvent(int ID);
	void ClickOKButtonEvent(int ID, int MouseX, int MouseY);
	void ClickCancelButtonEvent(int ID, int MouseX, int MouseY);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void ChangedColorEvent(int ID, int Red, int Green, int Blue);
	void DragEndEvent(int ID);
	void SelectedComboBoxEvent(int ID, int Index);
};

class CAESelectOriginDialog
{
public:
	DG_ChangedOriginType m_dgChangedOrigin;
	bool m_OK;
	bool m_Cancel;
	int m_ParentID;
	int m_OriginLT;
	int m_OriginMT;
	int m_OriginRT;
	int m_OriginLM;
	int m_OriginMM;
	int m_OriginRM;
	int m_OriginLB;
	int m_OriginMB;
	int m_OriginRB;

	CAESelectOriginDialog();
	void Show(int ID, int PosX, int PosY, int Type, DG_ChangedOriginType dgChangedOrigin);
	void ClickOKButtonEvent(int ID, int MouseX, int MouseY);
	void ClickCancelButtonEvent(int ID, int MouseX, int MouseY);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void DragEndEvent(int ID);
};

class CAEEditTextListListDialog
{
public:
	array@string m_List;
	DG_ChangedItemList m_dgChangedItemList;
	bool m_OK;
	bool m_Cancel;
	int m_ParentID;
	int m_ListBox;
	int m_AddButton;
	int m_EditButton;
	int m_RemoveButton;
	int m_UpButton;
	int m_DownButton;
	ref array@string m_SelectList;
	string m_SelectText;

	CAEEditTextListListDialog();
	void SetSelectList(ref array@string List);
	void Show(int ID, int PosX, int PosY, array@string List, DG_ChangedItemList dgChangedItemList);
	void ChangeTextEvent(int ID, bool Check);
	void ClickOKButtonEvent(int ID, int MouseX, int MouseY);
	void ClickCancelButtonEvent(int ID, int MouseX, int MouseY);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void AddItem(int MouseX, int MouseY);
	void SelectePartsNameEvent(int ID, string Name);
	void EditItem();
	void RemoveItem();
	void UpItem();
	void DownItem();
	void SendItemList();
	void DragEndEvent(int ID);
};

class CAEEditTextDialog
{
public:
	DG_ChangeTextHandler m_dgChangeTextEvent;
	bool m_OK;
	bool m_Cancel;
	int m_ParentID;
	int m_ListBox;
	int m_MTextBox;

	CAEEditTextDialog();
	string Show(int ID, int PosX, int PosY, string Text, DG_ChangeTextHandler dgChangeText);
	void ChangeTextEvent(int ID);
	void ClickOKButtonEvent(int ID, int MouseX, int MouseY);
	void ClickCancelButtonEvent(int ID, int MouseX, int MouseY);
	void DragEndEvent(int ID);
};

class SGUIStringPair
{
public:
	string m_First;
	string m_Second;

	void Set(string First, string Second);
};

class CAEEditStringPairDialog
{
public:
	CAEPropertyPanel m_Panel;
	array@SGUIStringPair m_List;
	DG_ChangedStringPairList m_dgChangedIntList;
	bool m_OK;
	bool m_Cancel;
	int m_ParentID;

	CAEEditStringPairDialog();
	void Show(int ID, int PosX, int PosY, array@SGUIStringPair List, DG_ChangedStringPairList dgChangedIntList);
	void ChangeTextEvent(int ID);
	void ClickOKButtonEvent(int ID, int MouseX, int MouseY);
	void ClickCancelButtonEvent(int ID, int MouseX, int MouseY);
	void DragEndEvent(int ID);
};

class CAEEditConstructionDialog
{
public:
	int m_RootLayout;
	int m_ProcessFieldLayout;
	int m_VScroll;
	int m_HScroll;
	int m_ProcessBG;
	int m_ProcessNameBG;
	int m_ProcessLayout;
	int m_ButtonLayout;
	int m_OKButton;
	int m_CancelButton;
	int m_BG;
	int m_AddButton;
	int m_RemoveButton;
	int m_UpButton;
	int m_DownButton;
	array@string m_ProcessNameList;
	int m_SelectIndex;
	array@CAEEditConstructionProcess m_EditProcessList;
	array@CASConstructionProcess m_ProcessList;
	DG_ChangedConstructionProcessList m_dgChangedConstructionProcessList;
	bool m_OK;
	bool m_Cancel;
	int m_ParentID;

	CAEEditConstructionDialog();
	~CAEEditConstructionDialog();
	void CreateParts(int PosX, int PosY, ref array@CASConstructionProcess List);
	void ReleaseProcessList();
	void CreateRootLayoutBox();
	void CreateProcessFieldLayout();
	void CreateProcessNameBG();
	void CreateProcessBG();
	void CreateProcessLayout();
	void CreateAddButton();
	void CreateRemoveButton();
	void CreateUpButton();
	void CreateDownButton();
	void CreateVScroll();
	void CreateHScroll();
	void CreateButtonLayout();
	void CreateOkButton();
	void CreateCancelButton();
	void CreateBG(int PosX, int PosY);
	void Release();
	void Show(int ID, int PosX, int PosY, ref array@CASConstructionProcess List, DG_ChangedConstructionProcessList dgChangedConstructionProcessList);
	void ClickOKButtonEvent(int ID, int MouseX, int MouseY);
	void ClickCancelButtonEvent(int ID, int MouseX, int MouseY);
	void DragEndEvent(int ID);
	void MouseClickProcessName(int ID, int MouseX, int MouseY);
	void CreateProcessForm(int LayoutID, int ProcessNameAlphaClipper, int ProcessAlphaClipper, int NameWidth, ref array@CASConstructionProcess List);
	void UpdateScroll();
	void UpScroll();
	void DownScroll();
	void ScrollEvent(int ID, int ScrollPos, int Total);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void AddItem(int MouseX, int MouseY);
	void CreateContentEvent(int LayoutBox);
	void SelectedEvent(int ID, int Selected);
	void RemoveItem();
	void UpItem();
	void DownItem();
	void ChangedEvent(int ID);
	void SelecteTextEvent(int ID, string Name);
};

class CAEEditConstructionProcess
{
public:
	int m_BG;
	int m_ProcessName;
	int m_ProcessLayout;
	ref CASConstructionProcess m_RefProcess;
	CAEEditConstructionProcessUnit m_ProcessEdit;
	int m_ProcessNameWidth;
	DG_MouseClickHandler m_dgMouseClickEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;
	DG_ChangedHandler m_dgChangedEvent;
	bool m_Focus;

	CAEEditConstructionProcess();
	void Create(int LayoutID, int ProcessNameAlphaClipper, int ProcessAlphaClipper, int NameWidth, ref CASConstructionProcess Process);
	void Release();
	string GetProcessName(ref CASConstructionProcess Process);
	void ReleaseProcessEdit();
	void CreateProcessEdit(int LayoutID, ref CASConstructionProcess Process);
	int GetProcessLabelWidth();
	void SetProcessLabelX(int PosX);
	void MouseEnter(int ID, int MouseX, int MouseY);
	void MouseLeave(int ID, int MouseX, int MouseY);
	void MouseClick(int ID, int MouseX, int MouseY);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangedEvent(int ID);
	void SetActive(bool Active);
	bool IsActive();
	int GetID();
	void SetLButtonClick(DG_MouseClickHandler dgObject);
	void SetMouseWheelEvent(DG_MouseWheelHandler dgObject);
	void SetChangedEvent(DG_ChangedHandler dgObject);
};

class CAEEditConstructionProcessUnit
{
public:
	DG_MouseWheelHandler m_dgMouseWheelEvent;
	DG_ChangedHandler m_dgChangedEvent;
	CAEPropertyPanel m_ItemPanel;
	ref CASConstructionProcess m_Process;

	CAEEditConstructionProcessUnit();
	void Create(int LayoutID, ref CASConstructionProcess Process);
	void Release();
	void CreateProcessEditForCreate(ref CASConstructionProcess Process);
	void CreateProcessEditForCreatePixelOnly(ref CASConstructionProcess Process);
	void CreateProcessEditForCreateCG(ref CASConstructionProcess Process);
	void CreateProcessEditForFill(ref CASConstructionProcess Process);
	void CreateProcessEditForFillAlphaColor(ref CASConstructionProcess Process);
	void CreateProcessEditForFillAMap(ref CASConstructionProcess Process);
	void CreateProcessEditForFillWithAlpha(ref CASConstructionProcess Process);
	void CreateProcessEditForDrawText(ref CASConstructionProcess Process);
	void CreateProcessEditForCopyText(ref CASConstructionProcess Process);
	void CreateProcessEditForFillFillGradation(ref CASConstructionProcess Process);
	void CreateProcessEditForDrawRect(ref CASConstructionProcess Process);
	void CreateProcessEditForDrawCutCG(ref CASConstructionProcess Process);
	void CreateProcessEditForCopyCutCG(ref CASConstructionProcess Process);
	void CreateProcessEditForDrawCutScaleCG(ref CASConstructionProcess Process);
	void CreateProcessEditForCopyCutScaleCG(ref CASConstructionProcess Process);
	void CreateProcessEditForGrayFilter(ref CASConstructionProcess Process);
	void CreateProcessEditForAddFilter(ref CASConstructionProcess Process);
	void CreateProcessEditForMulFilter(ref CASConstructionProcess Process);
	void CreateProcessEditForDrawLine(ref CASConstructionProcess Process);
	void CreateProcessEditForAlphaBlendCutCG(ref CASConstructionProcess Process);
	void CreateProcessEditForAlphaBlendCutScaleCG(ref CASConstructionProcess Process);
	void CreateProcessEditForDrawOnlyAlphaCutCG(ref CASConstructionProcess Process);
	void CreateProcessEditForDrawOnlyAlphaCutScaleCG(ref CASConstructionProcess Process);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void ChangedFontEvent(int ID, ref CASCharSpriteProperty Font);
	void ChangedStringEvent(int ID, string Text);
	void SetMouseWheelEvent(DG_MouseWheelHandler dgObject);
	void SetChangedEvent(DG_ChangedHandler dgObject);
};

class CAESelectTextDialog
{
public:
	int m_RootLayout;
	int m_Message;
	int m_TextBoxLayout;
	int m_TextBox;
	int m_NoneButton;
	int m_ListBox;
	int m_ButtonLayout;
	int m_OKButton;
	int m_CancelButton;
	int m_BG;
	string m_Result;
	DG_ChangeTextHandler m_dgChangeTextEvent;
	bool m_Cancel;
	int m_ParentID;
	ref array@string m_List;
	string m_ArrowText;

	CAESelectTextDialog();
	~CAESelectTextDialog();
	void CreateParts(string Message, int PosX, int PosY, ref array@string List, string Name);
	void CreateRootLayoutBox();
	void CreateMessage(string Message);
	void CreateTextBoxLayoutBox();
	void CreateTextBox(string Name);
	void CreateNoneButton();
	void CreateListBox(ref array@string List);
	void CreateButtonLayout();
	void CreateOkButton();
	void CreateCancelButton();
	void CreateBG(int PosX, int PosY);
	void Release();
	bool Show(int ID, string Message, int PosX, int PosY, ref array@string List, string Name, DG_ChangeTextHandler dgObject);
	void NarrowList(string Text);
	string GetText();
	void ClickOKButtonEvent(int ID, int MouseX, int MouseY);
	void ClickCancelButtonEvent(int ID, int MouseX, int MouseY);
	void ClickNoneButtonEvent(int ID, int MouseX, int MouseY);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void DragEndEvent(int ID);
	void SelectedEvent(int ID, int Selected);
	void ChangeTextEvent(int ID);
};

class CAEEditIntentDialog
{
public:
	int m_RootLayout;
	int m_Message;
	int m_DestinationLayout;
	int m_DestinationText;
	int m_DestinationListBox;
	int m_DestinationButtonLayout;
	int m_DestinationAddButton;
	int m_DestinationRemoveButton;
	int m_DestinationUpButton;
	int m_DestinationDownButton;
	int m_IntentTypeLayout;
	int m_IntentTypeText;
	CPartsComboBox m_IntentTypeComboBox;
	int m_ButtonLayout;
	int m_OKButton;
	int m_CancelButton;
	int m_BG;
	DG_SelectIntentHandler m_dgSelectInstanceEvent;
	bool m_Cancel;
	int m_ParentID;

	CAEEditIntentDialog();
	~CAEEditIntentDialog();
	void CreateParts(string Message, int PosX, int PosY, array@string DestinationList, int IntentType);
	void CreateRootLayoutBox();
	void CreateMessage(string Message);
	void CreateDestinationLayoutBox();
	void CreateDestinationText();
	void CreateDestinationListBox(array@string DestinationList);
	void CreateDestinationButtonLayout();
	void CreateDestinationAddButton();
	void CreateDestinationRemoveButton();
	void CreateDestinationUpButton();
	void CreateDestinationDownButton();
	void CreateIntentTypeLayoutBox();
	void CreateIntentTypeText();
	void CreateIntentTypeComboBox(int IntentType);
	void CreateButtonLayout();
	void CreateOkButton();
	void CreateCancelButton();
	void CreateBG(int PosX, int PosY);
	void Release();
	void Show(int ID, string Message, int PosX, int PosY, array@string DestinationList, int IntentType, DG_SelectIntentHandler dgObject);
	void ClickOKButtonEvent(int ID, int MouseX, int MouseY);
	void ClickCancelButtonEvent(int ID, int MouseX, int MouseY);
	void ClickAddButtonEvent(int ID, int MouseX, int MouseY);
	void ClickRemoveButtonEvent(int ID, int MouseX, int MouseY);
	void ClickUpButtonEvent(int ID, int MouseX, int MouseY);
	void ClickDownButtonEvent(int ID, int MouseX, int MouseY);
	bool IsExistDestination(string Destination);
	void DragEndEvent(int ID);
	void SelectedIntentType(int Number, int Selected);
	void NotifyDestinationdata();
};

class CAEPartsPropertyPanel
{
public:
	CAEPropertyPanel m_Panel;
	array@int m_PartsList;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPartsPropertyPanel();
	~CAEPartsPropertyPanel();
	void Init(int LayoutID);
	void Release();
	ref CAEPropertyItem AddTextBoxItem(string Label, string Text, bool OpenIMEGainFocus);
	ref CAEPropertyItem AddButtonItem(string Label, string Text);
	ref CAEPropertyItem AddCheckBoxItem(string Label, bool Flg);
	ref CAEPropertyItem AddComboBoxItem(string Label, array@string List, int Index);
	ref CAEPropertyItem AddLabelItem(string Label);
	bool IsExistItem(string Label);
	ref CAEPropertyItem GetItem(int ID);
	ref CAEPropertyItem GetItemByLabel(string Label);
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void AddChangeTextEvent(DG_ChangedHandler DelegateObject);
	void EraseChangeTextEvent(DG_ChangedHandler DelegateObject);
	void AddMouseClickEvent(DG_MouseClickHandler DelegateObject);
	void EraseMouseClickEvent(DG_MouseClickHandler DelegateObject);
	void AddChangedCheckBoxEvent(DG_ChangedFlgHandler DelegateObject);
	void EraseChangedCheckBoxEvent(DG_ChangedFlgHandler DelegateObject);
	void AddSelectedEvent(DG_SelectedHandler DelegateObject);
	void EraseSelectedEvent(DG_SelectedHandler DelegateObject);
};

class CAEPropertyPlain
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	ref CAEInstanceItemList m_InstanceItemList;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;
	sys_btn_fnc_t m_ResizePanel;

	CAEPropertyPlain();
	~CAEPropertyPlain();
	void Init(int LayoutID, ref CAEInstanceItem Item, ref CAEInstanceItemList InstanceList);
	void Release();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void SelecteTextEvent(int ID, string Name);
	void ChangedColorEvent(int ID, int Red, int Green, int Blue);
	void ChangedOriginTypeEvent(int ID, int Type);
	void SelectedComboBoxEvent(int ID, int Index);
	void ChangedCheckBoxEvent(int ID, bool Check);
	void MoveItemEvent(int ID);
	void SetDraggableInstance(bool Flg);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void AddResizePanelEvent(sys_btn_fnc_t DelegateObject);
	void EraseResizePanelEvent(sys_btn_fnc_t DelegateObject);
};

class CAEPropertyButton
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPropertyButton();
	~CAEPropertyButton();
	void Init(int LayoutID, ref CAEInstanceItem Item);
	void Release();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void ChangedOriginTypeEvent(int ID, int Type);
	void SelecteTextEvent(int ID, string Name);
	void SelectIntentEvent(int ID, ref array@string DestinationList, int IntentType);
	void ChangedColorEvent(int ID, int Red, int Green, int Blue);
	void ChangedFontEvent(int ID, ref CASCharSpriteProperty Font);
	void ChangedStringEvent(int ID, string Text);
	void ChangedCheckBoxEvent(int ID, bool Check);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyCheckBox
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPropertyCheckBox();
	~CAEPropertyCheckBox();
	void Init(int LayoutID, ref CAEInstanceItem Item);
	void Release();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void ChangedOriginTypeEvent(int ID, int Type);
	void SelectIntentEvent(int ID, ref array@string DestinationList, int IntentType);
	void ChangedColorEvent(int ID, int Red, int Green, int Blue);
	void ChangedFontEvent(int ID, ref CASCharSpriteProperty Font);
	void ChangedStringEvent(int ID, string Text);
	void SelecteTextEvent(int ID, string Name);
	void ChangedCheckBoxEvent(int ID, bool Check);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyVScrollBar
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPropertyVScrollBar();
	~CAEPropertyVScrollBar();
	void Init(int LayoutID, ref CAEInstanceItem Item);
	void Release();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void SelecteTextEvent(int ID, string Name);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyHScrollBar
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPropertyHScrollBar();
	~CAEPropertyHScrollBar();
	void Init(int LayoutID, ref CAEInstanceItem Item);
	void Release();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void SelecteTextEvent(int ID, string Name);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyTextBox
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPropertyTextBox();
	~CAEPropertyTextBox();
	void Init(int LayoutID, ref CAEInstanceItem Item);
	void Release();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void ChangedColorEvent(int ID, int Red, int Green, int Blue);
	void ChangedFontEvent(int ID, ref CASCharSpriteProperty Font);
	void ChangedCheckBoxEvent(int ID, bool Check);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyListBox
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPropertyListBox();
	~CAEPropertyListBox();
	void Init(int LayoutID, ref CAEInstanceItem Item);
	void Release();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void ChangedFontEvent(int ID, ref CASCharSpriteProperty Font);
	void ChangedItemListEvent(int ID, ref array@string List);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyComboBox
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPropertyComboBox();
	~CAEPropertyComboBox();
	void Init(int LayoutID, ref CAEInstanceItem Item);
	void Release();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void ChangedFontEvent(int ID, ref CASCharSpriteProperty Font);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyMultilineTextBox
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPropertyMultilineTextBox();
	~CAEPropertyMultilineTextBox();
	void Init(int LayoutID, ref CAEInstanceItem Item);
	void Release();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void ChangedFontEvent(int ID, ref CASCharSpriteProperty Font);
	void ChangedStringEvent(int ID, string Text);
	void ChangedColorEvent(int ID, int Red, int Green, int Blue);
	void ChangedCheckBoxEvent(int ID, bool Check);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyLayoutBox
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPropertyLayoutBox();
	~CAEPropertyLayoutBox();
	void Init(int LayoutID, ref CAEInstanceItem Item);
	void Release();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void ChangedOriginTypeEvent(int ID, int Type);
	void ChangedCheckBoxEvent(int ID, bool Check);
	void SelectedComboBoxEvent(int ID, int Index);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyRadioButtonBox
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	ref CAEInstanceItemList m_InstanceItemList;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPropertyRadioButtonBox();
	~CAEPropertyRadioButtonBox();
	void Init(int LayoutID, ref CAEInstanceItem Item, ref CAEInstanceItemList InstanceList);
	void Release();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void ChangedItemListEvent(int ID, ref array@string List);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyPlainParts
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	CAEPropertyCG m_PropertyCG;
	CAEPropertyLoopCG m_PropertyLoopCG;
	CAEPropertyText m_PropertyText;
	CAEPropertyHGauge m_PropertyHGauge;
	CAEPropertyVGauge m_PropertyVGauge;
	CAEPropertyNumeral m_PropertyNumeral;
	CAEPropertyRectDetection m_PropertyRectDetection;
	CAEPropertyCGDetection m_PropertyCGDetection;
	CAEPropertyFlat m_PropertyFlat;
	CAEPropertyConstruction m_PropertyConstruction;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPropertyPlainParts();
	~CAEPropertyPlainParts();
	void Init(int LayoutID, ref CAEInstanceItem Item, int State);
	void Release();
	void ReleasePropertyPanel();
	void SetCGPanel(int LayoutID, ref CAEInstanceItem Item, int State);
	void SetLoopCGPanel(int LayoutID, ref CAEInstanceItem Item, int State);
	void SetTextPanel(int LayoutID, ref CAEInstanceItem Item, int State);
	void SetHGaugePanel(int LayoutID, ref CAEInstanceItem Item, int State);
	void SetVGaugePanel(int LayoutID, ref CAEInstanceItem Item, int State);
	void SetNumeralPanel(int LayoutID, ref CAEInstanceItem Item, int State);
	void SetRectDetectionPanel(int LayoutID, ref CAEInstanceItem Item);
	void SetCGDetectionPanel(int LayoutID, ref CAEInstanceItem Item);
	void SetFlatPanel(int LayoutID, ref CAEInstanceItem Item, int State);
	void SetConstructionPanel(int LayoutID, ref CAEInstanceItem Item, int State);
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void SelectIntentEvent(int ID, ref array@string DestinationList, int IntentType);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyCG
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	int m_PartsState;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPropertyCG();
	~CAEPropertyCG();
	void Init(int LayoutID, ref CAEInstanceItem Item, int State);
	void Release();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void SelectedComboBoxEvent(int ID, int Index);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyLoopCG
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	int m_PartsState;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPropertyLoopCG();
	~CAEPropertyLoopCG();
	void Init(int LayoutID, ref CAEInstanceItem Item, int State);
	void Release();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyText
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	int m_PartsState;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPropertyText();
	~CAEPropertyText();
	void Init(int LayoutID, ref CAEInstanceItem Item, int State);
	void Release();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void SelecteTextEvent(int ID, string Name);
	void ChangedFontEvent(int ID, ref CASCharSpriteProperty Font);
	void ChangedStringEvent(int ID, string Text);
	void ChangedCheckBoxEvent(int ID, bool Check);
	void ChangedOriginTypeEvent(int ID, int Type);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyHGauge
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	int m_PartsState;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPropertyHGauge();
	~CAEPropertyHGauge();
	void Init(int LayoutID, ref CAEInstanceItem Item, int State);
	void Release();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyVGauge
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	int m_PartsState;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPropertyVGauge();
	~CAEPropertyVGauge();
	void Init(int LayoutID, ref CAEInstanceItem Item, int State);
	void Release();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyNumeral
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	int m_PartsState;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;
	array@string m_TypeList;
	int m_ShowType;

	CAEPropertyNumeral();
	~CAEPropertyNumeral();
	void Init(int LayoutID, ref CAEInstanceItem Item, int State);
	void Release();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void ChangedListEvent(int ID, ref array@SGUIStringPair List);
	void ChangedFontEvent(int ID, ref CASCharSpriteProperty Font);
	void SelectedComboBoxEvent(int ID, int Index);
	void ChangedCheckBoxEvent(int ID, bool Check);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyRectDetection
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPropertyRectDetection();
	~CAEPropertyRectDetection();
	void Init(int LayoutID, ref CAEInstanceItem Item);
	void Release();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyCGDetection
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPropertyCGDetection();
	~CAEPropertyCGDetection();
	void Init(int LayoutID, ref CAEInstanceItem Item);
	void Release();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyFlat
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	int m_PartsState;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPropertyFlat();
	~CAEPropertyFlat();
	void Init(int LayoutID, ref CAEInstanceItem Item, int State);
	void Release();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void ChangedListEvent(int ID, ref array@SGUIStringPair List);
	void Build(int PartsNumber, string FlatName, int CurrentFrame, float UpdateSpeedRate);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyConstruction
{
public:
	CAEPartsPropertyPanel m_Panel;
	ref CAEInstanceItem m_Item;
	int m_PartsState;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPropertyConstruction();
	~CAEPropertyConstruction();
	void Init(int LayoutID, ref CAEInstanceItem Item, int State);
	void Release();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void ChangedListEvent(int ID, ref array@CASConstructionProcess List);
	void SelecteTextEvent(int ID, string Name);
	void Build(int PartsNumber, ref array@CASConstructionProcess List);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyPanel
{
public:
	int m_LayoutID;
	array@CAEPropertyItem m_ItemList;
	array@int m_ForcusItemList;
	CAEPropertyToolTip m_ToolTip;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;
	DG_ChangedHandler m_dgChangeTextEvent;
	DG_MouseClickHandler m_dgMouseClickEvent;
	DG_ChangedFlgHandler m_dgChangedCheckBoxEvent;
	DG_SelectedHandler m_dgSelectedComboBoxEvent;

	CAEPropertyPanel();
	~CAEPropertyPanel();
	void Init(int LayoutID);
	void Release();
	void OutputError(string Text);
	string GetToolTipText(int Number);
	void AddChangeFocusParts(int Number);
	ref CAEPropertyItem AddItem();
	ref CAEPropertyItem AddTextBoxItem(string Label, int LabelWidth, string Text, int TextBoxWidth, bool OpenIMEGainFocus);
	ref CAEPropertyItem AddButtonItem(string Label, int LabelWidth, string Text, int ButtonWidth, int TextPos);
	ref CAEPropertyItem AddCheckBoxItem(string Label, int LabelWidth, int CheckBoxWidth, bool Flg);
	ref CAEPropertyItem AddComboBoxItem(string Label, int LabelWidth, int ComboBoxWidth, int ComboBoxHeight, array@string List, int Index);
	ref CAEPropertyItem AddLabelItem(string Label, int LabelWidth);
	bool IsExistItem(string Label);
	ref CAEPropertyItem GetItem(int ID);
	ref CAEPropertyItem GetItemByLabel(string Label);
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void ChangedCheckBoxEvent(int ID, bool Check);
	void SelectedComboBoxEvent(int ID, int Index);
	void KeyUpEvent(int ID, int KeyID);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void AddChangeTextEvent(DG_ChangedHandler DelegateObject);
	void EraseChangeTextEvent(DG_ChangedHandler DelegateObject);
	void AddMouseClickEvent(DG_MouseClickHandler DelegateObject);
	void EraseMouseClickEvent(DG_MouseClickHandler DelegateObject);
	void AddChangedCheckBoxEvent(DG_ChangedFlgHandler DelegateObject);
	void EraseChangedCheckBoxEvent(DG_ChangedFlgHandler DelegateObject);
	void AddSelectedEvent(DG_SelectedHandler DelegateObject);
	void EraseSelectedEvent(DG_SelectedHandler DelegateObject);
};

class CAEPropertyItem
{
public:
	bool m_TextBoxMode;
	CAEPropertyItemTextBox m_TextBox;
	bool m_ButtonMode;
	CAEPropertyItemButton m_ButtonItem;
	bool m_CheckBoxMode;
	CAEPropertyItemCheckBox m_CheckBoxItem;
	bool m_ComboBoxMode;
	CAEPropertyItemComboBox m_ComboBoxItem;
	bool m_LabelMode;
	CAEPropertyItemLabel m_LabelItem;
	ref CAEPropertyToolTip m_RefToolTip;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;
	DG_ChangedHandler m_dgChangeTextEvent;
	DG_MouseClickHandler m_dgMouseClickEvent;
	DG_ChangedFlgHandler m_dgChangedCheckBoxEvent;
	DG_SelectedHandler m_dgSelectedComboBoxEvent;

	CAEPropertyItem();
	~CAEPropertyItem();
	void Release();
	void ReleaseUnit();
	void ReleaseEvent();
	int GetID();
	bool IsExistParts(int PartsNumber);
	bool IsExistPartsWithChild(int ParentNumber, int FindNumber);
	void AddParts(int Number);
	string GetLabel();
	int SetTextBox(string Name, int LabelWidth, int TextBoxWidth, bool OpenIMEGainFocus);
	int GetTextBoxID();
	void SetTextBoxText(string Text);
	string GetTextBoxText();
	int GetTextBoxInt();
	float GetTextBoxFloat();
	void SetTextBoxReadOnly(bool Flg);
	int SetButtonItem(string Name, int LabelWidth, int ButtonWidth, int TextPos);
	void SetButtonText(string Text);
	string GetButtonText();
	int SetCheckBoxItem(string Name, int LabelWidth, int CheckBoxWidth);
	void SetFlg(bool Flg);
	bool GetFlg();
	int SetComboBoxItem(string Name, int LabelWidth, int ComboBoxWidth, int ComboBoxHeight);
	void SetComboBoxItemList(array@string ItemList);
	void GetComboBoxItemList(ref array@string ItemList);
	void SetComboBoxIndex(int Index);
	int GetComboBoxIndex();
	int SetLabelItem(string Name, int LabelWidth);
	void SetToolTip(ref CAEPropertyToolTip ToolTip);
	string GetToolTipText();
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void ChangedCheckBoxEvent(int ID, bool Check);
	void SelectedComboBoxEvent(int ID, int Index);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void AddChangeTextEvent(DG_ChangedHandler DelegateObject);
	void EraseChangeTextEvent(DG_ChangedHandler DelegateObject);
	void AddMouseClickEvent(DG_MouseClickHandler DelegateObject);
	void EraseMouseClickEvent(DG_MouseClickHandler DelegateObject);
	void AddChangedCheckBoxEvent(DG_ChangedFlgHandler DelegateObject);
	void EraseChangedCheckBoxEvent(DG_ChangedFlgHandler DelegateObject);
	void AddSelectedComboBoxEvent(DG_SelectedHandler DelegateObject);
	void EraseSelectedComboBoxEvent(DG_SelectedHandler DelegateObject);
};

class CAEPropertyItemTextBox
{
public:
	int m_LayoutID;
	int m_Label;
	int m_TextBox;
	bool m_OpenIMEGainFocus;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;
	DG_ChangedHandler m_dgChangeTextEvent;

	CAEPropertyItemTextBox();
	~CAEPropertyItemTextBox();
	int Init(string Name, int LabelWidth, int TextBoxWidth, ref CAEPropertyToolTip ToolTip, bool OpenIMEGainFocus);
	void Release();
	int GetID();
	int GetTextBoxID();
	void SetReadOnly(bool Flg);
	string GetLabel();
	void SetText(string Text);
	string GetText();
	int GetInt();
	float GetFloat();
	string GetToolTipText();
	void AddParts(int Number);
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void ChangeTextEvent(int ID);
	void FocusEvent(int ID);
	void DragBeginEvent(int PartsNumber);
	void DragingEvent(int PartsNumber, int BeginMouseX, int BeginMouseY, int MouseX, int MouseY);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void AddChangeTextEvent(DG_ChangedHandler DelegateObject);
	void EraseChangeTextEvent(DG_ChangedHandler DelegateObject);
};

class CAEPropertyItemButton
{
public:
	int m_LayoutID;
	int m_Label;
	int m_Button;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;
	DG_MouseClickHandler m_dgMouseClickEvent;

	CAEPropertyItemButton();
	~CAEPropertyItemButton();
	int Init(string Name, int LabelWidth, int ButtonWidth, int TextPos, ref CAEPropertyToolTip ToolTip);
	void Release();
	int GetID();
	string GetLabel();
	void SetText(string Text);
	string GetText();
	string GetToolTipText();
	void AddParts(int Number);
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void AddMouseClickEvent(DG_MouseClickHandler DelegateObject);
	void EraseMouseClickEvent(DG_MouseClickHandler DelegateObject);
};

class CAEPropertyItemCheckBox
{
public:
	int m_LayoutID;
	int m_Label;
	int m_CheckBox;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;
	DG_ChangedFlgHandler m_dgChangedFlgEvent;

	CAEPropertyItemCheckBox();
	~CAEPropertyItemCheckBox();
	int Init(string Name, int LabelWidth, int ButtonWidth, ref CAEPropertyToolTip ToolTip);
	void Release();
	int GetID();
	string GetLabel();
	void SetFlg(bool Flg);
	bool GetFlg();
	string GetToolTipText();
	void AddParts(int Number);
	void ChangedFlgEvent(int ID, bool Check);
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void AddChangedFlgEvent(DG_ChangedFlgHandler DelegateObject);
	void EraseChangedFlgEvent(DG_ChangedFlgHandler DelegateObject);
};

class CAEPropertyItemComboBox
{
public:
	int m_LayoutID;
	int m_Label;
	CPartsComboBox m_ComboBox;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;
	DG_SelectedHandler m_dgSelectedEvent;

	CAEPropertyItemComboBox();
	~CAEPropertyItemComboBox();
	int Init(string Name, int LabelWidth, int ComboBoxWidth, int ComboBoxHeight, ref CAEPropertyToolTip ToolTip);
	void Release();
	int GetID();
	string GetLabel();
	void SetItemList(array@string ItemList);
	void GetItemList(ref array@string ItemList);
	void SetIndex(int Index);
	int GetIndex();
	string GetToolTipText();
	void AddParts(int Number);
	void SelectedEvent(int ID, int Index);
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void AddSelectedEvent(DG_SelectedHandler DelegateObject);
	void EraseSelectedEvent(DG_SelectedHandler DelegateObject);
};

class CAEPropertyItemLabel
{
public:
	int m_LayoutID;
	int m_Label;
	DG_KeyDownHandler m_dgKeyDownEvent;
	DG_MouseWheelHandler m_dgMouseWheelEvent;

	CAEPropertyItemLabel();
	~CAEPropertyItemLabel();
	int Init(string Name, int LabelWidth, ref CAEPropertyToolTip ToolTip);
	void Release();
	int GetID();
	string GetLabel();
	string GetToolTipText();
	void AddParts(int Number);
	void KeyDownEvent(int ID, int KeyID);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void AddKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void EraseKeyDownEvent(DG_KeyDownHandler DelegateObject);
	void AddMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler DelegateObject);
};

class CAEPropertyToolTip
{
public:
	int m_ToolTip;
	string m_Text;
	int m_LastEnterParts;
	DG_GetToolTipTextHandler m_dgGetToolTipTextEvent;

	CAEPropertyToolTip();
	~CAEPropertyToolTip();
	void Init();
	void Release();
	void AddParts(int Number);
	void SetGetToolTipTextEvent(DG_GetToolTipTextHandler dgObject);
	void MouseEnterEvent(int ID, int MouseX, int MouseY);
	void MouseLeaveEvent(int ID, int MouseX, int MouseY);
	void UpdateFrameEvent(int PassedTime);
	void UpdateToolTipText(int ID);
};

class CAEInstanceTreeView
{
public:
	int m_MainLayoutBox;
	int m_ListLayoutBox;
	int m_VScroll;
	int m_HScroll;
	int m_Clip;
	array@CAEInstanceTreeNodeView m_NodeList;
	ref CAEInstanceItemList m_InstanceItemList;
	DG_MouseClickHandler m_dgMouseRClickEvent;
	DG_NotifyHandler m_dgUpdateTree;

	CAEInstanceTreeView();
	~CAEInstanceTreeView();
	int Init();
	void Release();
	void SetSize(int Width, int Height);
	void SetShow(bool Show);
	int GetLastZPos();
	void UpdateScrollBar();
	void ScrollEvent(int ID, int ScrollSize, int Total);
	void MouseRClickEvent(int ID, int MouseX, int MouseY);
	void CreateTree(ref CAEInstanceItemList InstanceItemList);
	void ScrollByActiveItem();
	void RefreshTree();
	void CreateNode(ref CAEInstanceItemList InstanceItemList, int Parts);
	void GetDragDropNode(int DragPanelNumber, int DropPanelNumber, ref int DragNumber, ref int DropNumber);
	void DropTopEvent(int ID, int DragPartsNumber, int MouseX, int MouseY);
	void DropEvent(int ID, int DragPartsNumber, int MouseX, int MouseY);
	void DropBottomEvent(int ID, int DragPartsNumber, int MouseX, int MouseY);
	bool IsFocusNode();
	void ReleaseTextList();
	void MouseWheelEvent(int ID, int Forward, int Back);
	void AddMouseRClickEvent(DG_MouseClickHandler DelegateObject);
	void EraseMouseRClickEvent(DG_MouseClickHandler DelegateObject);
	void AddUpdateTreeEvent(DG_NotifyHandler DelegateObject);
	void EraseUpdateTreeEvent(DG_NotifyHandler DelegateObject);
};

class CAEInstanceTreeNodeView
{
public:
	int m_MainLayoutBox;
	int m_Overlay;
	int m_Text;
	int m_DropMark;
	bool m_Droppable;
	ref CAEInstanceItem m_RefItem;
	ref array@CAEInstanceTreeNodeView m_RefNodeView;
	DG_MouseWheelHandler m_dgMouseWheelEvent;
	DG_NotifyHandler m_dgRefreshTreeEvent;
	DG_MouseClickHandler m_dgMouseRClickEvent;
	DG_DroppedHandler m_dgDropTopEvent;
	DG_DroppedHandler m_dgDropEvent;
	DG_DroppedHandler m_dgDropBottomEvent;

	CAEInstanceTreeNodeView();
	~CAEInstanceTreeNodeView();
	void Create(int Layout, int Clipper, ref CAEInstanceItem Item, ref array@CAEInstanceTreeNodeView NodeView);
	void Release();
	ref CAEInstanceItem GetItem();
	float GetPosY();
	int GetHeight();
	bool IsExist(int PartsNumber);
	bool IsFocus();
	int GetParentCount(int PartsNumber);
	bool IsExistChild(int PanelNumber);
	void MouseWheelEvent(int ID, int Forward, int Back);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	void MouseRClickEvent(int ID, int MouseX, int MouseY);
	void MouseEnterEvent(int ID, int MouseX, int MouseY);
	void MouseLeaveEvent(int ID, int MouseX, int MouseY);
	void DragBeginEvent(int ID);
	void DragingEvent(int ID, int BeginMouseX, int BeginMouseY, int MouseX, int MouseY);
	void DragEndEvent(int ID);
	void DropEnterEvent(int ID, int DragPartsNumber);
	void DropOnEvent(int ID, int DragPartsNumber, int MouseX, int MouseY);
	void DroppedEvent(int ID, int DragPartsNumber, int MouseX, int MouseY);
	void DropLeaveEvent(int ID, int DragPartsNumber);
	void AddMouseWheelEvent(DG_MouseWheelHandler dgObject);
	void EraseMouseWheelEvent(DG_MouseWheelHandler dgObject);
	void AddRefreshTreeEvent(DG_NotifyHandler dgObject);
	void EraseRefreshTreeEvent(DG_NotifyHandler dgObject);
	void AddDropTopEvent(DG_DroppedHandler dgObject);
	void EraseDropTopEvent(DG_DroppedHandler dgObject);
	void AddDropEvent(DG_DroppedHandler dgObject);
	void EraseDropEvent(DG_DroppedHandler dgObject);
	void AddDropBottomEvent(DG_DroppedHandler dgObject);
	void EraseDropBottomEvent(DG_DroppedHandler dgObject);
	void AddMouseRClickEvent(DG_MouseClickHandler DelegateObject);
	void EraseMouseRClickEvent(DG_MouseClickHandler DelegateObject);
};

class CActivityDestinationData
{
public:
	string m_DestinationName;
	string m_DestinationData;

	CActivityDestinationData();
	void SetDestinationName(string ActivityName);
	string GetDestinationName();
	void SetDestinationData(string Data);
	string GetDestinationData();
};

class CActivityIntentData
{
public:
	array@CActivityDestinationData m_Destination;
	int m_IntentType;

	CActivityIntentData();
	void Clear();
	bool Empty();
	void AddDestination(string ActivityName);
	void AddRangeDestination(ref array@string NameList);
	void AddDestinationData(string Data);
	bool IsExistDestination();
	void SetIntentType(int Type);
	int GetIntentType();
	bool IsSaveActivity();
	bool IsRemoveActivity();
	bool IsRemoveAllActivity();
};

class SActivityNamePair
{
public:
	string m_FileName;
	string m_Name;

	void Set(string FileName, string Name);
};

class CASPartsActivity
{
public:
	array@SActivityNamePair m_ActivityName;
	CActivityIntentData m_IntentData;
	CActivityIntentData m_EmptyIntentData;
	array@CASClick m_EndKey;

	CASPartsActivity();
	CActivityIntentData Run(CActivityIntentData IntentData, DG_PARTS_LoadedActivityHandler dgLoadedObject, DG_PARTS_ReleasingActivityHandler dgReleasingObject, DG_PARTS_IntentActivityHandler dgIntentActivityEvent);
	CActivityIntentData RunLoop(CActivityIntentData IntentData, DG_PARTS_LoadedActivityHandler dgLoadedObject, DG_PARTS_ReleasingActivityHandler dgReleasingObject, DG_PARTS_IntentActivityHandler dgIntentActivityEvent);
	CActivityIntentData UpdateActivity(DG_PARTS_IntentActivityHandler dgIntentActivityEvent);
	bool IsClickEndKey();
	bool LoadActivity(CActivityIntentData ActivityIntentData, DG_PARTS_LoadedActivityHandler dgObject);
	bool BindEndEvent(string ActivityName);
	bool BindEndType(string ActivityName);
	bool ReleaseActivity(DG_PARTS_ReleasingActivityHandler dgReleasingObject);
	void MouseLClickEvent(int ID, int MouseX, int MouseY);
	string GetActivityName(int PartsNumber);
};

class CADVEngine
{
public:
	string m_ActivityName;
	int m_NumofStep;
	int m_CurrentStep;
	string m_FileName;
	string m_FunctionName;
	string m_IfData;
	CASClick m_F2;
	CASClick m_F3;
	CASClick m_F4;
	CASClick m_F5;
	CASClick m_Enter;
	CASClick m_Esc;
	CASClick m_RClick;
	bool m_UpdateScene;
	bool m_UpdateText;
	bool m_OpenUI;
	CASTimer m_ClickTime;
	int m_PrevListBoxIndex;
	CASParts m_Splash;
	DG_NotifyHandler m_ReleaseSceneFunc;

	CADVEngine();
	~CADVEngine();
	void SetReleaseSceneFunc(DG_NotifyHandler ReleaseSceneFunc);
	void ShowSplash();
	void HideSplash();
	bool GetFunctionName(ref string Name);
	bool SelectIfData(string FunctionName, ref string IfData);
	void CreateIfDataList(ref array@string List, int NumofIf, string Data);
	bool Reload();
	void End();
	void Execute(string FileName);
	void Run();
	void SeekStep(int Step);
	void LoadedActivityEvent(string ActivityFileName, string ActivityName);
	void InitStepList(string ActivityName);
	void InitUpdateTextButton(string ActivityName);
	void InitEscapeWithUpdateButton(string ActivityName);
	void InitEscapeButton(string ActivityName);
	void InitEndButton(string ActivityName);
	void InitBG(string ActivityName);
	void InitDegugCheck(string ActivityName);
	void SelectedEvent(int PartsNumber, int Selected);
	void UpdateStepText(int Step);
	int GetSelectedIndexByActivityListbox();
	void ClickUpdateTextButtonEvent(int PartsNumber, int MouseX, int MouseY);
	void ClickEscapeWithUpdateButtonEvent(int PartsNumber, int MouseX, int MouseY);
	void ClickEscapeButtonEvent(int PartsNumber, int MouseX, int MouseY);
	void ClickEndButtonEvent(int PartsNumber, int MouseX, int MouseY);
	void ClickListBoxEvent(int PartsNumber, int MouseX, int MouseY);
	void ChangeDebugCheckEvent(int PartsNumber, bool Flg);
	void MouseWheelEvent(int PartsNumber, int Forward, int Back);
	void KeyPressEvent(int PartsNumber, int KeyCode);
	void RunStep(int Step);
	void BeginPartsUpdateEvent(int PassedTime);
	void DoMessage(string FuncName, int Step);
	void DoFunctionCall(string FuncName, int Step);
	int CreateDelegateObjectID(string FuncName, int Step);
	string GetStepText(int Step);
	void ReleaseScene();
	void Log(string Text);
	void LogLine(string Text);
};

class CADVCallFunction
{
public:
	int gi(string FName, int Step, int Index);
	float gf(string FName, int Step, int Index);
	bool gb(string FName, int Step, int Index);
	string gs(string FName, int Step, int Index);
	bool SYS_ADV_CallFunction(string CFN, string FN, int St, int ID, bool EOL, string ST);
	void OFC(bool Empty, bool EOL, string ST);
	string GetArgument(int ID);
	string GetTypeName(int TypeID);
};

class CMoveCursorDummy
{
public:
	void Callback();
};

class AdvBackground
{
public:
	string cgName_;
	Parts partsCg_;
	int pos_;

	string getCgName();
	void show(string cg, int panDirection, int time, bool immidiate);
	PartsMotion getPartsMotionCameraPan(int fadeType, int panDirection, int time);
	void hide(int panDirection, int time, bool immidiate);
	void move(bool toRight, int time, bool immidiate);
	void release();
	bool isShow();
};

class AdvChangeCharacter
{
public:
	Parts parts_;

	void run(string current, string next);
};

class AdvEventCg
{
public:
	Parts partsCg_;

	void show(string cgName, int asraTransitionCommand, int time);
	void hide(int asraTransitionCommand, int time);
	void release();
	bool isShow();
};

class AdvFullScreenEffect
{
public:
	Parts partsCg_;

	void init(int colortype);
	void getColor(ref int r, ref int g, ref int b, int colortype);
	void show(int asraTransitionType, int time);
	void hide(int asraTransitionType, int time);
	void release();
};

class AdvMessageWindow
{
public:
	bool isShow_;

	void init();
	void show();
	void hide();
	bool isShow();
};

class AdvNamePlate
{
public:
	string currentCharacterName_;
	Parts partsCg_;

	void show(string characterName);
	string getCgName(string characterName);
	void initParts(string cgName);
	void runShowMotion();
	void hide();
	void runHideMotion();
	void onFinishHide();
	bool isShow();
};

class AdvSound
{
public:
	bool isPlayingMusic_;
	bool isPlayingLoopSound_;

	string resolveMusicName(string name);
	bool isExistSoundName(string name);
	bool isExistFxName(string name);
	void playLoopSound(string loopSound, int fadeTime);
	void stopLoopSound(int fadeTime);
	string resolveFxName(string name);
	void playSound(string soundName, bool isStopOnClick);
	bool isPlayingMusic();
	bool isPlayingLoopSound();
};

class AdvStaffroll
{
public:
	string flatBaseName_;
	Parts partsShow_;
	Parts partsHide_;

	void show(string flatBaseName);
	void hide();
};

class AdvStand
{
public:
	string cgName_;
	int defaultX_;
	int defaultY_;
	int offsetZ_;
	string prefixString_;
	string standName_;
	array@Parts parts_[4];
	Parts parent_;
	Parts offsetParent_;

	AdvStand();
	void init(int x, int y, int offsetZ, string prefixString);
	void show(string standName, int inType, bool immidiate);
	void innerShow(string standName, int inType, bool immidiate);
	void resetParts(string standName);
	void setPartsParent();
	void setMultiColorValue();
	void setPartsPos();
	void setPartsShow();
	void showBlackStand(string standName);
	PartsMotion getPartsMotionShow(int inType);
	PartsMotion getPartsMotionHide(int outType);
	void hide(int outType, bool immidiate);
	void motion(int motionType);
	void getPartsMotionBow(ref array@PartsMotion m);
	void getPartsMotionJump(ref array@PartsMotion m);
	PartsMotion getPartsMotionShake(bool isHorizontal, bool isVertical);
	string truncateStandPrefix(string n);
	void getStandOffset(string cgName, ref int x, ref int y);
	void release();
	bool isShow();
	void setShopMode(bool val);
	string getStandName();
};

class Dialog
{
public:
	int state_;
	int messageLines_;
	string pictureImageName_;
	array@Parts parts_[7];
	Parts parent_;
	DG_GeneralCallback onFinishCallback_;
	int gameObjectId_;
	bool isGetItem_;
	array@NormalButton btn_;

	Dialog();
	void init(DialogInfomation info);
	void initButton(ref DialogInfomation info);
	void fadeButton(bool val);
	void initParts(ref DialogInfomation info);
	void setPartsShow();
	void setPartsPos();
	void update();
	void fadeIn(bool val);
	void playSound();
	void setOnFinishCallback(DG_GeneralCallback onFinish);
	void setOnClickCallback(DG_ButtonClickCallback onClick);
};

class DialogInfomation
{
public:
	string caption_;
	string msg_;
	string imageName_;
	int pictureImageType_;
	string itemId_;
	bool isYesNo_;

	void setCaption(string val);
	void setMessage(string val);
	string getCaption();
	void getMessage(ref array@string msg);
	void setPictureImageType(int pictureImageType);
	void setItemId(string itemId);
	void setAnswerTypeYesNo(bool val);
	string getPictureImageName();
	string getItemId();
	bool isYesNo();
	void setPictureImageName(string imageName);
};

class SceneDialog
{
public:
	int result_;
	int state_;
	Dialog dialog_;
	bool isYesNo_;

	void init(DialogInfomation info);
	void addToBacklog(ref DialogInfomation info);
	void onClick(int index);
	void onFinishDialog();
	void run();
	bool update();
	void closeDialog();
	int getResult();
};

class CircleEffect
{
public:
	float maxScaling_;
	Parts parts_;
	int gameObjectId_;

	CircleEffect();
	void init(string imageName);
	void setPos(int x, int y);
	void setXYRot(int rot);
	void setXZRot(int rot);
	void setYZRot(int rot);
	void run(int type);
	void setMaxScaling(float maxScaling);
	void update();
	void setZ(int z);
};

class EmissionLine
{
public:
	int x_;
	int y_;
	int z_;
	int state_;
	int rot_;
	int type_;
	bool isLoop_;
	Parts parts_;
	int gameObjectId_;

	EmissionLine();
	void init(int type);
	void run();
	void resetMotion();
	void onFinish();
	void update();
	void setCenter(int x, int y);
	void setLoopMode(bool isLoop);
	void setZ(int z);
};

class HorizontalLine
{
public:
	int state_;
	int rot_;
	Parts parts_;
	int gameObjectId_;

	HorizontalLine();
	void init();
	void resetMotion();
	void onFinish();
	void update();
	void setRot(int rot);
};

class PhotonEmittor
{
public:
	array@Parts parts_;
	int gameObjectId_;
	int x_;
	int y_;

	PhotonEmittor();
	void init(int count);
	void setPos(int x, int y);
	void run();
	void update();
};

class ItemListView
{
public:
	ItemNarrowDownButton narrowDownButton_;
	int state_;
	int narrowDownType_;
	Parts partsBg_;
	Parts partsClipper_;
	VerticalScroller vScroller_;
	int gameObjectId_;
	int scrollerMax_;
	ScrollBox scrollBox_;
	bool isShopMode_;
	array@NormalButton btnUpDown_[2];
	array@ItemView itemView_;
	array@string idList_;
	unknown_delegate onFinishFadeCallback_;
	DG_ItemListViewClickCallback onClickCallback_;

	ItemListView();
	void init(ref array@string idList, bool isShopMode);
	float getScrollerPosition();
	void setScrollerPosition(float val);
	void scrollScrollerPosition(float val);
	void initButton();
	void setEnableUpDownButton();
	void onClickUpDown(int index);
	void initItems();
	void initParts();
	void update();
	void setOnClickCallback(DG_ItemListViewClickCallback cb);
	void onClick(int id);
	void updateState();
	void fadeIn(bool val, DG_GeneralCallback cb);
	void fadeButton(bool val);
	void eraseFromList(string itemId);
	void eraseIndex(int index);
	void setInitialItemPos();
	void onClickNarrowDownButton(int id);
	void Reposition(int narrowDownType);
	void fadeInItem(bool val);
	int getItemViewYPos(int index);
	string getId(int index);
	int getCount();
};

class ItemNarrowDownButton
{
public:
	array@Parts parts_[1];
	Parts parent_;
	array@NormalButton btn_;
	int gameObjectId_;

	ItemNarrowDownButton();
	void init(array@string itemIds, DG_ButtonClickCallback cb);
	string getTypeText(int type);
	void update();
	void fadeIn(bool val, DG_GeneralCallback onFinish);
	void initParts();
	void setPartsShow();
	void setPartsPos();
};

class ItemView
{
public:
	int state_;
	int count_;
	string id_;
	int x_;
	int y_;
	bool isClickable_;
	bool lastHover_;
	int clickId_;
	ref Item item_;
	bool isShow_;
	DG_ItemViewClickCallback onClickCallback_;
	array@Parts parts_[12];
	Parts parent_;
	bool isHover_;
	bool isInitialized_;
	bool isShopMode_;
	int gameObjectId_;

	ItemView();
	void init(string itemId, bool isShopMode);
	void updateState();
	void updateEnable();
	bool isMaxItemCount();
	bool isItemBuyable();
	void updateCount();
	void initParts();
	void updateShopPrice();
	void setPartsShow();
	void setPartsPos();
	void update();
	void setPartsShowState();
	bool isHover();
	void updateHover();
	void setPos(int x, int y, bool immidiate);
	void setOnClickCallback(DG_ItemViewClickCallback cb, int clickId);
	void setParent(int partsNumber);
	void setClipper(int partsNumber);
	void fadeIn(bool val, int delay);
	void onFinishFadeIn();
	void onFinishFadeOut();
	string getId();
};

class ScrollBox
{
public:
	int state_;
	array@Parts parts_[2];
	Parts parent_;
	float dragStartX_;
	float dragStartY_;
	bool isHover_;
	float scrollerMax_;
	float boxPosMax_;
	float dragStartRange_;
	int boxWidth_;
	int boxHeight_;
	DG_GetScrollerPosition getPosFunc_;
	DG_SetScrollerPosition setPosFunc_;
	DG_SetScrollerPosition scrollPosFunc_;
	int gameObjectId_;

	ScrollBox();
	void init(DG_GetScrollerPosition getPosFunc, DG_SetScrollerPosition setPosFunc, DG_SetScrollerPosition scrollPosFunc, float max);
	void changeMax(float max);
	void update();
	void setBoxPosition();
	void fadeIn(bool val, DG_GeneralCallback onFinish);
	void initParts();
	void setPartsShowState();
	void setPartsShow();
	void setPartsPos();
	bool isHover();
	void setPos(int x, int y);
};

class HVScroller
{
public:
	int state_;
	Parts parent_;
	DG_GeneralCallback onFinishMoveFocus_;
	FollowCamera followCamera_;
	float dragStartMouseX_;
	float dragStartMouseY_;
	float dragStartPartsX_;
	float dragStartPartsY_;
	int gameObjectId_;
	float width_;
	float height_;
	float focusFromX_;
	float focusFromY_;
	float focusToX_;
	float focusToY_;
	int focusTime_;
	LocalTimer timer_;

	HVScroller();
	void init(float x, float y, float width, float height);
	void initParts();
	void setPartsShow();
	void update();
	float getNonlinearDragParam(float partsStartPos, float dragWidth, float screenSize, float objectSize);
	int getPartsNumber();
	void moveFocus(float x, float y, DG_GeneralCallback onFinishMoveFocus);
	void convertMapPosToPartsPos(ref float x, ref float y, float mapX, float mapY);
	void setCameraFollowMode(bool val);
	void setCameraTarget(float x, float y);
	void fadeIn(bool val, int time, DG_GeneralCallback onFinishCallback);
	void setShow(bool val);
};

class VerticalScroller
{
public:
	int lastState_;
	int state_;
	int x_;
	int y_;
	int width_;
	int height_;
	int virtualScrollSize_;
	int rpDragStartX_;
	int rpDragStartY_;
	int rpDragStartParentPartsPos_;
	int rpWheelStartPos_;
	int rpWheelEndPos_;
	int wheelScrollPixel_;
	int rollOverValue_;
	int rollOverTime_;
	int rpRollOverStart_;
	int rpRollOverDest_;
	int wheelScrollTime_;
	int motionType_;
	bool isVertical_;
	LocalTimer timer_;
	Parts parent_;
	int gameObjectId_;

	VerticalScroller();
	void init(int x, int y, int width, int height, int virtualHeight, int wheelScrollPixel, bool isVertical);
	void setScrollType(int time, int type);
	void changeVirtualHeight(int virtualHeight);
	int getPartsNumber();
	void update();
	void startWheel(bool isBackward);
	void setValiableRange(ref int value);
	bool setValiableRangeF(ref float value);
	float getNearlySnapPosition(int val);
	void setRealPosition(float value);
	float getRealPosition();
	bool isInRect();
	void setPos(float pos);
	int getDragDistance();
	float getMouseAccelaration();
	void scrollTo(float pos);
	void snap();
	float getMoveToDestination();
	float getCurrentPosition();
	void forceWheel(bool isBackward);
};

class PlayerButton
{
public:
	ref Player player_;
	int state_;
	DG_PlayerButtonClickCallback cb_;
	array@Parts parts_[12];
	Parts parent_;
	bool isHover_;
	bool lastHover_;
	bool isEnable_;
	int w_;
	int h_;
	int x_;
	int y_;
	int gameObjectId_;

	PlayerButton();
	void init(string playerId, DG_PlayerButtonClickCallback cb);
	void initParts();
	void setNumberPartsPos(int start, int x, int y);
	void setPartsParam();
	void setPartsShow();
	void setPartsPos();
	void update();
	void updateHover();
	void updatePartsShowState();
	void setPos(int x, int y);
	bool isHover();
	void setEnable(bool val);
	void fadeIn(bool val, int delay, DG_GeneralCallback cb);
	bool isEnable();
};

class SceneTargetPlayerSelect
{
public:
	int state_;
	array@Parts parts_[1];
	Parts parent_;
	TimerCallback timerCb_;
	array@PlayerButton btnPlayer_;
	array@string playerId_;
	int targetMode_;
	NormalButton btnClose_;
	int clicked_;

	SceneTargetPlayerSelect();
	void init(int targetMode);
	void setButtonState();
	void run();
	void onFinishFade();
	void setButtonEnableByExp();
	void setButtonDisableDead();
	void initButton();
	void setButtonPos();
	void initCharcterList();
	void initParts();
	void setPartsShow();
	bool update();
	void onClickCancel(int id);
	void onClick(string playerId);
	void fadeButton(bool val);
	bool isFinish();
	void fadeIn(bool val);
	string getTargetPlayerId();
};

class TimerCallback
{
public:
	LocalTimer timer_;
	DG_GeneralCallback cb_;
	bool isRunning_;
	int time_;
	int gameObjectId_;

	TimerCallback();
	void setTimer(int time, DG_GeneralCallback cb);
	void update();
	void release();
	int getTime();
	bool isRunning();
};

class BadConditionView
{
public:
	int state_;
	int index_;
	string id_;
	array@Parts parts_[3];
	Parts parent_;
	int gameObjectId_;

	BadConditionView();
	void init(string id, int index);
	void initParts();
	void changeIndex(int index);
	void updateCount();
	void setPartsShow();
	void setPartsPos();
	int getPartsX(int index);
	void update();
	void fadeIn(bool val);
	string getId();
};

class CountingNormalButton
{
public:
	array@Parts parts_[2];
	Parts parent_;
	int state_;
	DG_CountButtonGetCount cbGet_;
	NormalButton btn_;
	int gameObjectId_;

	CountingNormalButton();
	void init(string caption, DG_CountButtonGetCount cbGet);
	void setPos(int x, int y);
	void setZ(int z);
	void update();
	void fadeIn(bool val, DG_GeneralCallback onFinish);
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void updateCount();
	void setClickCallback(DG_ButtonClickCallback onClick, int id);
};

class FullScreenFlat
{
public:
	Parts parts_;
	DG_GeneralCallback onFinish_;
	bool isRunning_;
	string soundName_;
	int gameObjectId_;

	FullScreenFlat();
	void init(string flatName, string soundName, bool isCenter);
	void update();
	void release();
	void join(int time);
	bool isFinish();
	void run(float timeScaling);
	void setOnFinishCallback(DG_GeneralCallback onFinish);
};

class Hallucination
{
public:
	float x_;
	float y_;
	float vx_;
	float vy_;
	float rot_;
	float vRot_;
	Parts parts_;
	int gameObjectId_;

	Hallucination();
	void init();
	void update();
	void fadeIn(bool val, DG_GeneralCallback onFinish);
	void initParts();
	void setPartsShow();
	void setPartsPos();
};

class HelperCountView
{
public:
	array@Parts parts_[4];
	Parts parent_;
	int x_;
	int y_;
	int gameObjectId_;

	HelperCountView();
	void init();
	void initParts();
	void setPartsValue();
	void update();
	void setPos(int x, int y);
	void updateCount();
	void fadeIn(bool val, unknown_delegate onFinish);
	void setPartsShow();
	void setPartsPos();
};

class HpBar
{
public:
	array@Parts parts_[3];
	Parts parent_;
	string baseCgName_;
	int current_;
	int max_;
	int barHeight_;
	int x_;
	int y_;
	bool isShowNumber_;
	DG_GeneralCallback onFinish_;
	int gameObjectId_;

	HpBar();
	void init(int current, int max, bool isShowNumber, string baseCgName);
	void initAsPlayer(ref Player player);
	void update();
	void changeValue(int to, DG_GeneralCallback onFinish);
	void onChangeHpCallback(int val);
	void setPos(int x, int y);
	void move(int x, int y);
	int getX();
	int getY();
	void setZ(int z);
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void updateValue(bool isMotion, int valueFrom, int valueTo);
	void onFinishMotion();
	void setPartsFadeState();
	int getBarWidth(int value);
	void setShow(bool val);
	void setParent(int parentPartsNumber);
	void fadeIn(bool val, ref PartsMotion m);
};

class MessagePopup
{
public:
	int state_;
	int x_;
	int y_;
	string msg_;
	array@Parts parts_[2];
	Parts parent_;
	LocalTimer timer_;
	TimerCallback timerCb_;
	DG_GeneralCallback cb_;
	int gameObjectId_;
	bool isFadeInMotion_;

	MessagePopup();
	void init(string msg);
	void initParts();
	void setPartsShow();
	void setPos(int x, int y);
	void setZ(int z);
	void setPartsPos();
	void update();
	void fadeIn(bool val);
	void popup(int time, DG_GeneralCallback cb);
	void onFinishPopup();
};

class NormalButton
{
public:
	int x_;
	int y_;
	int z_;
	int w_;
	int h_;
	bool isVertical_;
	bool lastHover_;
	bool isEnable_;
	bool isHover_;
	bool isClick_;
	string sound_;
	int origin_;
	int state_;
	string cgBase_;
	string text_;
	DG_GeneralCallback onFinishFadeOutCallback_;
	DG_ButtonClickCallback clickCallback_;
	int id_;
	Parts parent_;
	array@Parts parts_[3];
	int gameObjectId_;

	NormalButton();
	void update();
	void init(string cgBase, string text, string sound, bool isVertical);
	void initParts();
	void setTextLeftAlign(int left);
	void fadeIn(bool val);
	void fadeInCustomized(bool val, ref array@PartsMotion motions);
	void onFinishFadeIn();
	void onFinishFadeOut();
	bool isHover();
	bool isShow();
	bool isClick();
	void setPos(int x, int y);
	void setParent(int parentPartsNumber);
	void setPartsShowState();
	void setShow(bool val);
	void setEnable(bool val);
	void setBaseZ(int baseZ);
	void runClickEffectMotion();
	void updateHover();
	void updateClick();
	void updateChildPartsShowState();
	bool isEnable();
	bool isCollide();
	bool isMotion();
	void setClickCallback(DG_ButtonClickCallback cb, int id);
	void setOnFinishFadeOutCallback(DG_GeneralCallback onFinishFadeOutCallback);
	void setZ(int z);
	void runMotion(ref PartsMotion m);
};

class PartyHpView
{
public:
	int state_;
	int z_;
	array@HpBar hpBar_;
	array@Parts parts_[2];
	array@int x_;
	array@int y_;
	Parts parent_;
	array@Parts partsLvUp_;
	PartyHpViewSkillIconList icons_;
	array@string playerIdList_;
	int gameObjectId_;

	PartyHpView();
	void reset();
	void init(int z);
	void initParts();
	void initHpBar();
	void initLevelUpEnableIcon();
	void fadeInLevelUpEnableIcon(bool val);
	void setHpBarPos();
	void getHpBarPos(int min, int max, ref int x, ref int y);
	void setPartsShow(bool val);
	void setPartsPos();
	void update();
	void fadeIn(bool val);
	void updateCoolTime();
};

class PartyHpViewSkillIcon
{
public:
	array@Parts parts_[4];
	Parts parent_;
	int index_;
	int baseX_;
	int baseY_;
	int gameObjectId_;

	PartyHpViewSkillIcon();
	void init(int index);
	void update();
	void fadeIn(bool val, unknown_delegate onFinish);
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void updateCoolTime();
};

class PartyHpViewSkillIconList
{
public:
	int state_;
	array@PartyHpViewSkillIcon skillIcons_;
	Parts parent_;
	int skillCount_;
	int gameObjectId_;

	PartyHpViewSkillIconList();
	void init();
	void update();
	void fadeIn(bool val);
	void updateCoolTime();
};

class PlayerCommonParamView
{
public:
	int state_;
	array@Parts parts_[3];
	array@BadConditionView badConditionView_;
	HelperCountView helper_;
	Parts parent_;
	int currentHelperCount_;
	int gameObjectId_;

	PlayerCommonParamView();
	void init();
	void initParts();
	void initBadConditionView();
	void setPartsShow();
	void setPartsPos();
	void update();
	void onChangeGold();
	void fadeIn(bool val);
	void onChangeHelper(int restNow, int restOld, int maxNow, int maxOld);
	void onChangeBadCondition();
};

class SystemSound
{
public:
	void playLoop(string name);
	void stopLoop(int time);
	void play(int type, string name);
	void playVoice(int number);
};

class FollowCamera
{
public:
	int gameObjectId_;
	float x_;
	float y_;
	float fx_;
	float fy_;
	float speed_;
	int lastTime_;
	LocalTimer timer_;

	FollowCamera();
	void update();
	void setPos(int x, int y);
	void reset();
	void setFollowPos(int x, int y);
	int getX();
	int getY();
};

class MapBackground
{
public:
	int focusX_;
	int focusY_;
	int state_;
	Parts partsBg_;
	DG_MapBackGroundFadeInOutCallback callback_;

	void init();
	int getParentPartsNumber();
	void fadeIn(bool val, DG_MapBackGroundFadeInOutCallback cb);
	void setFocus(int x, int y);
	void onFinishFadeIn();
	void onFinishFadeOut();
	void getCurrentFocus(ref int x, ref int y);
};

class MapBranch
{
public:
	MapChainInfo info_;
	PartsBranch branch_;
	bool isShown_;
	int parentPartsNumber_;
	int state_;
	array@Parts parts_[1];
	Parts parent_;
	int gameObjectId_;

	MapBranch();
	void init(ref MapChainInfo info, int parentPartsNumber);
	void initParts();
	void setPartsShow();
	void fadeIn(bool val);
	void update();
	void showNewBranch(DG_GeneralCallback onFinishCallback);
	void getCenter(ref int x, ref int y);
};

class MapCloud
{
public:
	int fadeTime_;
	array@Parts parts_[2];
	Parts parent_;
	int sx_;
	int sy_;
	int ex_;
	int ey_;
	int aliveTime_;
	int shadowHeight_;
	LocalTimer timer_;
	int gameObjectId_;

	MapCloud();
	void init(int parentPartsNumber);
	void update();
	void updateMotion();
	void reset();
	void getMoveArea(ref int sx, ref int sy, ref int ex, ref int ey);
	void initParts(int parentPartsNumber);
	void getMotion(ref array@PartsMotion m, ref array@PartsMotion m2);
	void setPartsShow();
	void setPartsPos();
};

class MapFrame
{
public:
	array@Parts parts_[2];
	Parts parent_;
	int gameObjectId_;

	MapFrame();
	void init();
	void update();
	void fadeIn(bool val, unknown_delegate onFinish);
	void initParts();
	void setPartsShow();
	void setPartsPos();
};

class MapMoveInfo
{
public:
	array@int x_;
	array@int y_;
	array@bool isEncount_;
	int currentIndex_;

	void init(array@string route);
	bool getNextNode(ref int fromX, ref int fromY, ref int toX, ref int toY, ref bool encount);
	void reset();
	int getNodeCount();
	void addEncountPoint();
	bool isEncount(int nodeIndex);
	void getPos(int nodeIndex, ref int fromX, ref int fromY, ref int toX, ref int toY);
	int getDistance(int nodeIndex);
};

class MapPlaceButton
{
public:
	DG_MapPlaceButtonClickCallback callback_;
	ref MapPlace place_;
	int id_;
	int state_;
	int buttonWidth_;
	int buttonHeight_;
	bool isClickable_;
	bool isHover_;
	bool lastHover_;
	Parts parent_;
	array@Parts parts_[4];
	int gameObjectId_;

	MapPlaceButton();
	void init(int parentPartsNumber, string placeId, DG_MapPlaceButtonClickCallback cb, int id);
	void update();
	void updateHover();
	void initParts();
	void fadeIn(bool val);
	void onFinishFadeIn();
	void onFinishFadeOut();
	bool isHover();
	void updateButtonState();
	bool isClick();
	void setParent(int partsNumber);
	void setClickable(bool val);
};

class PartsBranch
{
public:
	Parts parts_;
	int gameObjectId_;

	PartsBranch();
	void init(int parentPartsNumber);
	void setPos(int x1, int y1, int x2, int y2);
	void update();
	void setShow(bool val);
	void fadeIn(bool val, DG_GeneralCallback onFinishCallback);
};

class PlayerMapIcon
{
public:
	DG_GeneralCallback onFinishMoveCallback_;
	int state_;
	string placeId_;
	array@Parts parts_[2];
	Parts parent_;
	int w_;
	LocalTimer t_;
	array@PartsMotion motion_;
	MapMoveInfo mapMoveInfo_;
	int currentNode_;
	int gameObjectId_;

	PlayerMapIcon();
	void init(int type, int parentPartsNumber, string placeId);
	void update();
	void setCurrentPlacePos();
	void fadeIn(bool val);
	void moveTo(int fx, int fy, int tx, int ty, DG_GeneralCallback onFinishMoveCallback);
	void setDirection(bool isLeft);
	void onFadeInFinish();
	void onFinishMove();
	void getCurrentPos(ref int x, ref int y);
};

class SceneWorldMap
{
public:
	WorldMap worldMap_;
	MapMoveInfo moveInfo_;
	int index_;
	bool isEncount_;
	string currentPlaceId_;
	bool isExit_;
	Parts partsDoneAutoSave_;
	FullScreenFlat flat_;
	NormalButton btnCamp_;
	string placeIdMoveTo_;

	SceneWorldMap();
	void setPlaceButtonClickable(bool val);
	void init(string placeId, bool isLoadAutoSave);
	void runAutoSavePopup();
	void run();
	void onFinishFadeIn();
	void fadeIn(bool val, int time, DG_GeneralCallback onFinishCallback);
	void onFinishMoveFadeOut();
	string getPlaceIdMoveTo();
	void onFinishShowNewBranch();
	void onFinishFocusToPlayer();
	void onClickPlace(string placeId);
	void onFinishMovePlayerIcon();
	void onFinishEncountFadeOut();
	void openMapEncount();
	void onFinishEncountFadeIn();
	void moveNextNode();
	bool update();
	void onClickCampButton(int id);
	void onClickCampButtonFadeOut();
	void onClickCampButtonFadeIn();
};

class WorldMap
{
public:
	array@MapPlaceButton btnPlace_;
	array@MapBranch branch_;
	DG_GeneralCallback onFinishShowNewBranchCallback_;
	unknown_delegate onFinishMoveIconCallback_;
	DG_OnClickPlaceCallback onClickPlaceCallback_;
	int state_;
	int focusBranchIndex_;
	bool isShownNewBranch_;
	Parts partsBg_;
	Parts partsLesus_;
	PlayerMapIcon playerIcon_;
	HVScroller hvScroller_;
	MapFrame mapFrame_;
	bool isFollowPlayer_;
	array@MapCloud cloud_[10];
	string currentPlaceId_;
	int gameObjectId_;

	WorldMap();
	void showNewBranch(DG_GeneralCallback onFinishShowNewBranchCallback);
	void innerShowNewBranch();
	void onFinishMoveFocus();
	void onFinishShowNewBranch();
	void init(string placeId);
	void initPlayerIcon();
	void initCloud();
	void showObject(bool val);
	void initBranch();
	void initPlaceButton();
	void onPlaceButtonClick(int index);
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void update();
	void setFollowPlayerIcon(bool val);
	void movePlayerIcon(int fx, int fy, int tx, int ty, DG_GeneralCallback onFinishMoveIconCallback);
	void moveFocus(int x, int y, DG_GeneralCallback onFinishCallback);
	void setOnClickPlaceCallback(DG_OnClickPlaceCallback onClickPlaceCallback);
	void fadeIn(bool val, int time, DG_GeneralCallback onFinishCallback);
	void fadeBranch(bool val);
	void fadePlaceButton(bool val);
	void setPlaceButtonClickable(bool val);
};

class DungeonBackground
{
public:
	ref Dungeon dungeon_;
	Parts partsBg_;
	array@DungeonSideObject sideObject_[3];
	int gameObjectId_;

	DungeonBackground();
	void init(string dungeonId);
	void update();
	void fadeIn(bool val, DG_GeneralCallback onFinish);
	void initParts();
	void setPartsShow();
	void setPartsPos();
};

class DungeonCardView
{
public:
	int state_;
	bool isHover_;
	bool isPurge_;
	bool isEnable_;
	bool isClicked_;
	bool lastHover_;
	float localX_;
	float localY_;
	float cameraX_;
	float height_;
	int clickId_;
	bool isNotCard_;
	ref CardInfomation info_;
	DG_CardClickCallback onClickCallback_;
	DG_GeneralCallback onFinishOpenCallback_;
	DG_GeneralCallback onFinishFadeInCallback_;
	array@Parts parts_[5];
	Parts parent_;
	int r_;
	int g_;
	int b_;
	float screenX_;
	float screenY_;
	float scale_;
	ref DungeonCard card_;
	TimerCallback purgeTimer_;
	int gameObjectId_;

	DungeonCardView();
	void setFinishCardOpenCallback(DG_GeneralCallback onFinishOpenCallback);
	void init(ref DungeonCard card, DG_CardClickCallback onClickCallback, int clickId, int r, int g, int b);
	void onChangeCard();
	void initParts();
	void adjustTextWidth();
	void setPartsZPos();
	void setPartsAlpha();
	int getPartsAlpha();
	void setPartsShadow();
	void setPartsShow();
	void setPartsOrigin();
	void setPartsOpenState();
	void setPartsTransformedPosition();
	void getPartsTransformedPosition(ref float x, ref float y, ref float scaling);
	void update();
	void updateHover();
	void setCameraPos(float x);
	void setLocalPos(float x, float y);
	void onFinishCardOpen();
	void onFinishChangeCardType();
	void onOpenCard();
	bool isHover();
	bool getHoverState();
	bool isClickable();
	bool isMouseCursorOnCard();
	ref DungeonCard getDungeonCard();
	void purge();
	void fadeIn(bool val, DG_GeneralCallback callback);
	void onFinishFadeIn();
	void setEnable(bool val);
};

class DungeonCenterCursor
{
public:
	int state_;
	array@Parts parts_[2];
	Parts parent_;
	LocalTimer timer_;
	int gameObjectId_;

	DungeonCenterCursor();
	void init();
	void initParts();
	void fadeIn(bool val);
	void setPartsShow();
	void setPartsPos();
	void update();
};

class DungeonDotView
{
public:
	int state_;
	array@Parts parts_;
	Parts parent_;
	int width_;
	int height_;
	Dungeon dungeon_;
	int gameObjectId_;

	DungeonDotView();
	void init(string dungeonId);
	void initParts();
	void createDotParts(ref Parts p, int x, int y, int r, int g, int b);
	void setPartsShow();
	void setPartsPos();
	void update();
	void fadeIn(bool val);
	void setPlayerPos(int x, int y);
};

class DungeonLineView
{
public:
	int state_;
	float playerPosX_;
	float viewlocalY_;
	float moveFromX_;
	float moveFromY_;
	float moveDirection_;
	int r_;
	int g_;
	int b_;
	int fadeFinishCount_;
	ref DungeonLine dungeonLine_;
	array@DungeonCardView cardView_;
	DG_GeneralCallback onFinishMoveForwardCallback_;
	DG_GeneralCallback onFinishMoveSidewaysCallback_;
	DG_GeneralCallback onFinishCardOpenCallback_;
	DG_GeneralCallback onFinishFadeInCallback_;
	DG_OnLineCardClickCallback onClickCallback_;
	TimerCallback timerMoveForward_;
	TimerCallback timerMoveSideways_;
	TimerCallback timerOpenCard_;
	int gameObjectId_;

	DungeonLineView();
	void init(ref DungeonLine dungeonLine, float playerXPos, float viewLocalY, int r, int g, int b);
	void update();
	void moveForward(DG_GeneralCallback onFinishCallback);
	void moveSideways(int playerXPos, DG_GeneralCallback onFinishMoveSidewaysCallback);
	void openCard(int playerXPos, DG_GeneralCallback onFinishOpenCardCallback);
	void innerOpenCard(int xPos);
	void purgeAnotherCard(int xPos);
	void setOnClickCallback(DG_OnLineCardClickCallback onClickCallback);
	void initCardView();
	void setCardViewPos();
	void setCardCameraPos();
	void onFinishMoveForward();
	void setSelectable();
	void onFinishMoveSideways();
	void onFinishCardOpen();
	void onCardClick(int index);
	void disableCard();
	void fadeIn(bool val, DG_GeneralCallback callback);
	void onCardViewFadeInFinish();
};

class DungeonMiniMap
{
public:
	int state_;
	int x_;
	int y_;
	array@Parts parts_[4];
	Parts parent_;
	string dungeonId_;
	int viewDepth_;
	int gameObjectId_;

	DungeonMiniMap();
	void init(string dungeonId);
	void initParts();
	void setPlayerPos(int x, int y);
	void setPartsShow();
	void setPartsPos();
	void update();
	void fadeIn(bool val);
};

class DungeonPlayerPiece
{
public:
	int state_;
	array@Parts parts_[1];
	Parts parent_;
	int position_;
	string playerId_;
	int gameObjectId_;

	DungeonPlayerPiece();
	void init(string playerId, int position);
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void getPartsPos(ref int x, ref int y, int index);
	void update();
	void fadeIn(bool val);
	void moveSideWays(bool isLeft);
	void moveFront();
	void changePosition(int position);
	void onFinish();
	string getId();
};

class DungeonPlayerPieceRef
{
public:
	ref DungeonPlayerPiece val;
};

class DungeonPlayerPieceGroup
{
public:
	array@DungeonPlayerPieceRef piece_;
	array@DungeonPlayerPieceRef deletedPiece_;
	bool isRanceOnlyMode_;
	int gameObjectId_;

	DungeonPlayerPieceGroup();
	void init(bool isRanceOnlyMode);
	void reset();
	void update();
	void fadeIn(bool val, unknown_delegate onFinish);
	void moveFront();
	void moveSideWays(bool isLeft);
	void updateCharacter();
	bool isChanged(ref array@string l, ref array@string r);
	void reposition();
	void moveToErase(ref array@string eraseIds);
	void addPiece(ref array@string addIds);
	void sortIds(ref array@string pIds);
};

class DungeonSideObject
{
public:
	Parts parent_;
	Parts partsFlat_;
	string flatName_;
	int posType_;
	int inOutType_;
	int gameObjectId_;

	DungeonSideObject();
	void init(string flatName, int posType);
	void update();
	void fadeIn(bool val, DG_GeneralCallback onFinish);
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void startFlat();
};

class SceneDungeon
{
public:
	int state_;
	int playerX_;
	int playerY_;
	string clickedCardId_;
	string dungeonCardEventName_;
	string dungeonId_;
	ref Dungeon dungeon_;
	TimerCallback fadeTimer_;
	TimerCallback waitTimer_;
	array@DungeonLineView lineView_[6];
	DungeonBackground bg_;
	DungeonCenterCursor cursor_;
	DungeonPlayerPieceGroup playerPiece_;
	DungeonMiniMap miniMap_;
	NormalButton btnCamp_;
	PlayerCommonParamView commonParamView_;
	PartyHpView hpView_;
	FullScreenFlat flat_;
	FullScreenFlat flatEffect_;

	void init(string dungeonId, int xPos, int yPos);
	void run();
	void onFinishFadeInLineView();
	void setCardViewSelectable();
	void fadeInLineView(bool val);
	bool update();
	void initCampButton();
	void initDungeonLine();
	void createNewDungeonLine();
	void onClickCard(ref DungeonCard card, int xPos, int yPos);
	void moveCardSideways();
	void onFinishMoveSideways();
	void onFinishOpenCard();
	void moveCardForward();
	void changeCurrentCard();
	void onFinishMoveForward();
	void cardSelect();
	void onMovedPlayerInFrontOfCard(CardInfomation info);
	void onFinishCallEventWait();
	void onFinishEventFadeOut();
	void onFinishEventFadeIn();
	void setPlayerY(int y);
	void setPlayerX(int x);
	void onFinishCampFadeIn();
	void onClickCamp(int id);
	void onFinishCampFadeOut();
	void callEvent();
	void fadeObject(bool val);
	void callPlayerMovedCallback();
	void onFinishGameOverFadeIn();
	bool isGameOver();
	void openDungeonEffectFlat(string flatName);
};

class AttackSkillIconView
{
public:
	int state_;
	int x_;
	int y_;
	bool isAvailable_;
	float viewValue_;
	string skillId_;
	int coolTime_;
	int mode_;
	int availableLevel_;
	bool isEquip_;
	bool isInitialized_;
	bool isShow_;
	bool isHover_;
	bool lastHover_;
	ref PlayerSkill skill_;
	DG_OnClickAttackSkillCallback cb_;
	array@Parts parts_[11];
	Parts parent_;
	int parentPartsNumber_;
	AttackSkillInfomation info_;
	int gameObjectId_;

	AttackSkillIconView();
	void init(string skillId, int mode, int availableLevel, int coolTime);
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void setRankIconShow();
	void update();
	void updateHover();
	void setPos(int x, int y);
	void initAvailable();
	void initCommonParts();
	string getSkillTypeIcon();
	string getSkillAttrIcon();
	void initNotAvailable();
	void setState(int n);
	void setEquip(bool val);
	bool isHover();
	void setZ(int z);
	void setViewValue(float value);
	void setOnClickCallback(DG_OnClickAttackSkillCallback cb);
	string getSkillId();
	void setShowInformation(bool isShow);
	void setParent(int parentPartsNumber);
	void fadeIn(bool val);
};

class AttackSkillInfomation
{
public:
	int parentPartsNumber_;
	string skillId_;
	array@Parts parts_[6];
	Parts parent_;
	int gameObjectId_;

	AttackSkillInfomation();
	void init(string skillId);
	void update();
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void setViewValue(float val);
	void setPos(int x, int y);
	void fadeIn(bool val, unknown_delegate onFinish);
	void setShow(bool val);
	void setParent(int parentPartsNumber);
};

class PartyBackground
{
public:
	int state_;
	bool isShowBg_;
	array@Parts parts_[3];
	Parts parent_;
	int gameObjectId_;

	PartyBackground();
	void init(bool isShowBg);
	void initParts();
	void setPartsShow();
	void update();
	void fadeIn(bool val);
	void changeCenter(bool isWithOutInfomation);
};

class SelectorContainer
{
public:
	ref SkillSelector obj;
};

class PartySkillSelector
{
public:
	array@SelectorContainer selector_;
	array@Parts partsEmpty_[8];
	Parts parent_;
	DG_OnSkillSelectorClickCallback cb_;
	int gameObjectId_;

	PartySkillSelector();
	void init(DG_OnSkillSelectorClickCallback cb);
	void setShowEmptyParts();
	void update();
	void onClick(int index);
	void fadeIn(bool val);
	void innerInit(ref SelectorContainer sc, int index, string skillId);
	void add(int index, string skillId);
	void erase(int index);
	void reposition();
};

class PlayerStandGroup
{
public:
	int state_;
	LocalTimer timer_;
	float currentPos_;
	float from_;
	float to_;
	VerticalScroller scroller_;
	array@PlayerStandView stand_;
	int gameObjectId_;

	PlayerStandGroup();
	void init();
	void initView(array@string playerId);
	void fadeIn(bool val);
	void update();
	void updateViewPos();
	void changePos(int val);
	void setPos(int val);
	void moveNext(bool isNext);
	float getFloatingPosition();
	void changeCenter(bool isWithOutInfomation);
};

class PlayerStandView
{
public:
	float virtualPos_;
	int state_;
	int currentIndex_;
	bool isInitialized_;
	string playerId_;
	array@Parts parts_[1];
	Parts parent_;
	int gx_;
	int gy_;
	int gameObjectId_;

	PlayerStandView();
	void init(string playerId);
	void initParts(string playerId);
	void setPartsShow();
	void setPartsPos();
	void update();
	int getIndex();
	void setVirtualPos(float virtualPos);
	void setGroupPos(int x, int y, bool isImmediate);
	void fadeIn(bool val);
};

class PlayerStatusView
{
public:
	int state_;
	array@Parts parts_[16];
	Parts parent_;
	array@string playerIds_;
	ref Player player_;
	NormalButton btnSkill_;
	int gameObjectId_;
	float currentPos_;

	PlayerStatusView();
	void init(array@string playerIds);
	void reset(string playerId);
	void initParts();
	void resetParts();
	void initNumberParts(int pIndex, string fileName, int width);
	void setPartsShow();
	void setPartsPos();
	void setPartsParam();
	void setPartsSpaceOut(int x, int y, int p1, int p2, int p3);
	void update();
	void fadeIn(bool val);
	void setFloatingPosition(float pos);
	void changePlayerId(string playerId);
	void updateParam();
	void changeCenter(bool isWithOutInfomation);
	void onClickZeroThreeSkillButton(int id);
};

class SceneParty
{
public:
	array@string playerList_;
	bool isShowBg_;
	PartyBackground bg_;
	PlayerStandGroup stand_;
	PlayerStatusView status_;
	PartySkillSelector selector_;
	array@SkillIconVirtualHorizontalView skillIcon_[4];
	array@NormalButton btnLR_[2];
	TimerCallback timerCb_;
	NormalButton btnToggleInfo_;
	NormalButton btnExit_;
	bool isFinish_;

	void init(bool isShowBg);
	void onClickToggleInformation(int index);
	void changeCenter(bool isWithOutInfomation);
	void changeCenterSkillIcon(bool isWithOutInfomation);
	void initButtons();
	void changeCenterPlayerLRButton(bool isWithOutInfomation);
	void fadeButton(bool val);
	void fadeSkillIcon(bool val);
	void fadeButtonLR(bool val);
	void onClickStandGroupMoveButton(int index);
	void run();
	bool update();
	bool isNoAlivePlayers();
	void fadeObject(bool val);
	void onFinishFadeOut();
	void initSkillButton();
	void onClickSkillButton(string skillId);
	void setEquiped(string skillId, bool val);
	void onClickSkillSelector(int index);
	void showWarningNoAlivePlayers();
	void showWarningNoPartyMembers();
	void setNextPlayer(bool val);
};

class SkillIconVirtualHorizontalView
{
public:
	array@AttackSkillIconView icons_;
	DG_OnClickSkillIcon onClickCallback_;
	Parts parent_;
	bool isWithOutInfomation_;
	int gameObjectId_;
	int index_;

	SkillIconVirtualHorizontalView();
	void init(array@string playerIds, int index);
	void update();
	void fadeIn(bool val, unknown_delegate onFinish);
	void setClickCallback(DG_OnClickSkillIcon cb);
	void setFloatingPosition(float val);
	void onClick(string skillId);
	void getAvailableLevelPlayerNewSkill(string playerId, int index, ref string skillId, ref int openLevel);
	void setEquiped(string skillId, bool val);
	void changeCenter(bool isWithOutInfomation);
	void setIconPos();
};

class MonsterAttackView
{
public:
	int state_;
	MonsterAttack attack_;
	MonsterAttackAttribute attr_;
	bool isFirst_;
	int position_;
	array@Parts parts_[1];
	Parts parent_;
	int gameObjectId_;

	MonsterAttackView();
	void init(int parentPartsNumber);
	void reset(MonsterAttack attack, int position);
	void fadeIcon(bool val, DG_GeneralCallback cb);
	void resetParts();
	void initIconParts();
	void setShowAttackDisable();
	string getAttackTypeIcon();
	bool isSingleTarget();
	void setPartsShow();
	void setPartsPos();
	void update();
	void setPos(int x, int y);
	void updatePosition(int position);
};

class MonsterBuffView
{
public:
	ref MonsterInstance instance_;
	int state_;
	array@string idList_;
	array@Parts parts_;
	Parts parent_;
	int gameObjectId_;

	MonsterBuffView();
	void init(ref MonsterInstance instance);
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void update();
	void onAddBuff(string id);
	void onEraseBuff(string id);
	void updateState();
	void setPos(int x, int y);
	void setParent(int parentPartsNumber);
};

class MonsterInfomationPanel
{
public:
	ref MonsterInstance instance_;
	Parts parent_;
	Parts partsTarget_;
	Parts partsMonsterAttribute_;
	HpBar hpBar_;
	MonsterAttackView atkView_;
	MonsterBuffView buffView_;
	bool isNotShow_;
	bool isFixedPosition_;
	int gameObjectId_;

	MonsterInfomationPanel();
	void resetAttackView(MonsterAttack monsterAttack);
	void init(ref MonsterInstance instance);
	void update();
	void changeValue();
	void onFinishChangeValue();
	void fadeIn(bool val, DG_GeneralCallback onFinish);
	void movePosition();
	void setPosition();
	void showTargetMark(bool val);
	bool isNotShow();
	void updateBuffView();
};

class MonsterStand
{
public:
	FullScreenDeadEffect deadEffect_;
	int ambientMaxAlpha_;
	int offsetX_;
	int offsetY_;
	bool isChangedFill_;
	bool isFocus_;
	string bgId_;
	int centerX_;
	int centerY_;
	bool isFixedPosition_;
	DG_GeneralCallback onFinishShowDamageCallback_;
	ref MonsterInstance instance_;
	int position_;
	TimerCallback cbTimer_;
	array@Parts parts_[6];
	Parts parent_;
	Parts offsetParent_;
	LocalTimer timer_;
	PhotonEmittor photonEmittor_;
	int gameObjectId_;

	MonsterStand();
	void movePosition();
	void changeIn();
	void runMotionChangeIn();
	void setParentPartsPosition(int pos);
	void init(ref MonsterInstance instance, string battleBackGroundId);
	void setFixedPosition(int x, int y);
	void initParts();
	void setOffsetParentPos();
	void setPartsZ(int pos);
	void setPartsShow();
	void update();
	void setPartsOrigin();
	float getRealWidth();
	float getRealHeight();
	void move();
	void runMoveMotion(int from, int to);
	PartsMotion createOffsetParentPartsMoveMotion(int from, int to);
	void getOffsetParentPosition(ref float x, ref float y, int pos);
	void loadOffsetPosition();
	PartsMotion createParentPartsMoveMotion(int from, int to);
	PartsMotion createAmbientPartsMoveMotion(int from, int to);
	int getAmbientPartsAlpha(int pos);
	void showAttack();
	void showDamage(DG_GeneralCallback cb);
	void resetWhiteFillPosition();
	void onFinishShowDamage();
	void showDeadMotion();
	void showNormalDeadMotion();
	void showDeadMotionChangeIn();
	void getCenter(ref int x, ref int y);
	void showFixedDeadMotion(int type);
	void getParentPartsPosition(ref int x, ref int y, int pos);
	int getParentPartsScaling(int pos);
	void setFocus(bool val);
	int getParentPartsAlpha(int pos);
	void showFocusMotion(bool val);
	void showTargetMark(bool val);
	int getBaseZ();
	void fadeOut();
};

class MonsterView
{
public:
	ref MonsterInstance instance_;
	ref Monster monster_;
	DG_GeneralCallback onFinishShowDamageCallback_;
	DG_GeneralCallback onFinishShowNameCallback_;
	string battleBackGroundId_;
	MonsterStand stand_;
	MonsterInfomationPanel infos_;
	DamageNumber damage_;
	DamageEffect effect_;
	TimerCallback cbTimer_;
	TimerCallback cbDamageTimer_;
	Parts partsName_;
	bool isShownName_;
	bool isChanged_;
	bool isDeadMotionFinish_;
	int turn_;
	int gameObjectId_;

	MonsterView();
	bool isShownName();
	void init(ref MonsterInstance instance, string battleBackGroundId, int turn);
	void resetPosition();
	void initAsChange(ref MonsterInstance instance, string battleBackGroundId, int turn);
	void getIn();
	void initViewObject();
	void initMonsterInfoView();
	void setTurn(int val);
	void updateInfoView();
	bool isFixedPosition();
	void initNameParts();
	void update();
	void setFocus(bool val);
	void onChangePosition();
	void setDamage(int val, string effectName, bool isDamage, int type, int delay, DG_GeneralCallback onFinishShowDamageCallback);
	void runDamage(bool isDamage, int delay);
	void initDamage(int val, string effectName, bool isDamage, int type);
	void onFinishDeadMotion();
	void onFinishShowDamage();
	void showAttack();
	void setTargetMark(bool val);
	void showEffect(string flatName);
	void getDamagePosition(ref int x, ref int y);
	bool isChanged();
	void showName(DG_GeneralCallback onFinishShowNameCallback);
	void onFinishShowName();
	void getShowDamageTypeFromTargetInfoType(int type, ref bool isCritical, ref bool isDefence, ref bool isMessage, ref int resistType);
	void resetChanged();
	void fadeOut();
	bool isDeadMotionFinish();
	void updateBuffView();
};

class MonsterViewRef
{
public:
	ref MonsterView val;
};

class MonsterViewGroup
{
public:
	ref BattleModel battleModel_;
	string battleBackGroundId_;
	array@MonsterViewRef view_;
	array@MonsterViewRef deadStock_;
	array@MonsterViewRef deadMotionWaitList_;
	TimerCallback showNameTimer_;
	TimerCallback timer_;
	DG_GeneralCallback onFinishShowNameCallback_;
	int gameObjectId_;

	MonsterViewGroup();
	void init(ref BattleModel model, string battleBackGroundId);
	void update();
	void setNewTurn(int turn);
	void showAttack(int index, DG_GeneralCallback onFinish, bool isUpdateBuff);
	void setFocusByTargetInfomation(ref array@TargetInfomation targets);
	void resetFocus();
	void showBuffEffect(ref array@TargetInfomation targets, string effectName, DG_GeneralCallback onFinish);
	void updateBuffView();
	void showName(DG_GeneralCallback onFinishShowName);
	void innerShowName();
	bool isExistNotShowNameMonster();
	void showMonsterNameNext();
	void showDamage(ref array@TargetInfomation targets, string effectName, DG_GeneralCallback onFinish);
	void showHeal(ref array@TargetInfomation targets, string effectName, DG_GeneralCallback onFinish);
	void add(ref MonsterInstance instance);
	void erase(int index);
	void setTarget(int targetType, bool val);
	void resetPosition(DG_GeneralCallback cb);
	void fadeOut();
};

class BattlePlayerStand
{
public:
	array@Parts parts_[3];
	Parts parent_;
	int x_;
	int y_;
	ref Player player_;
	bool isDead_;
	bool isFocus_;
	int gameObjectId_;

	BattlePlayerStand();
	void init(string id);
	void update();
	void fadeIn(bool val, DG_GeneralCallback onFinish);
	void initParts();
	void setPartsOrigin();
	void setPartsShow();
	void setPartsPos();
	void setFocus(bool val);
	void showDamageMotion();
	void showDeadMotion();
	void setPos(int x, int y);
	void move(int x, int y);
	bool isMotion();
};

class PlayerBuffView
{
public:
	ref Player player_;
	int state_;
	int x_;
	int y_;
	array@string idList_;
	array@Parts parts_;
	Parts parent_;
	int gameObjectId_;

	PlayerBuffView();
	void init(string playerId);
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void update();
	void onAddBuff(string id);
	void onEraseBuff(string id);
	void updateState();
	void setPos(int x, int y);
	void move(int x, int y);
	void fadeIn(bool val);
};

class PlayerView
{
public:
	int x_;
	int y_;
	ref Player player_;
	BattlePlayerStand stand_;
	HpBar hpBar_;
	PlayerBuffView buffView_;
	DamageNumber damage_;
	MessagePopup popup_;
	DamageEffect effect_;
	DG_GeneralCallback onFinishShowDamageCallback_;
	int gameObjectId_;

	PlayerView();
	void init(string id);
	void resetPos();
	void showDeadMotion();
	void setPos();
	void fadeIn(bool val);
	void setPosStand();
	void setPosHpBarBuffView();
	void update();
	void setFocus(bool val);
	void setDamage(int val, string effectName, bool isDamage, int delay, DG_GeneralCallback onFinishShowDamageCallback);
	void hideHpBar();
	void onFinishShowDamage();
	void popupMessage(string msg, DG_GeneralCallback cb);
	void hidePopup();
	void updateHp();
	string getId();
	void showEffect(string effectName);
	bool isMotion();
	void updateBuffView();
};

class PlayerViewRef
{
public:
	ref PlayerView val;
};

class PlayerViewGroup
{
public:
	TimerCallback timer_;
	DG_GeneralCallback onFinishEraseDead_;
	DG_GeneralCallback onFinishShowDamage_;
	array@PlayerViewRef view_;
	array@PlayerViewRef playerViewDead_;
	int gameObjectId_;

	PlayerViewGroup();
	void init();
	void update();
	void joinDeadMotion();
	void setFocus(string id);
	void fadeIn(bool val);
	void updateHp();
	int getPlayerViewIndexFromId(string playerId);
	void showPopupMessage(string id, string msg, DG_GeneralCallback cb);
	bool eraseDead();
	void onFinishEraseDead();
	void resetPos();
	void addHelper();
	void showDamage(ref array@TargetInfomation targets, string ef, DG_GeneralCallback cb);
	void onFinishShowDamage();
	void showHeal(ref array@TargetInfomation targets, DG_GeneralCallback cb);
	void showBuffEffect(ref array@TargetInfomation targets, DG_GeneralCallback onFinish);
	string getEffectName(string skillId);
	void updateBuffView();
};

class BattleResultMessage
{
public:
	array@Parts parts_;
	array@string msg_;
	bool isInitialized_;
	Parts parent_;
	int gameObjectId_;

	BattleResultMessage();
	void init();
	void update();
	void fadeIn(bool val, unknown_delegate onFinish);
	void initParts();
	void setPartsShow();
	void setPartsPos();
};

class BattleResultStand
{
public:
	int state_;
	array@Parts parts_[1];
	Parts parent_;
	int gameObjectId_;

	BattleResultStand();
	void init();
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void update();
};

class BattleResultView
{
public:
	int state_;
	array@Parts parts_[2];
	array@Parts partsExp_;
	array@Parts partsGold_;
	array@Parts partsItem_;
	Parts parent_;
	int gameObjectId_;

	BattleResultView();
	void init(ref array@BattleBonus expBonus, ref array@BattleBonus goldBonus, int exp, int gold, string itemId);
	void initStandParts();
	int calcBonus(array@BattleBonus b, int value);
	void initBonusParts(ref array@Parts p, ref array@BattleBonus bonus, int value, int x, int y, string caption);
	void initItemParts(string itemId);
	void setPartsShow();
	void setPartsParent();
	void setPartsPos();
	void update();
};

class BonusGroupView
{
public:
	int state_;
	int totalVal_;
	int valueOrigin_;
	bool isExp_;
	array@Parts parts_[5];
	Parts parent_;
	array@BattleBonus bonus_;
	array@BonusView bonusView_;
	int gameObjectId_;

	BonusGroupView();
	void init(ref array@BattleBonus bonus, int totalVal, int valueOrigin, bool isExp);
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void update();
	void fadeIn(bool val, DG_GeneralCallback cb);
};

class BonusItemView
{
public:
	int state_;
	array@Parts parts_[6];
	Parts parent_;
	string itemId_;
	int gameObjectId_;

	BonusItemView();
	void init(string itemId);
	void initParts();
	void setPartsShow();
	void startFlat();
	void setPartsPos();
	void update();
	void fadeIn(bool val, DG_GeneralCallback cb);
};

class BonusView
{
public:
	int state_;
	int x_;
	int y_;
	BattleBonus bonus_;
	bool isBig_;
	array@Parts parts_[3];
	Parts parent_;
	int gameObjectId_;

	BonusView();
	void init(BattleBonus bonus, bool isBig);
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void update();
	void fadeIn(bool val, int delay, DG_GeneralCallback cb);
	void setPos(int x, int y);
};

class SceneBattleResult
{
public:
	array@BattleBonus exp_;
	array@BattleBonus gold_;
	string item_;
	int state_;
	bool isFinish_;
	array@Parts parts_[2];
	array@BonusGroupView bonusView_[2];
	array@BonusView bonusViewBig_;
	MessagePopup popup_;
	BonusItemView itemView_;
	BattleResultMessage msg_;
	TimerCallback timerCb_;

	void init();
	void initStand();
	void initBackGround();
	void run();
	void fadeInExpBonusBig();
	void onFinishExpBonusViewBig();
	void fadeInExpBonus();
	void onFinishExpBonusFadeIn();
	void fadeInGoldBonusBig();
	void onFinishGoldBonusViewBig();
	void fadeInGoldBonus();
	void onFinishGoldBonusFadeIn();
	void onFinishFadeInItemView();
	void fadeInStand(bool val);
	void fadeInBg(bool val);
	void fadeInBonusBig(ref array@BattleBonus b, DG_GeneralCallback cb);
	void fadeOutBonusViewBig(DG_GeneralCallback cb);
	void fadeOut();
	bool update();
	void onFinishFadeOut();
	void onFinishItemFadeIn();
};

class BattleBackground
{
public:
	int state_;
	array@Parts parts_[2];
	Parts parent_;
	string flatEffectName_;
	array@EmissionLine lines_[50];
	int gameObjectId_;
	TimerCallback timer_;
	bool isBlackOut_;
	string id_;

	BattleBackground();
	void init(string battleBackGroundId, string flatEffectName);
	void initLines();
	void stopLines();
	void startLines();
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void update();
	void shake(int mode);
	void fadeIn(bool val);
	void blackOut(bool val);
	bool isUseFlat();
};

class BattleInfoTelop
{
public:
	array@Parts parts_;
	Parts parent_;
	float sx_;
	float sy_;
	float ex_;
	float ey_;
	string msg_;
	array@float vPos_;
	float viewLength_;
	float vTextLength_;
	float rot_;
	LocalTimer t_;
	int gameObjectId_;

	BattleInfoTelop();
	void init(string msg, int sx, int sy, int ex, int ey);
	void update();
	void setParent();
	int getTextWidth();
	void setRot();
	void fadeIn(bool val, DG_GeneralCallback onFinish);
	void updatePos(bool isForceUpdate);
	void updateViewState();
	void updateVirtualPosition();
	void setPartsPos();
	float getMaxPosition();
};

class PartsContainer
{
public:
	ref Parts p;
	bool isShow;

	PartsContainer();
};

class BattleLogView
{
public:
	int state_;
	bool isBufferingMode_;
	array@string bufferMsg_;
	array@int bufferType_;
	array@PartsContainer parts_;
	Parts parent_;
	int gameObjectId_;

	BattleLogView();
	void init();
	void initParts();
	void setPartsPos();
	void update();
	void onAddLog(string msg, int type);
	void flush();
	void addLog(string msg, int type);
	void moveParts();
	int getIndexAlpha(int index);
	void getColor(int type, ref int r, ref int g, ref int b);
	void setBufferingMode(bool val);
	void fadeIn(bool val);
};

class BattleModel
{
public:
	array@string queuedMonsterId_;
	array@string allMonsters_;
	int queueIndex_;
	array@TargetInfomation target;
	array@MonsterInstance monsterInstance_;
	DG_OnEraseMonsterCallback onEraseMonster_;
	DG_OnChangeMonsterCallback onChangeMonster_;
	DG_OnAddMonsterCallback onAddMonster_;
	array@TargetInfomation targets_;
	ref Player player_;
	ref PlayerSkill playerSkill_;
	int attackerIndex_;
	MonsterAttack monsterAttack_;
	array@MonsterAttack monsterAttackList_;
	array@int monsterAttackerIndexList_;
	int turn_;
	int turnKillCount_;
	int turnTotalCoolTime_;
	int allMonsterHp_;
	bool isPonanChangCalcMode_;
	array@Player dummyPlayer_;

	void setTurn(int turn);
	int getTurn();
	int getEvaluation();
	int getPlayerTotalHp();
	int getMonsterTotalHp();
	void updateMonsterInstanceAttackHp();
	void init(array@string monsterList);
	void run();
	void setCallbackOnEraseMonster(DG_OnEraseMonsterCallback cb);
	void setCallbackOnChangeMonster(DG_OnChangeMonsterCallback cb);
	void setCallbackOnAddMonster(DG_OnAddMonsterCallback cb);
	void clearCallback();
	void setPlayerAction(string playerSkillId);
	void processPlayerAction(ref array@TargetInfomation result, ref int actionKind);
	void playerAttack();
	void playerHeal();
	void playerBuff();
	void setMonsterAction(int attackerIndex, MonsterAttack atk);
	void processMonsterAction(ref array@TargetInfomation result, ref int kind);
	void callNoActionMonsterShowLogCallback();
	void monsterAttack();
	void monsterHeal();
	void monsterBuff();
	void getTargetInfomation(ref array@TargetInfomation targets);
	void getTargetListPlayerAttack(string sourceId, int targetType);
	void getTargetListPlayerHeal(string sourceId, int targetType);
	void getTargetListPlayerBuff(string sourceId, int targetType, string buffId);
	void getTargetListMonsterAttack(int sourceIndex, int targetType);
	void getTargetListMonsterHeal(int sourceIndex, int targetType);
	void getTargetListMonsterBuff(int sourceIndex, int targetType, string buffId);
	void calcDamagePlayerAttack();
	void calcDamageMonsterAttack();
	void calcHealPlayer(ref PlayerSkill skill);
	void calcHealMonster();
	void addPlayerBuff(string buffId);
	void healPlayerHp();
	void healMonsterHp();
	void decPlayerHp();
	void decMonsterHp();
	void eraseSourceBuff();
	void eraseTargetBuff();
	bool eraseDeadMonster();
	bool dequeueMonster();
	bool updateMonsterList();
	bool isNoMonster();
	void addMonsterBuff(string buffId);
	void getMonsterAttackList(ref array@MonsterAttack list, ref array@int indexList);
	int getMonsterCount();
	void loadMonsterAttackList(ref MonsterAttack atk);
	void popMonsterAttack(ref MonsterAttack atk);
	bool isEmptyMonsterAttack();
	void callCheckBonusOnFinishAttack(int killCount);
	void callCheckBonusOnFinishPlayerTurn(bool isFinalTurn);
	void setDummyMode(bool val);
	ref Player getPlayerFromId2(string id);
	ref MonsterInstance getMonsterInstance(int index);
};

class BattleSystemButton
{
public:
	NormalButton btn_;
	CountingNormalButton btnAuto_;
	DG_OnBattleSystemButtonClickCallback callback_;
	int state_;
	array@Parts parts_[2];
	Parts parent_;
	HelperCountView helper_;
	int gameObjectId_;

	BattleSystemButton();
	void init();
	void update();
	void setOnClickCallback(DG_OnBattleSystemButtonClickCallback cb);
	void onClick(int i);
	void initButton();
	void setButtonPos();
	void setButtonEnable(bool val);
	void fadeIn(bool val);
	void fadeAutoButton(bool val);
	void onFinishNoItemFadeOut();
	void updateState();
	int getAutoItemCount();
};

class DamageEffect
{
public:
	Parts partsEffectFlat_;
	int x_;
	int y_;
	array@EmissionLine line_[30];
	CircleEffect circleEffect_;
	string effectName_;
	int gameObjectId_;

	DamageEffect();
	void init(string effectName);
	void setPos(int x, int y);
	void update();
	void initParts();
	void setPartsPos();
	void run(int type);
	void playSound();
	void setZ(int z);
};

class DamageNumber
{
public:
	int state_;
	array@Parts parts_[4];
	Parts parent_;
	DG_GeneralCallback onFinishCallback_;
	int value_;
	bool isDamage_;
	bool isDefence_;
	bool isCritical_;
	int resistType_;
	int numWidth_;
	int numSpan_;
	int x_;
	int y_;
	DamageEffect effect_;
	int gameObjectId_;
	TimerCallback timerCb_;
	LocalTimer t_;

	DamageNumber();
	void init(int value, string effectName, bool isDamage, bool isCritical, bool isDefence, int resistType);
	void initEffect();
	void release();
	void update();
	void run(int delay, DG_GeneralCallback onFinishCallback);
	void startPartsMotion();
	void initParts();
	void setColor();
	void setPartsShow();
	void fadeOut();
	void onFinishFadeOut();
	void setPos(int x, int y, int effectOffsetX, int effectOffsetY);
	void setPartsPos();
	void setEffectZ(int z);
};

class ExplosionEffect
{
public:
	array@EmissionLine line_[20];
	CircleEffect circleEffect_;
	TimerCallback cbTimer_;
	bool isLoop_;
	int gameObjectId_;

	ExplosionEffect();
	void init(int x, int y);
	void run(int delay);
	void innerRun();
	void update();
	void stopLoop();
};

class FullScreenDeadEffect
{
public:
	array@Parts parts_[2];
	Parts parent_;
	DG_GeneralCallback onFinish_;
	array@ExplosionEffect ef[10];
	bool isFinish_;
	int gameObjectId_;

	FullScreenDeadEffect();
	void init();
	void update();
	void showOverlay(DG_GeneralCallback onFinish);
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void run(DG_GeneralCallback onFinish);
	void onFinishFlashIn();
	void onFinishFadeOut();
	bool isFinish();
};

class Permutation
{
public:
	int permutation;
	int evaluation;

	Permutation();
};

class PonanChang
{
public:
	int result_;
	int turn_;
	int maxEvaluation_;
	int currentEvaluation_;
	BattleModel battleModel_;

	void convertSkillIdsFromPermutation(ref array@string actions, ref array@string allIds, int permutation);
	int calcEvaluation(ref array@string pAction);
	void call(BattleModel model, int turn, array@string ids, array@string allIds);
	void selectSkillSelector(ref SkillSelectorGroup selector);
	void playVoice();
};

class SceneBattle
{
public:
	string afterPlayerId_;
	bool isFinish_;
	int shakeMode_;
	TimerCallback voiceCb_;
	SkillSelectorGroup selector_;
	BattleSystemButton btnSystem_;
	int turn_;
	BattleModel battleModel_;
	MonsterAttack currentMonsterAttack_;
	string battleBackGroundId_;
	array@string monsterIds_;
	array@string usedSkillId_;
	array@string playerAttackSkillList_;
	TutorialView tutorialView_;
	array@TargetInfomation targets_;
	BattleBackground bg_;
	BattleLogView log_;
	TreasureBoxParam treasureBox_;
	TimerCallback timer_;
	TimerCallback timerFadeIn_;
	array@PlayerViewRef playerView_;
	PlayerViewGroup playerViewGroup_;
	MonsterViewGroup monsterViewGroup_;
	unknown_delegate onFinishShowNameCallback_;
	PonanChang ponanChang_;
	FullScreenFlat turnFlat_;

	SceneBattle();
	void init(BattleInfomation info);
	void run();
	void onFinishFadeIn();
	void fadeObject(bool val, DG_GeneralCallback cb);
	void startBattle();
	bool update();
	void onClickBattleSystemButton(int id);
	void allSelect();
	void startPlayerAction();
	void playerTurnHandling();
	void showPlayerBuff();
	void onFinishShowPlayerAction();
	void showPopupMessage(string playerId, string msg);
	int getPlayerAttackMessageIndex();
	void onFinishShowPopupMessage();
	void showPlayerAttackDamage();
	string getCurrentPlayerActionEffectName();
	string getCurrentMonsterActionEffectName();
	void showPlayerHeal();
	void makeReadyNextPlayerAction();
	void showMonsterNameDelayed();
	void checkPlayerNextAction();
	void setResultParam();
	void playerNextAction();
	void startMonsterAction();
	void monsterTurnHandling();
	void showMonsterBuff();
	void showMonsterAttackDamage();
	void playBattleJoinVoice();
	void playHastleVoice(ref array@string pId);
	void playBattleJoinVoiceAfter();
	void playVoice(int type, string pId);
	void playDamageVoice();
	void showMonsterHeal();
	void onFinishShowMonsterAction();
	void monsterNextAction();
	void turnEnd();
	void turnEndPostProcess();
	bool isExistDeadPlayer();
	void processAddHelper();
	void addHelperSkill();
	int getCountRandom(int cnt);
	void eraseDeadPlayerSkillFromParty();
	void callOnBattleStartCallback();
	void setControlEnable(bool val);
	void updateCoolTime(array@string usedSkill);
	void decCoolTime();
	bool isSkipMonsterAttack();
	bool isPlayerDeadAll();
	void onAddMonster(ref MonsterInstance instance);
	void onEraseMonster(int index);
	void onChangeMonster(int index, ref MonsterInstance instance);
	bool getBattleResult();
	bool isMonsterSurprizeAttack();
	void clearPlayerBuff();
	void onFinishFadeOut();
	void onChangeSkillSelectorHoverIndex(int index);
	void innerOpenFlat(string name, int time);
};

class SkillSelector
{
public:
	int state_;
	int index_;
	bool isHover_;
	bool isPartyMode_;
	string skillId_;
	string playerId_;
	bool lastHover_;
	int coolTime_;
	int selectedIndex_;
	bool isEnable_;
	array@Parts parts_[12];
	Parts parent_;
	DG_OnSkillSelecterHoverCallback hoverCb_;
	DG_OnSkillSelectorClickCallback clickCb_;
	int gameObjectId_;

	SkillSelector();
	void init(string skillId, string playerId, int index, bool isPartyMode);
	void initParts();
	void adjustNameWidth();
	void setPartsCgRange();
	void setPartsShow();
	void setPartsPos();
	void update();
	void updateHover();
	void setSelected(int index);
	void fadeIn(bool val, bool isImmidiate);
	void setShowMoveOff();
	void changeIndex(int index);
	bool isHover();
	bool getHoverState();
	void setOnClickCallback(DG_OnSkillSelectorClickCallback cb);
	int getSelected();
	void setCoolTime(int value);
	void setShowCoolTimeParts(bool val);
	void setEnable(bool val);
	void updateShowState();
	void setPartsShowState();
	void hideSelected();
	void setShow(bool val);
	void getPos(ref int x, ref int y, int index);
	void setZ(int z);
	string getId();
	void moveOff(bool val);
	void setOnHoverCallback(DG_OnSkillSelecterHoverCallback hoverCb);
	bool isEnable();
	bool isAvailable();
};

class SkillSelectorGroup
{
public:
	BattleInfoTelop telop_;
	bool isEnable_;
	array@SkillSelector selector_;
	array@int orderList_;
	int gameObjectId_;
	DG_OnChangeHoverIndex hoverCb_;
	Parts partsPanelBase_;
	Parts partsPanelChaos_;
	int lastHoverIndex_;

	SkillSelectorGroup();
	void init();
	void reset();
	void initOrderList();
	void initPanel();
	void hideSelected(string attackSkillId);
	void initSelector();
	int getIndexFromId(string id);
	void clearOrder();
	void updateCoolTime();
	void setShowMoveOff();
	void getSelectedIdList(ref array@string result);
	void getAvailableIdList(ref array@string result);
	void update();
	void onClickSelect(int index);
	void select(int index);
	bool isSelected(int index);
	int getNextNumber();
	void setEnable(bool val);
	void moveOffPanel(bool val);
	void fadeIn(bool val);
	void updateShowState();
	void setOnChangeHoverIndex(DG_OnChangeHoverIndex cb);
};

class TargetInfomation
{
public:
	string sourceId_;
	string targetId_;
	int sourceIndex_;
	int targetIndex_;
	string playerSkillId_;
	int damage_;
	int type_;
	string message_;

	void setPlayerSkillId(string id);
	string getPlayerSkillId();
	int getDamage();
	int getType();
	string getMessage();
	void setDamage(int val);
	void setType(int val);
	void setMessage(string val);
	void setSourceId(string id);
	void setSourceIndex(int index);
	void setTargetId(string id);
	void setTargetIndex(int index);
	string getSourceId();
	int getSourceIndex();
	string getTargetId();
	int getTargetIndex();
	bool isSourcePlayer();
	bool isTargetPlayer();
};

class TreasureBoxParam
{
public:
	int state_;
	int num_;
	string itemName_;
	array@Parts parts_[4];
	Parts parent_;
	int gameObjectId_;

	TreasureBoxParam();
	void init(string itemId);
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void update();
	void setParam(int num);
	void fadeIn(bool val);
};

class TutorialView
{
public:
	Parts parts_;
	int gameObjectId_;

	TutorialView();
	void init(int skillCount);
	void update();
	void fadeIn(bool val);
	void onFinishFadeOut();
};

class SceneShop
{
public:
	bool isExit_;
	int state_;
	PlayerCommonParamView commonParamView_;
	ItemListView listView_;
	NormalButton btnExit_;
	NormalButton btnCamp_;
	string id_;
	string shopName_;
	string oldPlaceName_;
	string lastBgmId_;
	Parts parent_;
	array@Parts parts_[2];

	void init(string shopId, string shopName);
	void initButton();
	void initParts();
	void setPartsShow();
	void onClickExit(int id);
	void onClickParty(int id);
	void onFinishFadeOutToParty();
	void onFinishFadeInFromParty();
	void onFinishFadeOut();
	void run();
	void fadeObject(bool val, DG_GeneralCallback cb);
	void fadeInFlat(bool val);
	bool update();
	void release();
	void onClickItem(string itemId);
	void eraseLowLevelSkillItem();
	void eraseNotUpgradableSkillItem(ref array@string itemIdList);
	bool isSkillUpgradable(string skillId);
	string upgradeSkill(string skillId);
};

class SceneItem
{
public:
	ItemListView listView_;
	NormalButton btnExit_;
	array@string itemIdList_;
	bool isFinish_;
	TimerCallback timerCb_;
	Parts parent_;
	array@Parts parts_[2];

	void init();
	void setPartsShow();
	void initButton();
	void run();
	void fadeObject(bool val);
	void onFinishFadeOut();
	bool update();
	void onClick(string itemId);
	void updateListView(string itemId);
	void useItem(string itemId, ref Player player);
};

class BalloonButton
{
public:
	int state_;
	bool isHover_;
	bool lastHover_;
	bool isEnable_;
	array@Parts parts_[4];
	Parts parent_;
	int index_;
	int gameObjectId_;
	int w_;
	int h_;
	DG_OnBalloonButtonClickCallback cb_;

	BalloonButton();
	void setEnable(bool val);
	void init(string imageName, string text, DG_OnBalloonButtonClickCallback callback, int index);
	void initParts(string imageName, string text);
	void setPartsShow();
	void setPartsPos();
	void update();
	void updateHover();
	void updatePartsShowState();
	bool isHover();
	void setPos(int x, int y);
	void fadeIn(bool val, int delay);
};

class CampBackGround
{
public:
	Parts partsBg_;
	bool isShow_;
	int gameObjectId_;

	CampBackGround();
	void init();
	void update();
	void fadeIn(bool val, DG_GeneralCallback onFinish);
	void joinFade();
};

class CampHopIcon
{
public:
	int state_;
	array@Parts parts_[1];
	Parts parent_;
	string cgName_;
	float vx_;
	float vy_;
	float x_;
	float y_;
	float maxY_;
	LocalTimer timer_;
	int lastTime_;
	LocalTimer blink_;
	int gameObjectId_;
	int bounceCount_;
	DG_GeneralCallback onClick_;
	LocalTimer fadeTimer_;
	bool isBlink_;

	CampHopIcon();
	void init(string cgName);
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void update();
	bool isHover();
	void run();
	void setIconPosition(int pos);
	void fall();
	void setOnClickCallback(DG_GeneralCallback cb);
};

class CampIcon
{
public:
	int bounceCount_;
	int state_;
	array@Parts parts_[4];
	Parts parent_;
	array@CampHopIcon icon_;
	array@string playerId_;
	int gameObjectId_;

	CampIcon();
	void init(DG_GeneralCallback onClickMirrorPiece);
	bool isGetMirrorPiece();
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void update();
	void run();
	void fadeIn(bool val);
};

class MemoView
{
public:
	int state_;
	array@Parts parts_[3];
	Parts parent_;
	int gameObjectId_;

	MemoView();
	void init(string memoText);
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void update();
	void fadeIn(bool val);
};

class SceneCamp
{
public:
	PlayerCommonParamView cpView_;
	array@BalloonButton btn_[4];
	int clicked_;
	CampIcon icon_;
	PartyHpView hpView_;
	MemoView memoView_;
	NormalButton btnExit_;
	NormalButton btnSystem_;
	CountingNormalButton btnSaveLion_;
	int imageType_;
	TimerCallback timer_;
	ref CampBackGround bg_;
	int state_;

	void init(ref CampBackGround bg, int imageType);
	void onClickMirrorPiece();
	void onClickSaveLion(int index);
	int getSaveLionCount();
	void onClickSystemMenuButton(int index);
	void run();
	void fadeObject(bool val);
	void fadeButton(bool val);
	bool update();
	void onFinishFading();
	void initButton();
	void setButtonEnable();
	void onClick(int id);
	int getNextScene();
};

class SaveObjectList
{
public:
	int state_;
	array@NormalButton btn_[80];
	DG_OnClickSaveObjectCallback cb_;
	OmakeScrollBase base_;
	Parts partsNew_;
	int pageCount_;
	int gameObjectId_;
	bool isLoadMode_;

	SaveObjectList();
	void reset();
	void init(bool isLoadMode);
	void initButton();
	void getButtonPos(ref int x, ref int y, int index);
	void update();
	void setOnClickCallback(DG_OnClickSaveObjectCallback cb);
	void onClick(int id);
	void fadeIn(bool val);
	void showButtonImmediate();
	void setPartsNewPos();
};

class SceneLoad
{
public:
	SaveObjectList list_;
	array@NormalButton btnTab_;
	TimerCallback timerCb_;
	bool isFinish_;
	NormalButton btnExit_;

	void init();
	void onClickButtonExit(int id);
	void run();
	bool update();
	void onFinishFadeOut();
	void onClick(int index);
	void fadeIn(bool val, DG_GeneralCallback cb);
};

class SceneSave
{
public:
	bool isFinish_;
	SaveObjectList list_;
	TimerCallback timerCb_;
	Parts partsRecoveryOverlay_;
	NormalButton btnExit_;

	void init();
	void run();
	void onClickButtonExit(int id);
	bool update();
	void fadeIn(bool val, DG_GeneralCallback cb);
	void onClick(int index);
	void onFinishFadeOut();
};

class SceneTitle
{
public:
	array@NormalButton btn_[12];
	int selected_;
	bool isFinish_;
	Parts partsBg_;

	void init();
	void initButton();
	void setButtonPos();
	void fadeButton(bool val);
	void fadeIn(bool val, DG_GeneralCallback cb);
	void run();
	bool update();
	void onClick(int id);
	void onFinishFadeOut();
	int getSelected();
};

class SceneGameOver
{
public:
	array@NormalButton btn_;
	int state_;
	Parts partsBg_;

	void init();
	void onFinishFadeIn();
	void onFinishFadeOut();
	void run();
	bool update();
};

class LevelUpResult
{
public:
	int state_;
	array@Parts parts_[23];
	Parts parent_;
	int nextLevel_;
	ReulstNewSkill newSkill_;
	ref Player player_;
	Player dummy_;
	string newSkillId_;
	string getSkillId_;
	TimerCallback timerCb_;
	string msg_;
	MessagePopup popup_;
	int gameObjectId_;

	LevelUpResult();
	void init(string playerId);
	void initParts();
	void setPartsValue();
	void startArrowFlat();
	void upNumber(int partsNumber, int value);
	void setPartsShow();
	void setPartsPos();
	void update();
	void fadeIn(bool val, DG_GeneralCallback onFinishFade);
	void fadeInLevel(bool val);
	void fadeInNextLevel(bool val);
	void fadeInName(bool val);
	void fadeInFlat(bool val);
	void fadeInStand(bool val);
	void fadeInNumbers(bool val);
	string getLevelUpMessage();
};

class ReulstNewSkill
{
public:
	int state_;
	int nextLevel_;
	bool isNotAvailable_;
	string skillId_;
	array@Parts parts_[2];
	Parts parent_;
	AttackSkillIconView view_;
	AttackSkillInfomation info_;
	int gameObjectId_;

	ReulstNewSkill();
	void init(string skillId, int nextLevel);
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void update();
	void fadeIn(bool val);
};

class SceneLevelGod
{
public:
	int state_;
	ref LevelUpResult result_;

	void init();
	void run();
	bool update();
	void onFinishFadeOut();
	void onClick(string playerId);
};

class AdvSelectionButton
{
public:
	int state_;
	bool isHover_;
	bool lastHover_;
	DG_OnClickAdvSelectionButtonCallback cb_;
	string id_;
	int width_;
	int index_;
	int buttonIndex_;
	int maxCount_;
	array@Parts parts_[3];
	Parts parent_;
	bool isCastleMode_;
	int gameObjectId_;

	AdvSelectionButton();
	void init(string advSelectionButtonId, int buttonIndex, int maxCount, bool isCastleMode);
	void setOnClickCallback(DG_OnClickAdvSelectionButtonCallback cb, int index);
	void initParts();
	void setButtonBaseCgRange();
	void setPartsShow();
	void setPartsPos();
	void getButtonPos(ref int x, ref int y);
	void update();
	void updateHover();
	void setPos(int x, int y);
	void fadeIn(bool val, int delay);
	bool isHover();
	string getId();
};

class SceneAdvSelection
{
public:
	string clickedId_;
	Parts partsBase_;
	NormalButton btnOpenCamp_;
	NormalButton btnOpenMenu_;
	bool isFinish_;
	bool isCastleMode_;
	array@Parts partsModeMark_[2];
	array@AdvSelectionButton btn_;

	SceneAdvSelection();
	void init(array@string selectionButtonId);
	int getFreeLayoutButtonCount(ref array@string selectionButtonId);
	void initButtonOpenCamp();
	void initParts();
	void run();
	bool update();
	void fadeIn(bool val);
	void fadeBg(bool val);
	void onFinishFadeOut();
	void onClick(int index);
	void onClickSystemMenu(int index);
	string getClickedId();
};

class SceneAdvSelection2
{
public:
	string clickedId_;
	array@string selection_;
	array@NormalButton btn_;
	array@Parts partsModeMark_[2];
	bool isFadeOutFinish_;

	SceneAdvSelection2();
	void init(array@string selection);
	void initParts();
	void run();
	bool update();
	void fadeIn(bool val);
	void onClick(int index);
	string getClickedId();
	void getPos(ref int x, ref int y, int index);
	void onFinishFadeOut();
};

class SceneMirrorPiece
{
public:
	int state_;
	Parts parent_;
	Parts partsBg_;
	Parts partsFrame_;
	Parts partsComplete_;
	array@Parts partsPieces_;
	ref MirrorPiece piece_;

	void init();
	void run();
	int getMirrorPieceIndex();
	bool update();
	void onFinishExitFadeOut();
	void initPartsPieces();
	void openPiece(int index);
	void onFinishPieceFlashShowComplete();
	void showCompleteImage();
	void showPieces(bool val);
	void onFinishComplete();
	void fadeIn(bool val, DG_GeneralCallback cb);
	void onFinishFadeOutToAdv();
	void onFinishAdvFadeIn();
	void onFinishPieceFlash();
};

class SceneMirrorPieceView
{
public:
	int pageIndex_;
	int cgCount_;
	int pageCount_;
	bool isFinish_;
	OmakeScrollBase scrollBase_;
	NormalButton btnExit_;
	array@Parts parts_;
	TimerCallback timerCb_;

	void init();
	void initMirrorPiece();
	void initButton();
	void onClickButtonExit(int index);
	void run();
	void fadeIn(bool val);
	void onFinish();
	bool update();
	void onClickThumbnailButton(int index);
};

class CgPosNavigator
{
public:
	int count_;
	int left_;
	int span_;
	int onIndex_;
	array@Parts parts_;
	Parts parent_;
	int gameObjectId_;

	CgPosNavigator();
	void init(int count);
	void update();
	void fadeIn(bool val, DG_GeneralCallback onFinish);
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void setPos(float pos);
};

class CgScrollNavigator
{
public:
	int state_;
	int cgCount_;
	DG_GetScrollerPos scrollPosMethod_;
	array@NormalButton btn_[2];
	DG_OnClickLRNavigate cb_;
	LocalTimer timer_;
	int gameObjectId_;

	CgScrollNavigator();
	void init(DG_GetScrollerPos scrollPosMethod, int cgCount);
	void setOnClickCallback(DG_OnClickLRNavigate cb);
	void onClick(int index);
	void update();
	void setButtonEnable();
	void fadeIn(bool val);
};

class SceneCg
{
public:
	int pageIndex_;
	int cgCount_;
	int pageCount_;
	bool isFinish_;
	ThumbnailList list_;
	NormalButton btnExit_;
	TimerCallback timerCb_;

	void init();
	void initThumbnailList();
	void initButton();
	void onClickButtonExit(int index);
	void initTab();
	void run();
	void fadeIn(bool val);
	void onFinish();
	bool update();
	void onClickThumbnailButton(int index);
};

class SceneCgSwipeView
{
public:
	ScrollCgView view_;
	NormalButton btnClose_;
	CgScrollNavigator navi_;
	CgPosNavigator posNavi_;
	bool isShowNavi_;
	bool isFinish_;
	TimerCallback timer_;

	void init(array@string imageName);
	void onClickCloseButton(int index);
	void fadeOut();
	void onFinishFadeOut();
	void run();
	void onClick(int index);
	bool update();
	void showNavi(bool val);
};

class ScrollCgView
{
public:
	int state_;
	array@Parts parts_;
	Parts parent_;
	int pageCount_;
	VerticalScroller scroller_;
	int gameObjectId_;
	float scrollWidth_;

	ScrollCgView();
	void init(array@string imageName);
	void initParts(array@string imageName);
	void setPartsShow();
	void setPartsPos();
	void update();
	void fadeIn(bool val);
	float getScrollPosition();
	int getPageCount();
	void scroll(bool isBackward);
};

class OmakeModeTab
{
public:
	array@Parts parts_[1];
	Parts parent_;
	DG_OnClickOmakeModeTab cb_;
	array@NormalButton tab_;
	int gameObjectId_;

	OmakeModeTab();
	void init(int count, bool isMirrorPieceMode);
	void setOnClickCallback(DG_OnClickOmakeModeTab cb);
	void update();
	void fadeIn(bool val, unknown_delegate onFinish);
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void onClick(int index);
	void setCurrentPage(int page);
};

class OmakeScrollBase
{
public:
	array@Parts parts_[1];
	Parts parent_;
	int pageCount_;
	OmakeModeTab tab_;
	array@NormalButton btnMovePage_[2];
	Parts partsBg_;
	VerticalScroller scroller_;
	int lastPage_;
	int gameObjectId_;

	OmakeScrollBase();
	void init(int pageCount, string bgImageName, bool isMirrorPieceMode);
	void initBg(string bgImageName);
	void initButton();
	void onClickMovePage(int index);
	void onClickTab(int index);
	void jumpPage(int page);
	void update();
	int getCurrentPage();
	void fadeIn(bool val, unknown_delegate onFinish);
	int getPartsNumber();
};

class ThumbnailButton
{
public:
	DG_ThumbnailButtonClickCallback cb_;
	int state_;
	int index_;
	string imageName_;
	bool isAvailable_;
	bool isHover_;
	bool lastHover_;
	int parentPartsNumber_;
	array@Parts parts_[3];
	Parts parent_;
	int gameObjectId_;

	ThumbnailButton();
	void init(string thumbnailCg, bool isAvailable, int parentPartsNumber);
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void update();
	void updateHover();
	bool isHover();
	void setPos(int x, int y);
	void setOnClickCallback(DG_ThumbnailButtonClickCallback cb, int index);
	void fadeIn(bool val);
};

class ThumbnailList
{
public:
	array@ThumbnailButton thumbnail_;
	bool isCg_;
	int count_;
	int pageCount_;
	int gameObjectId_;
	OmakeScrollBase base_;
	DG_ThumbnailButtonClickCallback cb_;

	ThumbnailList();
	void init(bool isCg);
	void initThumbnail();
	void setThumbnailPosition();
	int getThumbnailCount();
	void update();
	void fadeIn(bool val, unknown_delegate onFinish);
	void onClickThumbnail(int index);
	void setOnClickCallback(DG_ThumbnailButtonClickCallback cb);
};

class SceneReplay
{
public:
	int pageIndex_;
	int clickedIndex_;
	int cgCount_;
	int pageCount_;
	bool isFinish_;
	string runEventFuncName_;
	ThumbnailList list_;
	NormalButton btnExit_;
	TimerCallback timerCb_;

	void init();
	void initThumbnailList();
	void initButton();
	void onClickButtonExit(int index);
	void run();
	void fadeIn(bool val, DG_GeneralCallback cb);
	void onFinish();
	bool update();
	void onClickThumbnailButton(int index);
	void onFinishSelection();
};

class SceneReplaySelection
{
public:
	Parts partsBg_;
	int clickedIndex_;
	array@string selection_;
	array@NormalButton btn_;
	bool isFadeOutFinish_;

	SceneReplaySelection();
	void init(array@string selection);
	void initBg();
	void initButton();
	void run();
	bool update();
	void fadeIn(bool val);
	void onClick(int index);
	int getClickedIndex();
	void getPos(ref int x, ref int y, int index);
	void onFinishFadeOut();
};

class MusicButtonList
{
public:
	array@NormalButton btn_;
	Parts partsPlaying_;
	DG_OnClickMusicButtonCallback cb_;
	OmakeScrollBase base_;
	int gameObjectId_;

	MusicButtonList();
	void init();
	void setButtonPos();
	void getButtonPos(ref int x, ref int y, int index);
	void update();
	void setOnClickCallback(DG_OnClickMusicButtonCallback cb);
	void onClick(int index);
	void fadeIn(bool val, unknown_delegate onFinish);
	void setPlaying(int index);
};

class MusicPanelView
{
public:
	int state_;
	array@Parts parts_[4];
	Parts parent_;
	int gameObjectId_;

	MusicPanelView();
	void init();
	void initParts();
	void setPartsShow();
	void setPartsPos();
	void update();
	void start();
	void changeNameParts();
	void stop();
	void fadeIn(bool val);
};

class SceneMusic
{
public:
	MusicButtonList list_;
	array@NormalButton btnSystem_[5];
	MusicPanelView view_;
	NormalButton btnExit_;
	Parts partsAllPlaying_;
	TimerCallback timerCb_;
	bool isAllPlaying_;
	int lastPlayTime_;
	string lastPlayMusicId_;
	bool isFinish_;

	void init();
	void initSongButton();
	void initSysButton();
	void fadeButton(bool val);
	void onClickButtonExit(int id);
	void run();
	bool update();
	void fadeIn(bool val, DG_GeneralCallback onFinishCallback);
	void onFinishFadeOut();
	string getNextMusicId(string current);
	string getPrevMusicId(string current);
	int getCycleValue(int n);
	int getCurrentMusicIndex(string current);
	void play(string id, int time);
	void onClick(int index);
	void onClickSysButton(int index);
};

class Enquite
{
public:
	string currentActivityName_;
	string currentFileName_;
	ButtonParts btn_;
	ref EnquiteNormalPage normalPage_;
	ref EnquiteCharacterPage characterPage_;
	ref EnquiteFreeInput freeInputPage_;
	ref EnquiteSendingPage sendingPage_;
	bool isClickExitButton_;

	void run();
	void onLoad(string activityFileName, string activityName);
	void onRelease(string ActivityFileName, string ActivityName);
	void onExit(ref bool isCancel);
	void openNotAnsweredDialog();
	bool isAllAnswered(int startAnswerId, int endAnswerId);
};

class EnquiteCharacterPage
{
public:
	int clickedButton_;
	string activityFileName_;
	string activityName_;
	array@CheckBoxParts checkBox_;
	array@ButtonParts btnCharacter_;
	array@ButtonParts btn_[3];

	void init(string activityFileName, string activityName);
	void onClickButton(int id);
	void initCheckBox();
	void initCg();
	bool isCharacterKnown(string shortName);
	void onCheck(string partsName, bool isChecked);
	void onWheel(int partsNumber, int forward, int back);
	int getClickedButton();
};

class EnquiteFreeInput
{
public:
	string activityFileName_;
	string activityName_;
	int pnNow_;
	int pnMax_;
	ButtonParts btnOk_;
	ButtonParts btnCancel_;
	MultilineTextParts textBox_;

	void init(string activityFileName, string activityName);
	void onClick(int id);
	void onChangeText();
};

class EnquiteInfoDialog
{
public:
	string activityFileName_;
	string activityName_;

	void open(string activityFileName);
	void onLoad(string activityFileName, string activityName);
	void onClick(int partsNumber, int mouseX, int mouseY);
};

class EnquiteNormalPage
{
public:
	string activityFileName_;
	string activityName_;
	int clickedButton_;
	array@CheckBoxParts checkBox_;
	array@ButtonParts btn_[3];

	void init(string activityFileName, string activityName);
	void onClickButton(int id);
	void initCheckBox();
	void onCheck(string partsName, bool isChecked);
	int getClickedButton();
};

class EnquiteSelection
{
public:
	string checkBoxName_;
	string enableCheckCgName_;
	bool isChecked_;
	int id_;

	void setCheckBoxName(string n);
	string getCheckBoxName();
	void setChecked(bool val);
	bool isChecked();
	void setEnableCheckCgName(string n);
	string getEnableCheckCgName();
	void setAnswerId(int id);
	int getAnswerId();
};

class EnquiteSendingPage
{
public:
	string activityFileName_;
	string activityName_;
	bool isClickExit_;
	ButtonParts btnSend_;
	ButtonParts btnExit_;

	void resetIsClickExit();
	void init(string activityFileName, string activityName);
	void onClickExit(int id);
	void onClickSend(int id);
	bool isClickExit();
};

class EnquiteYesNoDialog
{
public:
	string activityFileName_;
	string activityName_;
	int clicked_;
	ButtonParts btnOk_;
	ButtonParts btnCancel_;

	bool open(string activityFileName);
	void onLoad(string activityFileName, string activityName);
	void onClick(int id);
};

class FullScreenImage
{
public:
	array@Parts parts_[1];
	Parts parent_;
	int gameObjectId_;

	FullScreenImage();
	void init(string imageName);
	void update();
	void run(DG_GeneralCallback onFinish);
	void initParts();
	void setPartsShow();
	void setPartsPos();
};

class SceneAliceLogo
{
public:
	array@FullScreenImage fsImage_[2];
	int current_;

	void init();
	void run();
	bool update();
	void onFinishFadeOut();
	void onFinishFadeOutAll();
};

class SceneSystemMenu
{
public:
	array@NormalButton btn_[8];
	int selected_;
	bool isFinish_;
	bool isShowAutoSkip_;
	Parts partsBg_;

	void init(bool isShowAutoSkip);
	void initButton();
	void setButtonPos();
	void fadeButton(bool val);
	void fadeIn(bool val, DG_GeneralCallback cb);
	void run();
	bool update();
	void onClick(int id);
	void onFinishFadeOut();
	int getSelected();
};

class SceneAdvEditor
{
public:
	array@NormalButton btn_[10];
	array@AdvStand stand_[2];
	AdvBackground bg_;
	AdvNamePlate namePlate_;
	array@Parts parts_[7];
	Parts parent_;
	array@string selected_[4];
	TimerCallback cbTimer_;
	bool isFinish_;
	array@string msg_[3];
	int menuIndex_;

	void init();
	void initParts();
	void onClick(int index);
	void onFinishButtonFadeOut();
	void showMenu();
	void inputText(ref string result);
	void showButton(bool val);
	void fadeButton(bool val);
	void run();
	void fadeIn(bool val, DG_GeneralCallback cb);
	void fadeParts(bool val);
	bool update();
	void onFinishFadeOut();
};

class SceneAdvObjectListSelector
{
public:
	OmakeScrollBase base_;
	int pageCount_;
	int selected_;
	Parts parts_;
	int mode_;
	string prefix_;
	int result_;
	bool isInDetail_;
	bool isFinish_;
	array@string cgNameList_;
	array@string captionList_;
	array@NormalButton btnSelect_;
	TimerCallback cbTimer_;
	array@NormalButton btnSys_[3];

	void init(int mode, string current);
	void initSysButton();
	void initSelectButton();
	void initTargetObjectList();
	void onClickSysButton(int id);
	void onFinishFadeOut();
	void onClick(int index);
	void updateThumbnail(int index);
	void setDetailButtonState();
	string getSelected();
	void getCgList(ref array@string cgName, ref array@string captions, string prefix);
	string erasePrefix(string target, string prefix);
	void fadeButton(bool val);
	void run();
	void fadeIn(bool val, DG_GeneralCallback cb);
	bool update();
	int getResult();
};

class SceneStandViewer
{
public:
	NormalButton btnExit_;
	VerticalScroller scroller_;
	TimerCallback cbTimer_;
	bool isFinish_;
	Parts partsStand_;
	Parts partsBg_;

	void init(string standCgName);
	void onClickButtonExit(int id);
	void onFinishFadeOut();
	void run();
	bool update();
	void fadeIn(bool val, DG_GeneralCallback onFinish);
};

class SceneNetworkConnection
{
public:
	array@NormalButton btn_[2];
	int selected_;
	bool isFinish_;
	bool isShowAutoSkip_;
	Parts partsBg_;

	void init();
	void initButton();
	void setButtonPos();
	void fadeButton(bool val);
	void fadeIn(bool val, DG_GeneralCallback cb);
	void run();
	bool update();
	void onClick(int id);
	void onFinishFadeOut();
	int getSelected();
};

class DungeonViewerCardView
{
public:
	ref DungeonCard card_;
	DG_DungeonViewerOnClickCallback cb_;
	array@Parts parts_[7];
	int x_;
	int y_;
	int width_;
	int height_;
	Parts parent_;
	int gameObjectId_;
	int depth_;
	bool isHover_;

	DungeonViewerCardView();
	void setOnClickCallback(DG_DungeonViewerOnClickCallback cb);
	void init(ref DungeonCard card, int x, int y, int depth);
	void initParts();
	string getOpenTypeString(int type);
	void setPartsShow();
	void setPartsPos();
	void setParent(int parentPartsNumber);
	void update();
	bool isHover();
};

class SceneDungeonViewer
{
public:
	array@DungeonViewerCardView view_;
	int width_;
	int depth_;
	int clickedX_;
	int clickedY_;
	bool isCardClicked_;
	VerticalScroller scroller_;
	Parts parent_;

	void init(string dungeonId);
	void run();
	bool update();
	void onClick(int x, int y);
	int getClickedX();
	int getClickedY();
	bool isCardClicked();
};

class SceneDungeonViewer2
{
public:
	float mouseDownX_;
	float dragStartX_;
	bool isDrag_;
	int width_;
	int depth_;
	float x_;
	float y_;
	bool isCardClicked_;
	array@DungeonCardView card_;
	Parts parent_;

	void init(string dungeonId);
	void updatePos();
	void run();
	bool update();
	void onClick(int clickId);
};

class DebugFlag
{
public:
	bool isSkipBattle_;
	bool isSkipDungeonEvent_;
	bool isSkipDungeonClosedCard_;
	bool isSkipWorldMapEncount_;
	bool isUseAutoSelect_;
	bool isAutoLevelUp_;

	DebugFlag();
	bool isSkipBattle();
	bool isSkipDungeonEvent();
	bool isSkipDungeonClosedCard();
	bool isSkipWorldMapEncount();
	bool isAutoLevelUp();
	void setSkipBattle(bool val);
	void setSkipDungeonEvent(bool val);
	void setSkipDungeonClosedCard(bool val);
	void setSkipWorldMapEncount(bool val);
	void setAutoLevelUp(bool val);
};

class DebugFunctionTextIndexMap
{
public:
	string indexText_;
	string funcName_;
	string funcParam_;
	string splitter_;
	array@string categoryList_;

	string getIndexName();
	string getSplitter();
	void init(string index, string functionName, string functionParam, string splitter);
	string getCategory(int level);
	int getCategoryDepth();
	string getFunctionName();
	bool isMatchCategory(ref array@string category);
	string getFunctionParam();
};

class DebugTextIndexMapSelecter
{
public:
	array@DebugFunctionTextIndexMap map_;
	array@string selectedCategory_;
	DG_DebugTextIndexSelectFunction selFn_;
	DG_DebugTextIndexMapExecuteFunction exeFn_;
	int groupingCount_;
	string baseCategory_;
	string splitter_;

	DebugTextIndexMapSelecter();
	void setGroupingCount(int count);
	void setBaseCategory(string categoryName);
	void run(array@DebugFunctionTextIndexMap textIndexMap, string selecterFunction, string executeFunction);
	bool isExistIndexName(string name);
	bool isRootCategory();
	void execute(string indexText);
	string defaultSelecter(ref array@string list, string head);
	void defaultExecuter(ref DebugFunctionTextIndexMap map);
	int getIndexFromIndexName(string functionName);
	string getCurrentHeader();
	void getTextIndexList(ref array@string resultFunc);
	void getSubCategoryList(ref array@string resultCategory);
};

class LatestDebugFunctions
{
public:
	array@string functionName_;

	void update(string functionName);
	int getCount();
	string getFunctionName(int index);
};

class PartsFloatingLayout
{
public:
	int sx_;
	int sy_;
	int lineMaxHeight_;
	int x_;
	int y_;
	bool isLeftAlign_;

	void reset(int x, int y, bool isLeftAlign);
	void add(ref Parts p);
	void br();
};

class AdvSelectionButtonInfomation
{
public:
	string id_;
	string caption_;
	string imageName_;

	void init(string id, string caption, string imageName);
	string getId();
	string getCaption();
	string getImageName();
};

class BadCondition
{
public:
	string id_;
	string name_;
	string imageName_;
	string desc_;

	void init(string id, string name, string imageName, string desc);
	string getId();
	string getName();
	string getImageName();
	string getDesc();
};

class BattleBackgroundInfomation
{
public:
	string id_;
	string imageName_;
	int ambientR_;
	int ambientG_;
	int ambientB_;
	int unfocusShadowR_;
	int unfocusShadowG_;
	int unfocusShadowB_;
	int ambientMaxAlpha_;

	void init(string id);
	string getId();
	string getImageName();
	int getAmbientR();
	int getAmbientG();
	int getAmbientB();
	int getAmbientMaxAlpha();
	int getUnfocusShadowR();
	int getUnfocusShadowG();
	int getUnfocusShadowB();
};

class BattleBonus
{
public:
	string name_;
	int value_;

	void init(string name, int value);
	string getName();
	int getValue();
};

class BattleInfomation
{
public:
	array@string monsterId_;
	int gold_;
	int exp_;
	string musicId_;
	string itemId_;
	string flatName_;
	int itemProbability_;
	int extraBattleFlag_;
	string battleBackGroundId_;

	BattleInfomation();
	void reset();
	void addMonster(string monsterId);
	void setMonsterArray(array@string monsterId);
	void setGold(int gold);
	void setExp(int exp);
	void setItem(string id, int probability);
	void setBattleBackGroundId(string battleBackGroundId);
	void getMonsterId(ref array@string result);
	int getGold();
	int getExp();
	string getItemId();
	int getItemProbability();
	string getBattleBackGroundId();
	void setMusicId(string musicId);
	string getMusicId();
	void setExpFromMonster();
	void setGoldFromMonster();
	void setExtraBattleFlag(int val);
	int getExtraBattleFlag();
	void setEffectFlat(string flatName);
	string getEffectFlatName();
};

class BattleLog
{
public:
	array@string log_;
	array@int type_;
	DG_OnLogAddCallback callback_;

	void add(string msg, int type);
	void setOnAddCallback(DG_OnLogAddCallback callback);
};

class BattleResult
{
public:
	array@BattleBonus expBonus_;
	array@BattleBonus goldBonus_;
	BattleInfomation info_;
	int gold_;
	string playerId_;
	string itemId_;
	string resultMessage_;
	int itemProbability_;
	string battleEndEvent_;
	array@string battleEndMessage_;

	void addExpBonus(string key, int value);
	bool isExistExpBonus(string key);
	bool isExistGoldBonus(string key);
	void addGoldBonus(string key, int value);
	void setInfo(BattleInfomation info);
	bool isGetItemByLot();
	int getExp();
	int getGold();
	string getItemId();
	void getExpBonus(ref array@BattleBonus result);
	void getGoldBonus(ref array@BattleBonus result);
	void reset();
	int getExpCountedBonus();
	int getGoldCountedBonus();
	float getBonusRatio(ref array@BattleBonus b);
	int getExpBonusTotalPer();
	int getGoldBonusTotalPer();
	int getTotalPer(ref array@BattleBonus b);
	void countDownItemProbability();
	int getItemProbability();
	void setFinalAttacker(string playerId);
	string getFinalAttacker();
	void setResultMessage(string msg);
	string getResultMessage();
	BattleInfomation getBattleInfomation();
	void addBattleEndMessage(string msg);
	void getBattleEndMessage(ref array@string msg);
	void setBattleEndEvent(string eventName);
	string getBattleEndEvent();
};

class CardInfomation
{
public:
	string id_;
	string caption_;
	string imageName_;
	string eventCallback_;
	string minimapIconImageName_;
	int changeType_;
	int fadeOutType_;
	string clickableJudgeCallback_;
	string bgImageName_;

	void init(string id);
	void loadParam();
	string getId();
	string getCaption();
	string getImageName();
	string getEventCallback();
	string getClickableJudgeCallback();
	bool isClickable();
	int getFadeOutType();
	int getChangeType();
	string getMinimapIconImageName();
	string getBgImageName();
};

class CgList
{
public:
	array@string cgName_;
	string thumbnailCg_;

	void init(string thumbnailCg, string baseName, array@string cg);
	void getShownCgList(ref array@string cgList);
	string getThumbnailCg();
	bool isAvailable();
	void getAllCgList(ref array@string cgList);
};

class CurrentBadCondition
{
public:
	string id_;
	int turn_;

	void init(string id, int turn);
	string getId();
	int getTurn();
	void decTurn();
	void setTurn(int value);
};

class Dungeon
{
public:
	array@DungeonLine dungeonLine_[6];
	bool isLineLoaded_;
	string id_;
	string caption_;
	string exDefinition_;
	string defaultCardId_;
	string backGroundImage_;
	string musicId_;
	bool isShowMinimap_;
	bool isShowTitle_;
	int shadowR_;
	int shadowG_;
	int shadowB_;
	int dungeonWidth_;
	array@string bgFlatName_[3];
	string titleFlatName_;

	void init(string id);
	void loadDungeonLine();
	void loadDungeonInfomationFromEx();
	void setDungeonLineInfo();
	void createDungeonLine(string def, int width);
	int getDungeonWidth(string def);
	ref DungeonLine getDungeonLine(int line);
	int getDepth();
	string getId();
	string getCaption();
	int getWidth();
	void reset();
	string getDefaultCardId();
	string getBackGroundImageName();
	string getMusicId();
	void setShowMinimap(bool isShow);
	bool isShowMinimap();
	int getShadowR();
	int getShadowG();
	int getShadowB();
	string getFlatName(int type);
	void setShowTitle(bool isShow);
	bool isShowTitle();
	string getTitleFlatName();
};

class DungeonCard
{
public:
	int cardChangeType_;
	bool isOpen_;
	string dataId_;
	string cardTypeId_;
	int openType_;
	DG_GeneralCallback cardOpenCallback_;
	DG_GeneralCallback cardChangedCallback_;

	void init(string infoId, int openType);
	void setCardOpenCallback(DG_GeneralCallback cardOpenCallback);
	void setCardChangedCallback(DG_GeneralCallback cardChangedCallback);
	void initCardType();
	void openCard();
	string getCardTypeId();
	string getDataId();
	void changeCardType(string typeId);
	void changeCardTypePermanent(string typeId);
	bool isOpen();
	string getFromRandomId(string randomId);
	void reset();
	void resetOpenState();
	int getOpenType();
};

class DungeonLine
{
public:
	int depthPos_;
	array@DungeonCard card_;

	void init(int dungeonWidth, int depthPos);
	void setDungeonCard(int index, string typeId, int openType);
	ref DungeonCard getDungeonCard(int index);
	void debugOut();
	int getWidth();
	int getDepthPos();
	void reset();
};

class EnquiteSender
{
public:
	array@string enquite_[426];
	CASGameNetService net_;

	EnquiteSender();
	void checkValue();
	void setInt(int enquiteId, int answer);
	void setString(int enquiteId, string answer);
	bool createId();
	bool isExistId();
	bool send();
	bool sendAsync();
	void joinSendCommand();
	void updateValue();
	void setGamePlayValue();
	void setConfigValue();
	void outputEnquiteValueToDebugWindow();
	void outputLog(int key, string desc);
	void innerGameSend();
	bool isEnableNetwork();
};

class AdvSelectionInfo
{
public:
	int id;
	string advSelectionId;
};

class KeyValuePair
{
public:
	string key;
	int type;
	int valueInt;
	string valueString;
};

class GameFlagMap
{
public:
	array@KeyValuePair pair_;
	bool isGlobalMode_;

	GameFlagMap();
	void setInt(string key, int value);
	void setString(string key, string value);
	int getInt(string key);
	string getString(string key);
	int find(string key);
	void setGlobalMode(bool val);
	void addValue(string key, int value);
	void getKeyList(ref array@string keys);
};

class IndexRoundRobin
{
public:
	int count_;
	array@int indexes_;
	int lastIndex_;

	void init(int count);
	int get();
	void resetIndexes();
	void shuffleIndexes();
};

class Item
{
public:
	string id_;
	string name_;
	string desc_;
	int type_;
	int index_;
	int targetType_;
	int price_;
	string iconImageName_;
	string labelImageName_;
	string skillId_;
	string priceFunction_;
	int maxCount_;

	void init(int index);
	int getMaxCount();
	string getId();
	string getName();
	string getDesc();
	int getType();
	int getPrice();
	int getShopPrice();
	string getSkillId();
	int getTargetType();
	string getIconImageName();
	int getIndex();
	int getNarrowDownType();
	string getLabelImageName();
};

class LotteryTicket
{
public:
	string keyString_;
	int keyInt_;
	int numberMin_;
	int numberMax_;
	int probability_;
};

class LotterySystem
{
public:
	array@LotteryTicket ticket_;
	int current_;
	bool isReset_;

	void clear();
	void addIntKey(int key, int probability);
	void addStringKey(string key, int probability);
	int drawInt(bool isEraseKey);
	string drawString(bool isEraseKey);
	void eraseKey(int index);
	void resetRange();
	int innerDraw();
};

class MapChainInfo
{
public:
	string pId1;
	string pId2;
	bool isNew;
};

class MapDistanceInfo
{
public:
	string pId;
	int distance;
};

class MapChain
{
public:
	array@MapDistanceInfo mark_;
	array@MapChainInfo chain_;
	array@MapChainInfo erasedChain_;

	void addChain(string n, string m, bool isNewChain);
	bool isNew(int index);
	void setNew(int index, bool val);
	void eraseChain(string n, string m);
	void getNeighbor(ref array@string pId, string nord);
	bool getRoute(ref array@string route, string start, string goal);
	void getRouteFromGoal(ref array@string route, string start, string goal);
	void searchMap(string current, int distance);
	void initDistanceInfo();
	int getMapDistanceInfoIndex(string n);
	bool getChain(int index, ref MapChainInfo info);
	int getCount();
};

class MapEncountMonsterGroup
{
public:
	string id_;
	array@string monsterId_;
	int gold_;
	int exp_;
	string itemId_;
	string musicId_;
	int itemProbability_;

	void getMonsterList(ref array@string result);
	void init(string id);
	void addMonsterId(string id);
	string getId();
	string getMonsterId(int index);
	int getMonsterCount();
	int getGold();
	int getExp();
	string getItemId();
	int getItemProbability();
	string getMusicId();
};

class MapEncountProbability
{
public:
	int nodeCount_;
	array@int hitTable_;

	void init(int nodeCount, int noHit, int hit1, int hit2, int hit3);
	void addToTable(int value, int count);
	int getNodeCount();
	int getHitCount();
	void change(int noHit, int hit1, int hit2, int hit3);
};

class MapPlace
{
public:
	string id_;
	int x_;
	int y_;
	string imageName_;
	string caption_;
	string callbackFunction_;
	string musicId_;
	bool isAvailable_;

	MapPlace();
	bool isAvailable();
	void setAvailable(bool val);
	void init(string id);
	void loadParam();
	int getX();
	int getY();
	string getCaption();
	string getId();
	string getCallbackFunction();
	string getImageName();
	string getMusicId();
};

class MirrorPiece
{
public:
	string baseCgName_;
	string completeCgName_;
	string advFunctionName_;
	string bgCgName_;
	bool isShownAtViewer_;
	array@bool isOpen_;

	void init(string id);
	int open();
	void setShownAtViewer(bool val);
	bool isComplete();
	void loadParam();
	string getCgName(int index);
	string getCompleteCgName();
	string getAdvFunctionName();
	bool isPieceOpen(int index);
	int getPieceCount();
	string getBgCgName();
	bool isShownAtViewer();
	int getCount();
};

class Monster
{
public:
	string id_;
	string name_;
	string imageName_;
	int exp_;
	int gold_;
	int hp_;
	string monsterAttributeId_;
	string changeToMonsterId_;
	bool isFixedPosition_;
	int standX_;
	int standY_;
	int infoX_;
	int infoY_;
	int nameX_;
	int nameY_;
	int effectOffsetX_;
	int effectOffsetY_;
	int deadMotionType_;
	array@MonsterAttack multiAttack_;
	array@MonsterAttack atk_[3];

	void init(string id);
	void setAttack();
	string getId();
	string getName();
	string getImageName();
	MonsterAttack getAttack(int index, int hpPercent);
	int getHp();
	string getMonsterAttributeId();
	int getExp();
	int getGold();
	string getChangeToMonsterId();
	void addMultipleAttack(int exIndex);
	int getMultiAttackIndex(int index, int hpPercent);
	void setFixedPosition(bool val, int deadMotionType);
	bool isFixedPosition();
	void setPosition(int standX, int standY, int infoX, int infoY, int nameX, int nameY);
	void getStandPosition(ref int x, ref int y);
	void getInformationPosition(ref int x, ref int y);
	void getNamePosition(ref int x, ref int y);
	int getDeadMotionType();
	void setEffectOffset(int x, int y);
	void getEffectOffset(ref int x, ref int y);
};

class MonsterAttack
{
public:
	string attribute_;
	int param_;
	int targetType_;
	int hpPercent_;
	string buffId_;
	string flatName_;

	void init(string monsterId, int index);
	string getAttributeId();
	int getParam();
	void initAsMultiMode(int exIndex, int atkIndex);
	int getTargetType();
	string getBuffId();
	int getHpPercent();
	string getFlatName();
};

class MonsterAttackAttribute
{
public:
	string id_;
	string name_;
	string imageName_;
	string flatName_;
	int type_;

	void init(string id);
	string getId();
	string getName();
	string getImageName();
	int getType();
	string getFlatName();
};

class MonsterAttribute
{
public:
	string id_;
	string name_;
	string imageName_;

	void init(string id, string name, string imageName);
	string getId();
	string getName();
	string getImageName();
};

class MonsterBuff
{
public:
	string id_;
	string name_;
	string imageName_;
	int type_;

	void init(string id);
	void loadParam();
	string getId();
	string getName();
	int getType();
	string getImageName();
};

class MonsterInstance
{
public:
	string id_;
	int hp_;
	int attackHp_;
	int maxHp_;
	int instanceIndex_;
	int arrivalTurn_;
	bool isChanged_;
	DG_GeneralCallback positionCallback_;
	DG_OnChangeHp hpCallback_;
	array@string buffIdList_;
	DG_OnChangeBuff addBuffCallback_;
	DG_OnChangeBuff eraseBuffCallback_;
	int position_;

	void init(string monsterId, int position, int instanceIndex, int arrivalTurn);
	void reset();
	int setHp(int val);
	int getHp();
	int getMaxHp();
	int getPosition();
	void setPosition(int val);
	string getId();
	void setOnChangePositionCallback(DG_GeneralCallback cb);
	DG_GeneralCallback getOnChangePositionCallback();
	void setOnChangeHpCallback(DG_OnChangeHp hpCallback);
	void addBuff(string buffId);
	bool isExistBuff(string buffId);
	void eraseBuff(string id);
	void eraseBuffByType(int type);
	bool isAvailableBuffId(string id);
	void setBuffCallback(DG_OnChangeBuff onAdd, DG_OnChangeBuff onErase);
	void getBuffIdList(ref array@string result, int type);
	int getInstanceIndex();
	int getArrivalTurn();
	MonsterAttack getAttack(int turn);
	void updateAttackHp();
	void clearCallback();
	bool isChanged();
	void setChanged(bool val);
};

class MonsterStrengthShifter
{
public:
	float localHpRatio_;
	float localAtkRatio_;
	float localGoldRatio_;
	float localExpRatio_;
	float localBuffRatio_;
	float globalHpRatio_;
	float globalAtkRatio_;
	float globalGoldRatio_;
	float globalExpRatio_;
	float globalBuffRatio_;

	MonsterStrengthShifter();
	void setLocalHpRatio(float ratio);
	void setLocalAtkRatio(float ratio);
	void setLocalGoldRatio(float ratio);
	void setLocalExpRatio(float ratio);
	void setLocalBuffRatio(float ratio);
	void setGlobalHpRatio(float ratio);
	void setGlobalAtkRatio(float ratio);
	void setGlobalGoldRatio(float ratio);
	void setGlobalExpRatio(float ratio);
	void setGlobalBuffRatio(float ratio);
	float getHpRatio();
	float getAtkRatio();
	float getGoldRatio();
	float getExpRatio();
	float getBuffRatio();
	float getLocalHpRatio();
	float getLocalAtkRatio();
	float getLocalGoldRatio();
	float getLocalExpRatio();
	float getLocalBuffRatio();
	float getGlobalHpRatio();
	float getGlobalAtkRatio();
	float getGlobalGoldRatio();
	float getGlobalExpRatio();
	float getGlobalBuffRatio();
	void resetGlobalRatio();
	void resetLocalRatio();
};

class MusicInfo
{
public:
	int index_;
	string id_;
	string songName_;
	bool isPlayed_;

	void init(int index);
	int getIndex();
	string getSongName();
	string getId();
	bool isPlayed();
};

class Party
{
public:
	int max_;
	array@string skillId_;
	DG_GeneralCallback cbOnPartyChanged_;

	Party();
	void clear();
	void getPlayerSkillIndexMinMax(ref int min, ref int max, string targetPlayerId);
	bool isAddable();
	bool add(string attackSkillId);
	bool isExist(string attackSkillId);
	void erase(int index);
	string getAttackSkillId(int index);
	string getPlayerId(int index);
	void sort();
	int getCount();
	void addOnUpdateCallback(DG_GeneralCallback cb);
	void replace(string oldId, string newId);
	void getPlayerIdList(ref array@string pIdList);
	void setMaxCount(int value);
	int getMaxCount();
	int getIndexFromId(string skillId);
	bool empty();
	void getSkillIdList(ref array@string list);
};

class Player
{
public:
	string id_;
	string name_;
	string shortName_;
	string imageName_;
	string zeroThreeSkillId_;
	int upHp_;
	int upStrength_;
	int upMind_;
	int upDexterity_;
	int formationPriority_;
	int hp_;
	int maxHp_;
	int level_;
	int maxLevel_;
	int exp_;
	int dexterity_;
	int strength_;
	int mind_;
	int consecutiveBattleCount_;
	int totalBattleCount_;
	string coolTimeCancelSkillId_;
	string partyNamePlateCgName_;
	bool isZeroThreeSkillOpened_;
	array@string buffIdList_;
	bool isJoin_;
	array@int helperSkillProbability_[4];
	array@string attackSkillId_[4];
	array@int coolTime_[4];
	DG_OnChangeHp hpCallback_;
	DG_OnChangeBuff addBuffCallback_;
	DG_OnChangeBuff eraseBuffCallback_;

	Player();
	void init(string id);
	void loadParam();
	int getFormationPriority();
	void initSkill();
	string getId();
	string getName();
	string getShortName();
	string getImageName();
	int setHp(int val);
	void setMaxHp(int val);
	void setLevel(int val);
	void setExp(int val);
	void setJoin(bool val);
	void setAttackSkillId(int index, string id);
	int getHp();
	int getMaxHp();
	int getLevel();
	int getExp();
	bool isJoin();
	string getZeroThreeSkillId();
	string getAttackSkillId(int index);
	void getAttackSkillIdList(ref array@string s);
	bool isAttackSkillUpgradable(string attackSkillId);
	string upgradeSkill(string attackSkillId);
	int findSameGroupIdAttackSkill(string attackSkillGroupId);
	int getStrength();
	int getMind();
	void setDexterity(int val);
	int getDexterity();
	void setStrength(int val);
	void setMind(int val);
	void addBuff(string buffId);
	bool isExistBuff(string buffId);
	void eraseBuff(string id);
	bool isAvailableBuffId(string id);
	void setBuffCallback(DG_OnChangeBuff onAdd, DG_OnChangeBuff onErase);
	void getBuffIdList(ref array@string result, int type);
	void setOnChangeHpCallback(DG_OnChangeHp hpCallback);
	string getBattleImageName();
	void setCoolTime(string id);
	void setOverCoolTime(string id, int val);
	void decCoolTime();
	void clearCoolTime(string id);
	int getCoolTime(string id);
	void eraseAttackBuff();
	void eraseDeffenceBuff();
	void clearBuff();
	void setZeroThreeSkillOpened(bool val);
	bool isZeroThreeSkillOpened();
	int getUpHp();
	int getUpStrength();
	int getUpMind();
	int getUpDexterity();
	int getMaxLevel();
	void setMaxLevel(int val);
	bool levelUp();
	bool isLevelUpEnable();
	int getNextExp();
	void openSkill(int level);
	string getCurrentLevelNewSkillId();
	void getNextSkillId(ref string skillId, ref int level);
	int getSkillIndexFromId(string attackSkillId);
	void addExp(int val);
	void addTotalBattleCount();
	int getTotalBattleCount();
	void addConsecutiveBattleCount();
	void clearConsecutiveBattleCount();
	int getConsecutiveBattleCount();
	void setCoolTimeCancelSkillId(string id);
	string getCoolTimeCancelSkillId();
	int getHelperSkillProbability(int index);
	int getHelperSkillProbabilityById(string id);
	string getPartyNamePlateCgName();
	void setPartyNamePlateCgName(string cgName);
};

class PlayerBuff
{
public:
	string id_;
	string name_;
	string imageName_;
	int calcType_;
	int type_;

	void init(string id);
	void loadParam();
	string getId();
	string getName();
	int getType();
	string getImageName();
	int getCalcType();
	bool isAttackBuff();
};

class PlayerCommonParam
{
public:
	int gold_;
	string placeName_;
	array@ItemCount itemCount_;
	bool isEnableLevelGod_;
	bool isEnableExitDungeon_;
	bool isEnableItem_;
	int partyCoolTime_;
	int maxHelperCount_;
	int helperCount_;
	array@CurrentBadCondition badCondition_;
	DG_OnChangeItemCallback onAddCallback_;
	DG_OnChangeItemCallback onUseCallback_;
	DG_GeneralCallback onChangeGold_;
	DG_GeneralCallback onChangeBadCondition_;
	DG_OnBadConditionBeginEndHandler onBeginEndBadConditionCallback_;
	DG_OnChangeHelperCallback onChangeHelperCallback_;

	PlayerCommonParam();
	void setGold(int val);
	int getGold();
	bool isEnableLevelGod();
	bool isEnableExitDungeon();
	void addItem(string itemId);
	int getItemCountIndex(string itemId);
	void useItem(string itemId);
	void decItem(string itemId);
	void eraseItem(string itemId);
	void getItemList(ref array@string itemList);
	void setOnAddItemCallback(DG_OnChangeItemCallback cb);
	void setOnUseItemCallback(DG_OnChangeItemCallback cb);
	int getItemCount(string id);
	void setOnChangeGoldCallback(DG_GeneralCallback cb);
	void addOnChangeBadConditionCallback(DG_GeneralCallback cb);
	void addOnChangeHelperCountCallback(DG_OnChangeHelperCallback cb);
	void setPlaceName(string name);
	string getPlaceName();
	void addGold(int val);
	void setEnableLevelGod(bool val);
	void setEnableExitDungeon(bool val);
	void setEnableItem(bool val);
	bool isEnableItem();
	void setPartyCoolTime(int val);
	int getPartyCoolTime();
	void decPartyCoolTime();
	void sortItem();
	void addBadCondition(string id, int turn);
	void decBadCondition();
	int findBadCondition(string id);
	void getBadCondition(ref array@CurrentBadCondition current);
	int getBadConditionTurn(string id);
	void clearBadCondition();
	void setBadConditionBeginEndHandler(DG_OnBadConditionBeginEndHandler handler);
	void setMaxHelperCount(int val);
	int getMaxHelperCount();
	void setHelperCount(int val);
	int getHelperCount();
	void decHelperCount(int val);
};

class ItemCount
{
public:
	string id;
	int count;
};

class PlayerSkill
{
public:
	string id_;
	string characterId_;
	string name_;
	string desc_;
	string desc2_;
	string iconImageName_;
	string buffId_;
	string flatName_;
	int targetType_;
	string attributeId_;
	string groupId_;
	int groupRank_;
	int coolTime_;
	float param_;

	void init(string id);
	void loadParam();
	string getId();
	string getPlayerId();
	string getName();
	string getDesc();
	string getDesc2();
	int getTargetType();
	string getAttributeId();
	string getGroupId();
	int getGroupRank();
	int getCoolTime();
	float getParam();
	string getIconImageName();
	string getBuffId();
	string getFlatName();
};

class PlayerSkillAttribute
{
public:
	string id_;
	string name_;
	string imageName_;
	string flatName_;
	int attackKind_;

	void init(string id);
	string getId();
	string getName();
	int getAttackKind();
	string getImageName();
	string getFlatName();
};

class PlayerSkillOpenLevel
{
public:
	string skillId_;
	string playerId_;
	int index_;
	int openLevel_;

	void init(string skillId, string playerId, int index, int openLevel);
	string getSkillId();
	string getPlayerId();
	int getIndex();
	int getOpenLevel();
};

class PlayerSkillState
{
public:
	int index_;
	string skillId_;
	int availableLevel_;
	bool isAvailable_;

	void initAvailable(int index, string skillId);
	void initNotAvailable(int index, string skillId, int availableLevel);
	int getIndex();
	bool isAvailable();
	string getSkillId();
	int getAvailableLevel();
};

class VoiceNumberText
{
public:
	int number;
	string text;
	int hastleOk;
};

class VoiceTypeGroup
{
public:
	array@VoiceNumberText numberText;
};

class PlayerVoiceFinder
{
public:
	string playerId_;
	array@VoiceTypeGroup typeGroup_[13];
	array@IndexRoundRobin roundRobin_[7];

	void init(string playerId);
	void loadFromEx();
	void initRoundRobin();
	int getFromType(int type, ref string text);
	int getFromText(string text);
	string getId();
};

class ReplayInfo
{
public:
	string thumbnail_;
	array@string name_;
	array@string event_;

	void init(int index);
	void load(int index);
	string getThumbnailCg();
	void getAvailableEventList(ref array@string functionList, ref array@string nameList);
	bool isAvailable();
	bool isEventExist(string funcName);
	void getFunctionList(ref array@string functionList);
};

class SaveDataManager
{
public:
	array@SaveObject saveObject_[161];
	int saveDataIndex_;

	SaveDataManager();
	void initSaveObject();
	void setOnAutoSaveCallback(DG_OnSaveCallback callback);
	bool save(int index);
	void updateLatestSaveIndex(int index);
	void load(int index);
	bool saveAutoSave();
	void updateLatestAutoSaveIndex(int index);
	void copyAutoSaveData(int oldIndex, int newIndex);
	void loadAutoSave();
	bool replaySave();
	void replayLoad();
	string getSaveComment(int index);
	bool isSaved(int index);
	void loadLatestAutoSave();
	int getSavedObjectCount();
};

class SaveObject
{
public:
	int saveIndex_;
	int year_;
	int month_;
	int day_;
	int week_;
	int hour_;
	int min_;
	int sec_;
	int playTimeMinute_;
	string timeInGame_;
	string userComment_;
	DG_OnSaveCallback onSave_;

	void init(int saveIndex);
	void setOnSaveCallback(DG_OnSaveCallback onSaveCallback);
	bool save(string comment);
	void updateInfomation();
	void load();
	bool isSaved();
	string getComment();
	string getSaveTime();
	int getPlayTimeMinute();
};

class Shop
{
public:
	string id_;
	string name_;
	string imageName_;
	array@string itemId_;

	string getId();
	string getName();
	string getImageName();
	void init(string id, string name, string imageName);
	void addItem(string id);
	void clear();
	void eraseItem(string id);
	void getItemIdList(ref array@string id);
};

class StandBackgroundFillInfomation
{
public:
	string id_;
	int r_;
	int g_;
	int b_;

	void init(string id, int r, int g, int b);
	string getId();
	int getR();
	int getG();
	int getB();
};

class ZeroThreeSkill
{
public:
	string id_;
	string name_;
	string desc_;

	void init(string id, string name, string desc);
	string getId();
	string getName();
	string getDesc();
};

class GameSceneManager
{
public:
	string currentPlaceId_;
	int currentScene_;
	int nextScene_;
	int dungeonX_;
	int dungeonY_;
	DG_AdvCallbackFunction mapCallback_;
	DG_InitialFunction initialFunction_;
	string nextDungeonId_;
	string nextPlaceId_;
	string nextAdvFuncName_;

	void setAdv(string funcName);
	void init(DG_InitialFunction initialFunction);
	void run();
	void clear();
	string getCurrentPlaceId();
	void setMap(string placeId);
	void setMapAdv(string placeId);
	void setDungeon(string dungeonId, int x, int y);
	string callMap(string nextPlaceId, bool isLoadAutoSave);
	bool isSetNextScene();
	void setCurrentPos(string currentPlaceId);
};

class LogViewer
{
public:
	int handle_;
	array@string log;

	void init(string title);
	void add(string val);
	void clear();
};

class GameObject
{
public:
	int id_;
	int stackLevel_;
	string objectName_;
	bool isIndependent_;
	DELEGATE_UPDATE_METHOD updateMethod_;
	DELEGATE_FOCUSED_METHOD focusedMethod_;

	GameObject();
	bool isAlive();
	void setIndependentObject(bool val);
	bool isIndependentObject();
	void addSceneStackLevel();
	void decSceneStackLevel();
	bool isStacked();
	void setId(int id);
	void setUpdateMethod(DELEGATE_UPDATE_METHOD cbUpdate);
	void setFocusedMethod(DELEGATE_FOCUSED_METHOD cbFocused);
	void setSceneStackLevel(int val);
	int getId();
	int getSceneStackLevel();
	bool callUpdateMethod();
	bool callFocuedMethod();
	void setObjectName(string val);
	string getObjectName();
};

class GameObjectManager
{
public:
	array@GameObject gameObject_;
	int objectId_;

	int addFocusObject(DELEGATE_UPDATE_METHOD cbUpdate, DELEGATE_FOCUSED_METHOD cbFocused);
	int addObject(DELEGATE_UPDATE_METHOD cbUpdate);
	int addIndependentObject(DELEGATE_UPDATE_METHOD cbUpdate);
	void update();
	void pushScene();
	void popScene();
	void stackGameObject(bool val);
	void setSceneStackLevel(int id, int level);
	int getSceneStackLevel(int id);
	int getNewObjectId();
	int getFocusedObjectId();
};

class ButtonState
{
public:
	bool isLastDown_;
	bool isDown_;
	bool isPress_;
	bool isForcePress_;
	bool onUpIgnore_;

	ButtonState();
	bool isDown();
	bool isPress();
	void update(bool newState);
	void forceClick();
	void setNextMouseUpIgnore();
	bool onDown();
};

class KeyInput
{
public:
	array@int monitoringKey_;
	array@ButtonState bs_;
	array@RepeatKeyState rep_;

	KeyInput();
	void update();
	bool isDown(int vKey);
	bool isPress(int vKey);
	bool isPressWithRepeat(int vKey);
	int indexFromVirtualKey(int vKey);
};

class MouseInput
{
public:
	int x_;
	int y_;
	int lastX_;
	int lastY_;
	bool isCursorChanged_;
	int wheelVal_;
	array@ButtonState btn_[2];
	int objectIdOnDown_;
	int objectIdOnUp_;
	float accelaretionX_;
	float accelaretionY_;

	MouseInput();
	void update();
	void updateCursorPos();
	void updateAccelaration();
	void updateButtonState();
	void updateWheel();
	void setPos(int x, int y);
	void setNextMouseUpIgnore();
	void forceClick(int n);
	bool isCursorChanged();
	bool isClick(int button);
	bool isClickWithFocus(int objectId);
	bool isClickWithNoFocus();
	bool isDown(int button);
	bool onDown(int button);
	int getX();
	int getY();
	int getWheel();
	int getFocusedObjectId();
	float getAccelarationX();
	float getAccelarationY();
};

class RepeatKeyState
{
public:
	int pressedFrameCount_;
	bool isPress_;

	RepeatKeyState();
	bool isPress();
	void update(bool newState);
};

class ButtonParts
{
public:
	string activityName_;
	string partsName_;
	int partsNumber_;
	int id_;
	DG_OnClickButtonParts cb_;

	bool init(string activityName, string partsName, int id);
	void setOnClickCallback(DG_OnClickButtonParts cb);
	void onClick(int partsNumber, int mouseX, int mouseY);
	void release();
	void setEnable(bool val);
};

class CheckBoxParts
{
public:
	string activityName_;
	string partsName_;
	int partsNumber_;
	int id_;
	DG_OnCheckCheckBoxParts cb_;

	bool init(string activityName, string partsName);
	bool isChecked();
	void setCheck(bool val);
	void setOnCheckCallback(DG_OnCheckCheckBoxParts cb);
	void onCheckStateChanged(int partsNumber, bool isCheck);
	void release();
	void setEnable(bool val);
};

class MultilineTextParts
{
public:
	string activityName_;
	string partsName_;
	int partsNumber_;
	DG_GeneralCallback cb_;

	void setMax(int val);
	bool init(string activityName, string partsName);
	void release();
	void addOnChangeTextCallback(DG_GeneralCallback cb);
	void onChange(int pn);
	void setText(string text);
	string getText();
};

class LoopMotionInfomation
{
public:
	array@LoopMotionKey key_[4];

	void set(int key, int offset, int moveRange, int loopTime, int loopMotionType);
	int get(int key, int nowTime);
	bool isEnable(int key);
};

class LoopMotionKey
{
public:
	int offset;
	int moveRange;
	int loopTime;
	int loopMotionType;

	LoopMotionKey();
};

class MotionKey
{
public:
	bool isEnable_;
	int from_;
	int to_;
	int motionType_;

	MotionKey();
	void set(int from, int to, int motionType);
	bool isEnable();
	int getFrom();
	int getTo();
	int getMotionType();
};

class NumberPartsInfomation
{
public:
	string cg_;
	array@int w_[12];
	bool isUseComma_;
	int span_;
	int digit_;

	NumberPartsInfomation();
	void setCgName(string cgName);
	void setWidth(int w0, int w1, int w2, int w3, int w4, int w5, int w6, int w7, int w8, int w9, int wMinus, int wComma);
	void setUseComma(bool val);
	void setSpan(int val);
	string getCgName();
	int getWidth(int index);
	bool isUseComma();
	int getSpan();
	void setSameWidth(int w);
	void setDigit(int val);
	int getDigit();
};

class Parts
{
public:
	int partsNumber_;
	int type_;
	float x_;
	float y_;
	float xScaling_;
	float yScaling_;
	float xyRot_;
	float xzRot_;
	float yzRot_;
	bool isShow_;
	string text_;
	int alpha_;
	int number_;
	int z_;
	int baseZ_;
	int left_;
	int top_;
	int width_;
	int height_;
	int origin_;

	Parts();
	void init(string cgName, int loadingMode);
	void initAsText(string text, int size, bool isEdge, int type, int r, int g, int b);
	void initAsPlaneImage(int w, int h, int r, int g, int b, int a);
	void initAsCgPlaneImage(string cgName, int r, int g, int b);
	void initAsNumber(string cgName, ref NumberPartsInfomation info);
	void initAsDummy();
	void initAsFlat(string flatName);
	void initAsUserStructure();
	void setNumber(float num);
	void setParent(int parent);
	void setOrigin(int val);
	void setPos(float x, float y);
	void setX(float x);
	void setY(float y);
	void setZ(float z);
	void setScaling(float per);
	void setXScaling(float per);
	void setYScaling(float per);
	void setXYRot(float rot);
	void setXZRot(float rot);
	void setYZRot(float rot);
	void setShow(bool val);
	void setAlpha(float val);
	void setCgRange(int x, int y, int w, int h);
	void updateCgRangeRect();
	void setCgRangeRect(int l, int t, int r, int b);
	void resetCgRange();
	void setCgRangeLeft(float val);
	void setCgRangeRight(float val);
	void setCgRangeTop(float val);
	void setCgRangeBottom(float val);
	void setFilterType(int filterType);
	void setAddColorValue(int r, int g, int b);
	void setMultiColorValue(int r, int g, int b);
	float getX();
	float getY();
	int getZ();
	int getWidth();
	int getHeight();
	int getAlpha();
	float getXYRot();
	float getScaling();
	bool isShow();
	int getPartsNumber();
	void release();
	float getXZRot();
	float getYZRot();
	~Parts();
	void clear();
	int getScreenX();
	int getScreenY();
	void setZBasePos(int zbase);
	bool isInitialized();
	int getNumber();
	void runMotionFromEx(string motionDefineName, DG_GeneralCallback onFinish);
	void runMotion(PartsMotion motion, DG_GeneralCallback onFinish);
	void runMotionArray(array@PartsMotion motion, DG_GeneralCallback onFinish);
	bool isMotion();
	string getCgName();
	bool isHit(int x, int y);
	void startFlat(bool isStartLastFrame, float timeScaling);
	void changeFlatCg(string source, string target);
	void setHitTestAsPixel(bool val);
	void setAlphaClipperParts(int alphaClipperPartsNumber);
	bool isMotionFlat();
	void changeOrigin(int val);
	void loadAndStartFlat(string flatName, int x, int y, int z);
};

class PartsCamera
{
public:
	float zoomCenterX_;
	float zoomCenterY_;
	float rot_;
	float zoom_;

	PartsCamera();
	void reset();
	void setCenter(float x, float y);
	void setRot(float rot);
	void setZoom(float zoom);
	float getRot();
	float getZoom();
	void convertPos(ref float rx, ref float ry, float x, float y);
};

class PartsInitializeOption
{
public:
	array@int sleepLevel_;
	array@int additionalZPos_;

	PartsInitializeOption();
	void setSleepLevel(int val);
	int getSleepLevel();
};

class PartsMotion
{
public:
	array@MotionKey key_;
	int time_;
	int delay_;
	int swingCount_;
	string soundName_;
	int loopSoundNumber_;

	PartsMotion();
	void clear();
	void setMove(int fromX, int fromY, int toX, int toY, int motionType);
	void setCgRangeMove(int fromLeft, int fromTop, int fromRight, int fromBottom, int toLeft, int toTop, int toRight, int toBottom, int motionType);
	void setSwingCount(int val);
	int getKeyFrom(int key);
	int getKeyMotionType(int key);
	int getKeyTo(int key);
	bool isKeyEnable(int key);
	void setSoundName(string soundName);
	string getSoundName();
	void setLoopSoundNumber(int number);
	int getLoopSoundNumber();
	int getSwingCount();
	void setTime(int time);
	int getTime();
	void setDelay(int delay);
	int getDelay();
	void setKey(int key, int from, int to, int motionType);
	void setAlpha(int from, int to, int motionType);
	void setScaling(int from, int to, int motionType);
	void setShakeLevel(int from, int to, int motionType);
	void loadFromEx(string keyBaseName);
};

class PartsMotioner
{
public:
	bool isMotion_;
	LocalTimer motionTimer_;
	array@PartsMotion motions_;
	bool isLoopMotionActive_;
	LocalTimer loopMotionTimer_;
	LoopMotionInfomation loopMotion_;
	DG_GeneralCallback dgOnFinish_;
	ref Parts parts_;
	int centerX_;
	int centerY_;

	PartsMotioner();
	void run(ref Parts parts, PartsMotion motionInfo);
	void runArray(ref Parts parts, ref array@PartsMotion motions);
	void addMotion(PartsMotion motionInfo);
	void addMotionArray(ref array@PartsMotion motions);
	void update();
	void startMotion();
	void onMotion(int now);
	float getShakeValue(ref PartsMotion m, int key, float t);
	void updateMotionKey(DG_MOTION_UPDATE_METHOD method, ref PartsMotion m, int key, float t);
	void onMotionFinish();
	bool isMotion();
	void setMotionLastFrame(ref PartsMotion m);
	void finalize();
	void playMotionSound(ref PartsMotion motionInfo);
	void updateLoopMotion(int nowTime);
	void setLoopMotion(ref LoopMotionInfomation loopMotion);
	void setActiveLoopMotion(bool val);
	void runEx(ref Parts parts, string defineName);
	void setDelegateOnMotionFinish(DG_GeneralCallback onFinish);
	int getPartsNumber();
	bool isAvailable();
};

class PartsMotionManager
{
public:
	array@PartsMotioner motionerList_;

	void add(PartsMotioner motioner);
	void update();
	int findMotionFromPartsNumber(int partsNumber);
	void finalizeCurrentMotion(int partsNumber);
	bool isEmpty();
	void finalize(int partsNumber);
	bool isMotion(int partsNumber);
};

class PartsNumberProvider
{
public:
	array@int list_;
	array@int emptyList_;
	int max_;

	PartsNumberProvider();
	int getNumber();
	void releaseNumber(int number);
};

class LoopSound
{
public:
	int sound_;
	int stack_;

	void playSound(int soundNumber);
	void stopSound(int soundNumber);
	void innerPlay(int number);
};

class MusicLastPlayedPosition
{
public:
	string musicId;
	int position;
};

class Music
{
public:
	string forcePlayMusic_;
	string nowPlay_;
	string lastPlay_;
	array@MusicLastPlayedPosition lastPlayedPos_;
	FuncOnMusicPlay handler_;

	Music();
	void play(string musicId, int fadeTime, bool isContinue);
	void fadeOut(int fadeTime);
	void savePlayPosition(string musicId);
	int getLastPlayedPositionIndexFromId(string musicId);
	void playLastPlayedMusic();
	string getPlayingMusicId();
	string getLastPlayedMusicName();
	int getLength();
	int getPlayingPosition();
	void forcePlay(string musicId);
	void innerPlay(string musicId, int time, bool isContinue);
	void addHandlerFunc(FuncOnMusicPlay callbackFunc);
};

class AutoModeTimer
{
public:
	int lastTime_;

	AutoModeTimer();
	void reset();
	bool isSkipFrame();
};

class FrameManager
{
public:
	CASTimer timer_;

	FrameManager();
	void updateFrame();
	void udpateInputDevices();
};

class GlobalGameTimer
{
public:
	FUNC_SKIP_CHECKER skipFunc_;
	int gameLocalTime_;
	float scaling_;
	CASTimer timer_;

	GlobalGameTimer();
	void update();
	int getTime();
	float getTotalScaling();
	void setScaling(float val);
	float getScaling();
	void setSkipFunction(string skipFunc);
	float getEffectiveScalingValue();
};

class LocalTimer
{
public:
	int start_;

	LocalTimer();
	void reset();
	int getTime();
};

class Pos3D
{
public:
	float x;
	float y;
	float z;
	float w;
};

class ViewModeManager
{
public:
	array@bool stack_;

	void set(bool val);
	void restore();
	void innerSet(bool val);
};

class testT
{
public:
	int t;

	testT();
	~testT();
};

class testContainer
{
public:
	ref testT rT;
};

class TestGameTimer
{
public:
	TimerCallback timerCb_;
	DG_GeneralCallback cb_;

	void setTimer(int time, DG_GeneralCallback cb);
	void onFinish();
};

class TestAllocationObject
{
public:
	int a;

	TestAllocationObject();
	~TestAllocationObject();
};

delegate void sys_btn_fnc_t (void);
delegate bool FTIsEnableSystemButton (void);
delegate void FTShowMessageWindowCallback (bool);
delegate void _menu_rbutton_callback_t (void);
delegate void FTConfigView (void);
delegate void FTPostCallUpdateView (void);
delegate void FTMessage (int, int, string);
delegate void FTMessageR (void);
delegate void FTMessageA (void);
delegate void FTMessageAA (void);
delegate void FTMessageB (void);
delegate void FTMessageC (void);
delegate void FTMessageD (void);
delegate void FTDrawMessageChar (string);
delegate void DG_MoveCursor_UpdateView (void);
delegate void DG_NotifyHandler (void);
delegate void DG_NotifyConfigUpdateHandler (int, string);
delegate void FTPARTS_WaitForClickCallback (void);
delegate void DG_PARTS_UpdateHandler (int);
delegate void DG_PARTS_LayerHandler (int);
delegate void DG_PARTS_LayerChangedHandler (int, int);
delegate void DG_PARTS_LoadedActivityHandler (string, string);
delegate void DG_PARTS_ReleasingActivityHandler (string, string);
delegate void DG_PARTS_IntentActivityHandler (ref bool);
delegate void DG_NotifyPlayVoiceList (ref array@string);
delegate void DG_MouseEnterHandler (int, int, int);
delegate void DG_MouseMoveHandler (int, int, int);
delegate void DG_MouseLeaveHandler (int, int, int);
delegate void DG_MouseWheelHandler (int, int, int);
delegate void DG_MouseClickHandler (int, int, int);
delegate void DG_MouseOnHandler (int, int, int, int);
delegate void DG_KeyTriggerHandler (int, int);
delegate void DG_KeyDownHandler (int, int);
delegate void DG_KeyPressHandler (int, int);
delegate void DG_KeyUpHandler (int, int);
delegate void DG_DragBeginHandler (int);
delegate void DG_DragingHandler (int, int, int, int, int);
delegate void DG_DragEndHandler (int);
delegate void DG_DropEnterHandler (int, int);
delegate void DG_DropOnHandler (int, int, int, int);
delegate void DG_DroppedHandler (int, int, int, int);
delegate void DG_DropLeaveHandler (int, int);
delegate void DG_FocusHandler (int);
delegate void DG_LostFocusHandler (int);
delegate void DG_ScrollHandler (int, int, int);
delegate void DG_ChangedHandler (int);
delegate void DG_ChangedFlgHandler (int, bool);
delegate void DG_CreatedHandler (int);
delegate void DG_DeletedHandler (int);
delegate void DG_SelectedHandler (int, int);
delegate void DG_FixedHandler (int);
delegate void DG_ChangeTextHandler (int, string);
delegate void DG_SelectContextMenuItemHandler (int, string);
delegate void DG_Panel_GetLastZHandler (ref int);
delegate void DG_Panel_UpdateSizeHandler (int, int, int);
delegate void DG_Panel_ChangedActiveFlgHandler (int, bool);
delegate void DG_Panel_ChangedCloseFlgHandler (int, bool);
delegate void DG_PanelList_UpdateLayoutHandler (void);
delegate void DG_AddComponentEvent (int);
delegate void DG_InstanceItem_SelectHandler (ref CAEInstanceItem);
delegate void DG_InstanceItem_SetDraggableInstance (bool);
delegate void DG_CreateContentHandler (int);
delegate void DG_ChangedColor (int, int, int, int);
delegate void DG_ChangedFont (int, ref CASCharSpriteProperty);
delegate void DG_ChangedOriginType (int, int);
delegate void DG_ChangedItemList (int, ref array@string);
delegate void DG_ChangedStringPairList (int, ref array@SGUIStringPair);
delegate void DG_ChangedConstructionProcessList (int, ref array@CASConstructionProcess);
delegate void DG_SelectIntentHandler (int, ref array@string, int);
delegate string DG_GetToolTipTextHandler (int);
delegate void DG_void (void);
delegate void DG_i (int);
delegate void DG_ii (int, int);
delegate void DG_iii (int, int, int);
delegate void DG_iiii (int, int, int, int);
delegate void DG_iiif (int, int, int, float);
delegate void DG_iiib (int, int, int, bool);
delegate void DG_iiis (int, int, int, string);
delegate void DG_iif (int, int, float);
delegate void DG_iifi (int, int, float, int);
delegate void DG_iiff (int, int, float, float);
delegate void DG_iifb (int, int, float, bool);
delegate void DG_iifs (int, int, float, string);
delegate void DG_iib (int, int, bool);
delegate void DG_iibi (int, int, bool, int);
delegate void DG_iibf (int, int, bool, float);
delegate void DG_iibb (int, int, bool, bool);
delegate void DG_iibs (int, int, bool, string);
delegate void DG_iis (int, int, string);
delegate void DG_iisi (int, int, string, int);
delegate void DG_iisf (int, int, string, float);
delegate void DG_iisb (int, int, string, bool);
delegate void DG_iiss (int, int, string, string);
delegate void DG_if (int, float);
delegate void DG_ifi (int, float, int);
delegate void DG_ifii (int, float, int, int);
delegate void DG_ifif (int, float, int, float);
delegate void DG_ifib (int, float, int, bool);
delegate void DG_ifis (int, float, int, string);
delegate void DG_iff (int, float, float);
delegate void DG_iffi (int, float, float, int);
delegate void DG_ifff (int, float, float, float);
delegate void DG_iffb (int, float, float, bool);
delegate void DG_iffs (int, float, float, string);
delegate void DG_ifb (int, float, bool);
delegate void DG_ifbi (int, float, bool, int);
delegate void DG_ifbf (int, float, bool, float);
delegate void DG_ifbb (int, float, bool, bool);
delegate void DG_ifbs (int, float, bool, string);
delegate void DG_ifs (int, float, string);
delegate void DG_ifsi (int, float, string, int);
delegate void DG_ifsf (int, float, string, float);
delegate void DG_ifsb (int, float, string, bool);
delegate void DG_ifss (int, float, string, string);
delegate void DG_ib (int, bool);
delegate void DG_ibi (int, bool, int);
delegate void DG_ibii (int, bool, int, int);
delegate void DG_ibif (int, bool, int, float);
delegate void DG_ibib (int, bool, int, bool);
delegate void DG_ibis (int, bool, int, string);
delegate void DG_ibf (int, bool, float);
delegate void DG_ibfi (int, bool, float, int);
delegate void DG_ibff (int, bool, float, float);
delegate void DG_ibfb (int, bool, float, bool);
delegate void DG_ibfs (int, bool, float, string);
delegate void DG_ibb (int, bool, bool);
delegate void DG_ibbi (int, bool, bool, int);
delegate void DG_ibbf (int, bool, bool, float);
delegate void DG_ibbb (int, bool, bool, bool);
delegate void DG_ibbs (int, bool, bool, string);
delegate void DG_ibs (int, bool, string);
delegate void DG_ibsi (int, bool, string, int);
delegate void DG_ibsf (int, bool, string, float);
delegate void DG_ibsb (int, bool, string, bool);
delegate void DG_ibss (int, bool, string, string);
delegate void DG_is (int, string);
delegate void DG_isi (int, string, int);
delegate void DG_isii (int, string, int, int);
delegate void DG_isif (int, string, int, float);
delegate void DG_isib (int, string, int, bool);
delegate void DG_isis (int, string, int, string);
delegate void DG_isf (int, string, float);
delegate void DG_isfi (int, string, float, int);
delegate void DG_isff (int, string, float, float);
delegate void DG_isfb (int, string, float, bool);
delegate void DG_isfs (int, string, float, string);
delegate void DG_isb (int, string, bool);
delegate void DG_isbi (int, string, bool, int);
delegate void DG_isbf (int, string, bool, float);
delegate void DG_isbb (int, string, bool, bool);
delegate void DG_isbs (int, string, bool, string);
delegate void DG_iss (int, string, string);
delegate void DG_issi (int, string, string, int);
delegate void DG_issf (int, string, string, float);
delegate void DG_issb (int, string, string, bool);
delegate void DG_isss (int, string, string, string);
delegate void DG_f (float);
delegate void DG_fi (float, int);
delegate void DG_fii (float, int, int);
delegate void DG_fiii (float, int, int, int);
delegate void DG_fiif (float, int, int, float);
delegate void DG_fiib (float, int, int, bool);
delegate void DG_fiis (float, int, int, string);
delegate void DG_fif (float, int, float);
delegate void DG_fifi (float, int, float, int);
delegate void DG_fiff (float, int, float, float);
delegate void DG_fifb (float, int, float, bool);
delegate void DG_fifs (float, int, float, string);
delegate void DG_fib (float, int, bool);
delegate void DG_fibi (float, int, bool, int);
delegate void DG_fibf (float, int, bool, float);
delegate void DG_fibb (float, int, bool, bool);
delegate void DG_fibs (float, int, bool, string);
delegate void DG_fis (float, int, string);
delegate void DG_fisi (float, int, string, int);
delegate void DG_fisf (float, int, string, float);
delegate void DG_fisb (float, int, string, bool);
delegate void DG_fiss (float, int, string, string);
delegate void DG_ff (float, float);
delegate void DG_ffi (float, float, int);
delegate void DG_ffii (float, float, int, int);
delegate void DG_ffif (float, float, int, float);
delegate void DG_ffib (float, float, int, bool);
delegate void DG_ffis (float, float, int, string);
delegate void DG_fff (float, float, float);
delegate void DG_fffi (float, float, float, int);
delegate void DG_ffff (float, float, float, float);
delegate void DG_fffb (float, float, float, bool);
delegate void DG_fffs (float, float, float, string);
delegate void DG_ffb (float, float, bool);
delegate void DG_ffbi (float, float, bool, int);
delegate void DG_ffbf (float, float, bool, float);
delegate void DG_ffbb (float, float, bool, bool);
delegate void DG_ffbs (float, float, bool, string);
delegate void DG_ffs (float, float, string);
delegate void DG_ffsi (float, float, string, int);
delegate void DG_ffsf (float, float, string, float);
delegate void DG_ffsb (float, float, string, bool);
delegate void DG_ffss (float, float, string, string);
delegate void DG_fb (float, bool);
delegate void DG_fbi (float, bool, int);
delegate void DG_fbii (float, bool, int, int);
delegate void DG_fbif (float, bool, int, float);
delegate void DG_fbib (float, bool, int, bool);
delegate void DG_fbis (float, bool, int, string);
delegate void DG_fbf (float, bool, float);
delegate void DG_fbfi (float, bool, float, int);
delegate void DG_fbff (float, bool, float, float);
delegate void DG_fbfb (float, bool, float, bool);
delegate void DG_fbfs (float, bool, float, string);
delegate void DG_fbb (float, bool, bool);
delegate void DG_fbbi (float, bool, bool, int);
delegate void DG_fbbf (float, bool, bool, float);
delegate void DG_fbbb (float, bool, bool, bool);
delegate void DG_fbbs (float, bool, bool, string);
delegate void DG_fbs (float, bool, string);
delegate void DG_fbsi (float, bool, string, int);
delegate void DG_fbsf (float, bool, string, float);
delegate void DG_fbsb (float, bool, string, bool);
delegate void DG_fbss (float, bool, string, string);
delegate void DG_fs (float, string);
delegate void DG_fsi (float, string, int);
delegate void DG_fsii (float, string, int, int);
delegate void DG_fsif (float, string, int, float);
delegate void DG_fsib (float, string, int, bool);
delegate void DG_fsis (float, string, int, string);
delegate void DG_fsf (float, string, float);
delegate void DG_fsfi (float, string, float, int);
delegate void DG_fsff (float, string, float, float);
delegate void DG_fsfb (float, string, float, bool);
delegate void DG_fsfs (float, string, float, string);
delegate void DG_fsb (float, string, bool);
delegate void DG_fsbi (float, string, bool, int);
delegate void DG_fsbf (float, string, bool, float);
delegate void DG_fsbb (float, string, bool, bool);
delegate void DG_fsbs (float, string, bool, string);
delegate void DG_fss (float, string, string);
delegate void DG_fssi (float, string, string, int);
delegate void DG_fssf (float, string, string, float);
delegate void DG_fssb (float, string, string, bool);
delegate void DG_fsss (float, string, string, string);
delegate void DG_b (bool);
delegate void DG_bi (bool, int);
delegate void DG_bii (bool, int, int);
delegate void DG_biii (bool, int, int, int);
delegate void DG_biif (bool, int, int, float);
delegate void DG_biib (bool, int, int, bool);
delegate void DG_biis (bool, int, int, string);
delegate void DG_bif (bool, int, float);
delegate void DG_bifi (bool, int, float, int);
delegate void DG_biff (bool, int, float, float);
delegate void DG_bifb (bool, int, float, bool);
delegate void DG_bifs (bool, int, float, string);
delegate void DG_bib (bool, int, bool);
delegate void DG_bibi (bool, int, bool, int);
delegate void DG_bibf (bool, int, bool, float);
delegate void DG_bibb (bool, int, bool, bool);
delegate void DG_bibs (bool, int, bool, string);
delegate void DG_bis (bool, int, string);
delegate void DG_bisi (bool, int, string, int);
delegate void DG_bisf (bool, int, string, float);
delegate void DG_bisb (bool, int, string, bool);
delegate void DG_biss (bool, int, string, string);
delegate void DG_bf (bool, float);
delegate void DG_bfi (bool, float, int);
delegate void DG_bfii (bool, float, int, int);
delegate void DG_bfif (bool, float, int, float);
delegate void DG_bfib (bool, float, int, bool);
delegate void DG_bfis (bool, float, int, string);
delegate void DG_bff (bool, float, float);
delegate void DG_bffi (bool, float, float, int);
delegate void DG_bfff (bool, float, float, float);
delegate void DG_bffb (bool, float, float, bool);
delegate void DG_bffs (bool, float, float, string);
delegate void DG_bfb (bool, float, bool);
delegate void DG_bfbi (bool, float, bool, int);
delegate void DG_bfbf (bool, float, bool, float);
delegate void DG_bfbb (bool, float, bool, bool);
delegate void DG_bfbs (bool, float, bool, string);
delegate void DG_bfs (bool, float, string);
delegate void DG_bfsi (bool, float, string, int);
delegate void DG_bfsf (bool, float, string, float);
delegate void DG_bfsb (bool, float, string, bool);
delegate void DG_bfss (bool, float, string, string);
delegate void DG_bb (bool, bool);
delegate void DG_bbi (bool, bool, int);
delegate void DG_bbii (bool, bool, int, int);
delegate void DG_bbif (bool, bool, int, float);
delegate void DG_bbib (bool, bool, int, bool);
delegate void DG_bbis (bool, bool, int, string);
delegate void DG_bbf (bool, bool, float);
delegate void DG_bbfi (bool, bool, float, int);
delegate void DG_bbff (bool, bool, float, float);
delegate void DG_bbfb (bool, bool, float, bool);
delegate void DG_bbfs (bool, bool, float, string);
delegate void DG_bbb (bool, bool, bool);
delegate void DG_bbbi (bool, bool, bool, int);
delegate void DG_bbbf (bool, bool, bool, float);
delegate void DG_bbbb (bool, bool, bool, bool);
delegate void DG_bbbs (bool, bool, bool, string);
delegate void DG_bbs (bool, bool, string);
delegate void DG_bbsi (bool, bool, string, int);
delegate void DG_bbsf (bool, bool, string, float);
delegate void DG_bbsb (bool, bool, string, bool);
delegate void DG_bbss (bool, bool, string, string);
delegate void DG_bs (bool, string);
delegate void DG_bsi (bool, string, int);
delegate void DG_bsii (bool, string, int, int);
delegate void DG_bsif (bool, string, int, float);
delegate void DG_bsib (bool, string, int, bool);
delegate void DG_bsis (bool, string, int, string);
delegate void DG_bsf (bool, string, float);
delegate void DG_bsfi (bool, string, float, int);
delegate void DG_bsff (bool, string, float, float);
delegate void DG_bsfb (bool, string, float, bool);
delegate void DG_bsfs (bool, string, float, string);
delegate void DG_bsb (bool, string, bool);
delegate void DG_bsbi (bool, string, bool, int);
delegate void DG_bsbf (bool, string, bool, float);
delegate void DG_bsbb (bool, string, bool, bool);
delegate void DG_bsbs (bool, string, bool, string);
delegate void DG_bss (bool, string, string);
delegate void DG_bssi (bool, string, string, int);
delegate void DG_bssf (bool, string, string, float);
delegate void DG_bssb (bool, string, string, bool);
delegate void DG_bsss (bool, string, string, string);
delegate void DG_s (string);
delegate void DG_si (string, int);
delegate void DG_sii (string, int, int);
delegate void DG_siii (string, int, int, int);
delegate void DG_siif (string, int, int, float);
delegate void DG_siib (string, int, int, bool);
delegate void DG_siis (string, int, int, string);
delegate void DG_sif (string, int, float);
delegate void DG_sifi (string, int, float, int);
delegate void DG_siff (string, int, float, float);
delegate void DG_sifb (string, int, float, bool);
delegate void DG_sifs (string, int, float, string);
delegate void DG_sib (string, int, bool);
delegate void DG_sibi (string, int, bool, int);
delegate void DG_sibf (string, int, bool, float);
delegate void DG_sibb (string, int, bool, bool);
delegate void DG_sibs (string, int, bool, string);
delegate void DG_sis (string, int, string);
delegate void DG_sisi (string, int, string, int);
delegate void DG_sisf (string, int, string, float);
delegate void DG_sisb (string, int, string, bool);
delegate void DG_siss (string, int, string, string);
delegate void DG_sf (string, float);
delegate void DG_sfi (string, float, int);
delegate void DG_sfii (string, float, int, int);
delegate void DG_sfif (string, float, int, float);
delegate void DG_sfib (string, float, int, bool);
delegate void DG_sfis (string, float, int, string);
delegate void DG_sff (string, float, float);
delegate void DG_sffi (string, float, float, int);
delegate void DG_sfff (string, float, float, float);
delegate void DG_sffb (string, float, float, bool);
delegate void DG_sffs (string, float, float, string);
delegate void DG_sfb (string, float, bool);
delegate void DG_sfbi (string, float, bool, int);
delegate void DG_sfbf (string, float, bool, float);
delegate void DG_sfbb (string, float, bool, bool);
delegate void DG_sfbs (string, float, bool, string);
delegate void DG_sfs (string, float, string);
delegate void DG_sfsi (string, float, string, int);
delegate void DG_sfsf (string, float, string, float);
delegate void DG_sfsb (string, float, string, bool);
delegate void DG_sfss (string, float, string, string);
delegate void DG_sb (string, bool);
delegate void DG_sbi (string, bool, int);
delegate void DG_sbii (string, bool, int, int);
delegate void DG_sbif (string, bool, int, float);
delegate void DG_sbib (string, bool, int, bool);
delegate void DG_sbis (string, bool, int, string);
delegate void DG_sbf (string, bool, float);
delegate void DG_sbfi (string, bool, float, int);
delegate void DG_sbff (string, bool, float, float);
delegate void DG_sbfb (string, bool, float, bool);
delegate void DG_sbfs (string, bool, float, string);
delegate void DG_sbb (string, bool, bool);
delegate void DG_sbbi (string, bool, bool, int);
delegate void DG_sbbf (string, bool, bool, float);
delegate void DG_sbbb (string, bool, bool, bool);
delegate void DG_sbbs (string, bool, bool, string);
delegate void DG_sbs (string, bool, string);
delegate void DG_sbsi (string, bool, string, int);
delegate void DG_sbsf (string, bool, string, float);
delegate void DG_sbsb (string, bool, string, bool);
delegate void DG_sbss (string, bool, string, string);
delegate void DG_ss (string, string);
delegate void DG_ssi (string, string, int);
delegate void DG_ssii (string, string, int, int);
delegate void DG_ssif (string, string, int, float);
delegate void DG_ssib (string, string, int, bool);
delegate void DG_ssis (string, string, int, string);
delegate void DG_ssf (string, string, float);
delegate void DG_ssfi (string, string, float, int);
delegate void DG_ssff (string, string, float, float);
delegate void DG_ssfb (string, string, float, bool);
delegate void DG_ssfs (string, string, float, string);
delegate void DG_ssb (string, string, bool);
delegate void DG_ssbi (string, string, bool, int);
delegate void DG_ssbf (string, string, bool, float);
delegate void DG_ssbb (string, string, bool, bool);
delegate void DG_ssbs (string, string, bool, string);
delegate void DG_sss (string, string, string);
delegate void DG_sssi (string, string, string, int);
delegate void DG_sssf (string, string, string, float);
delegate void DG_sssb (string, string, string, bool);
delegate void DG_ssss (string, string, string, string);
delegate void DG_sssisss (string, string, string, int, string, string, string);
delegate void DG_ssiss (string, string, int, string, string);
delegate void FTTest (void);
delegate bool DG_IsSelectableFuncName (string);
delegate void DG_SetIntHandler (int);
delegate int DG_GetIntHandler (void);
delegate void DG_SetFloatHandler (float);
delegate float DG_GetFloatHandler (void);
delegate void DG_SetBoolHandler (bool);
delegate bool DG_GetBoolHandler (void);
delegate void DG_SetStringHandler (string);
delegate string DG_GetStringHandler (void);
delegate void DG_SetColorHandler (int, int, int);
delegate void DG_GetColorHandler (ref int, ref int, ref int);
delegate void DG_SetNumeralWidthHandler (int, int, int, int, int, int, int, int, int, int, int, int);
delegate void DG_GetNumeralWidthHandler (ref int, ref int, ref int, ref int, ref int, ref int, ref int, ref int, ref int, ref int, ref int, ref int);
delegate void DG_SetFontHandler (int, int, int, int, int, float, int, int, int, float);
delegate void DG_GetFontHandler (ref int, ref int, ref int, ref int, ref int, ref float, ref int, ref int, ref int, ref float);
delegate void DG_SetIntListHandler (ref array@int);
delegate bool DG_GetIntListHandler (ref array@int);
delegate void DG_SetStringListHandler (ref array@string);
delegate bool DG_GetStringListHandler (ref array@string);
delegate void DG_SelectedEXNodeHandler (string, string);
delegate void void_functype (void);
delegate void DG_ItemListViewClickCallback (string);
delegate void DG_ItemViewClickCallback (int);
delegate float DG_GetScrollerPosition (void);
delegate void DG_SetScrollerPosition (float);
delegate void DG_PlayerButtonClickCallback (string);
delegate int DG_CountButtonGetCount (void);
delegate void DG_ButtonClickCallback (int);
delegate void DG_MapBackGroundFadeInOutCallback (void);
delegate void DG_MapPlaceButtonClickCallback (int);
delegate string DG_GetMapEncountMonsterGroup (void);
delegate void DG_OnClickPlaceCallback (string);
delegate void DG_CardClickCallback (int);
delegate void DG_OnLineCardClickCallback (ref DungeonCard, int, int);
delegate void DG_DungeonWalkCallback (string);
delegate void DG_OnClickAttackSkillCallback (string);
delegate void DG_OnClickSkillIcon (string);
delegate int DG_CalcPlayerAttackDamage (int, ref Player, ref PlayerSkill, ref MonsterInstance, int, int, ref int, ref string);
delegate int DG_CalcPlayerHeal (int, ref Player, ref Player, ref PlayerSkill, int, int, ref int, ref string);
delegate int DG_CalcMonsterAttackDamage (int, ref MonsterInstance, ref MonsterAttack, ref Player, int, int);
delegate int DG_CalcMonsterHeal (int, ref Monster, ref Monster, ref MonsterAttack, int, int);
delegate string DG_GetPlayerBuffFromPlayerSkill (PlayerSkill);
delegate string DG_GetMonsterBuffFromMonsterAttack (ref MonsterAttack);
delegate void DG_MonsterBattleLogCallback (int, string, ref MonsterAttack);
delegate void DG_CheckBattleBonusOnPlayerAttack (int, int);
delegate void DG_CheckBattleBonusOnPlayerTurn (int, int, bool);
delegate void DG_OnEraseMonsterCallback (int);
delegate void DG_OnChangeMonsterCallback (int, ref MonsterInstance);
delegate void DG_OnAddMonsterCallback (ref MonsterInstance);
delegate void DG_MonsterBuffAddCallback (string, string, string);
delegate void DG_PlayerBuffAddCallback (string, string, string);
delegate void DG_OnBattleSystemButtonClickCallback (int);
delegate void DG_OnBattleStartCallback (ref array@string);
delegate bool DG_IsSkipMonsterAttack (void);
delegate bool DG_IsMonsterSurprizeAttack (ref array@string);
delegate string DG_GetBattleResultCallback (string, string, ref array@string);
delegate void DG_OnSkillSelectorClickCallback (int);
delegate void DG_OnSkillSelecterHoverCallback (int, bool);
delegate string DG_TelopFunction (void);
delegate void DG_OnChangeHoverIndex (int);
delegate void DG_UseItemCallback (string, ref Player);
delegate void DG_OnBalloonButtonClickCallback (int);
delegate void DG_OnClickSaveObjectCallback (int);
delegate string DG_LevelUpMessage (string, int, string);
delegate void DG_OnClickAdvSelectionButtonCallback (int);
delegate float DG_GetScrollerPos (void);
delegate void DG_OnClickLRNavigate (int);
delegate void DG_OnClickOmakeModeTab (int);
delegate void DG_ThumbnailButtonClickCallback (int);
delegate void DG_OnClickMusicButtonCallback (int);
delegate void DG_DungeonViewerOnClickCallback (int, int);
delegate void DG_DebugTextIndexMapExecuteFunction (ref DebugFunctionTextIndexMap);
delegate string DG_DebugTextIndexSelectFunction (ref array@string, string);
delegate void DG_StringParamCallback (string);
delegate void AdvFunc (void);
delegate void DG_OnLogAddCallback (string, int);
delegate int DG_GetItemProbabilityCallback (int);
delegate bool DG_CardClickableCallback (void);
delegate int DG_PriceFunction (ref Item, int);
delegate void DG_OnChangeHp (int);
delegate void DG_OnChangeBuff (string);
delegate int DG_ExpFunction (int);
delegate void DG_OnChangeItemCallback (string, int);
delegate void DG_OnBadConditionBeginEndHandler (string, bool);
delegate void DG_OnChangeHelperCallback (int, int, int, int);
delegate void DG_OnSaveCallback (void);
delegate bool DG_SceneUpdateMethod (void);
delegate void DG_OpenFlatCallback (string);
delegate float DG_GetConfigSliderParamFunc (void);
delegate bool DG_GetConfigCheckboxFunc (void);
delegate void DG_SetConfigSliderParamFunc (float);
delegate void DG_SetConfigCheckboxParamFunc (bool);
delegate void DG_InitialFunction (void);
delegate void DG_AdvCallbackFunction (void);
delegate void DG_GeneralCallback (void);
delegate void DELEGATE_UPDATE_METHOD (void);
delegate bool DELEGATE_FOCUSED_METHOD (void);
delegate void DG_OnClickButtonParts (int);
delegate void DG_OnCheckCheckBoxParts (string, bool);
delegate void PARTS_CAMERA_AFFECT_CALLBACK (void);
delegate void DG_PartsMotionUpdateMethod (void);
delegate void DG_MOTION_UPDATE_METHOD (float);
delegate void FuncOnMusicPlay (string);
delegate bool FUNC_SKIP_CHECKER (void);
